{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction My philosohpy about learning is Learning is never ending process. gimmick:FacebookLike Follow me on Twitter : gimmick:TwitterFollow Subscribe Us About Me Seeking a position in Education Industry that utilizes my skills and abilities for achieving its goals and offers me high-level professional and technical growth through continuous learning process. Work Experience Industrial Experience : 1 Teaching Experience: 6.5 Research: 3 TEACHING : 3 Yrs . Presently working as, a Sr. Lecturer at Shree Shyam College, w.e.f. Jul. 2015. (Affiliated by UOK KOTA) TEACHING : 4 Yrs. 5 Month of Experience (May 31, 2015) as Senior Lecturer at APEX COLLEGE, w.e.f. DEC. 2010. (Affiliated by UOK KOTA) INDUSTRY :Worked as a Software Developer for 11 months in Padam Soft Solutions Gurgaon RESEARCH : 3 Membership Associate, Life membership** of \u201cComputer Society of India\u201d. SDIWC - Society of Digital Information and wireless communication. ACM CSTA Data Science Foundation ID: I01003 THEIRED / UACEE , Sr. Member, Membership Id: SNM10100058539 Individual Membership from Oracle Academy till 9/5/2020. Qualification Ph.D. (Submitted) M.C.A.(Hon\u2019s) SET/SLET B.Sc.(PCM) Paper Presented International : 8 National : 5 Workshop International : 4 Research My Research based on audit able security of large scale data at the integration or real time and provide analysis to the security automation system. Considering existed algorithms for processing, large scale integration, distributed computing, cloud computing, RSA, Automation\u2026 gimmick:Disqus","title":"Home"},{"location":"cc/","text":"Cloud Computing Link Credits : 4 Elective III Unit-I (15 Lecture) Link Evolution of Computing Paradigms - Overview of Existing Hosting Platforms, Grid Computing, Utility Computing, Autonomic Computing, Dynamic Data center Alliance, Hosting / Outsourcing, Introduction to Cloud Computing, Workload Patterns for the Cloud, \u201cBig Data\u201d, IT as a Service, Technology Behind Cloud Computing Unit II: (20 lectures) Link A Classification of Cloud Implementations- Amazon Web Services - IaaS, The Elastic Compute Cloud (EC2), The Simple Storage Service (S3), The Simple Queuing Services (SQS), VMware vCloud - IaaS, vCloud Express, Google AppEngine - PaaS, The Java Runtime Environment Unit III: ( 15 lectures) Link The Python Runtime Environment- The Data-store, Development Workflow, Windows Azure Platform - PaaS, Windows Azure, SQL Azure, Windows AzureAppFabric Unit IV: ( 10 lectures) Link Salesforce.com - SaaS / PaaS, Force.com, Force Database - the persistencey layer, Data Security, Microsoft Office Live - SaaS, LiveMesh.com, Google Apps - SaaS, A Comparison of Cloud Computing Platforms, Common Building Blocks. Case studies on latest paradigms** References Link Raj Kumar Buyya, James Broberg, Andrezei M.Goscinski, Cloud Computing: Principles and paradigms, 2011 Michael Miller, Cloud Computing, 2008 Furht, Borko; Escalante, Armando, Handbook of Cloud Computing, Springer, ISBN 978-1-4419-6523-3, 2010 Judith Hurwitz, Robin Bllor, Marcia Kaufman, Fern Halper, Cloud Computing for dummies, 2009. Cloud Computing: A practical Approach Anthony Velte, Toby Velte and Robert Elsenpeter by Tata McGrawHill (2009). John W. Rittinghouse and james F. Ransome, Cloud Computing Implementation, Management and Security, CRC Press, Taylor & Francis Group, Boca Raton London New York, 2010. Alfredo Mendoza, Utility Computing Technologies, Standards, and Strategies, Artech House INC, 2007. Bunker and Darren Thomson, Delivering Utility Computing, John Wiley & Sons Ltd, 2006. George Reese, Cloud Application Architectures, O\u2019reilly Publications, 2009. https://sites.google.com/a/thapar.edu/ucs636/ http://www.coetbgsbu.org/html/CSE-841.htm https://www.onlinebooksstore.in/ashirwad-cloud-computing-by-dr-veena-yadav-for-rtu-computer-science-engineering-7th-semester http://pustakonline.com/index.php?route=product/product&product_id=2075 Distributed and Cloud Computing By Kai Hawang , Geofrey C.Fox, Jack Dongarra Pub: Elservier Cloud Computing ,Principal and Paradigms, Edited By Rajkumar Buyya, Jemes Broberg, Goscinski, Pub.- Wiley Kumar Saurabh, \u201cCloud Computing\u201d , Wiley Pub Krutz , Vines, \u201cCloud Security \u201c , Wiley Pub Velte, \u201cCloud Computing- A Practical Approach\u201d ,TMH Pub","title":"Cloud Computing"},{"location":"cc/#cloud-computing","text":"Credits : 4 Elective III","title":"Cloud Computing"},{"location":"cc/#unit-i-15-lecture","text":"Evolution of Computing Paradigms - Overview of Existing Hosting Platforms, Grid Computing, Utility Computing, Autonomic Computing, Dynamic Data center Alliance, Hosting / Outsourcing, Introduction to Cloud Computing, Workload Patterns for the Cloud, \u201cBig Data\u201d, IT as a Service, Technology Behind Cloud Computing","title":"Unit-I (15 Lecture)"},{"location":"cc/#unit-ii-20-lectures","text":"A Classification of Cloud Implementations- Amazon Web Services - IaaS, The Elastic Compute Cloud (EC2), The Simple Storage Service (S3), The Simple Queuing Services (SQS), VMware vCloud - IaaS, vCloud Express, Google AppEngine - PaaS, The Java Runtime Environment","title":"Unit II: (20  lectures)"},{"location":"cc/#unit-iii-15-lectures","text":"The Python Runtime Environment- The Data-store, Development Workflow, Windows Azure Platform - PaaS, Windows Azure, SQL Azure, Windows AzureAppFabric","title":"Unit III: ( 15  lectures)"},{"location":"cc/#unit-iv-10-lectures","text":"Salesforce.com - SaaS / PaaS, Force.com, Force Database - the persistencey layer, Data Security, Microsoft Office Live - SaaS, LiveMesh.com, Google Apps - SaaS, A Comparison of Cloud Computing Platforms, Common Building Blocks. Case studies on latest paradigms**","title":"Unit IV: ( 10  lectures)"},{"location":"cc/#references","text":"Raj Kumar Buyya, James Broberg, Andrezei M.Goscinski, Cloud Computing: Principles and paradigms, 2011 Michael Miller, Cloud Computing, 2008 Furht, Borko; Escalante, Armando, Handbook of Cloud Computing, Springer, ISBN 978-1-4419-6523-3, 2010 Judith Hurwitz, Robin Bllor, Marcia Kaufman, Fern Halper, Cloud Computing for dummies, 2009. Cloud Computing: A practical Approach Anthony Velte, Toby Velte and Robert Elsenpeter by Tata McGrawHill (2009). John W. Rittinghouse and james F. Ransome, Cloud Computing Implementation, Management and Security, CRC Press, Taylor & Francis Group, Boca Raton London New York, 2010. Alfredo Mendoza, Utility Computing Technologies, Standards, and Strategies, Artech House INC, 2007. Bunker and Darren Thomson, Delivering Utility Computing, John Wiley & Sons Ltd, 2006. George Reese, Cloud Application Architectures, O\u2019reilly Publications, 2009. https://sites.google.com/a/thapar.edu/ucs636/ http://www.coetbgsbu.org/html/CSE-841.htm https://www.onlinebooksstore.in/ashirwad-cloud-computing-by-dr-veena-yadav-for-rtu-computer-science-engineering-7th-semester http://pustakonline.com/index.php?route=product/product&product_id=2075 Distributed and Cloud Computing By Kai Hawang , Geofrey C.Fox, Jack Dongarra Pub: Elservier Cloud Computing ,Principal and Paradigms, Edited By Rajkumar Buyya, Jemes Broberg, Goscinski, Pub.- Wiley Kumar Saurabh, \u201cCloud Computing\u201d , Wiley Pub Krutz , Vines, \u201cCloud Security \u201c , Wiley Pub Velte, \u201cCloud Computing- A Practical Approach\u201d ,TMH Pub","title":"References"},{"location":"cc/UnitI/","text":"Introduction Link Evolution of Computing Paradigms - Overview of Existing Hosting Platforms, Grid Computing, Utility Computing, Autonomic Computing, Dynamic Data center Alliance, Hosting / Outsourcing, Introduction to Cloud Computing, Workload Patterns for the Cloud, \u201cBig Data\u201d, IT as a Service, Technology Behind Cloud Computing","title":"Introduction"},{"location":"cc/UnitI/#introduction","text":"Evolution of Computing Paradigms - Overview of Existing Hosting Platforms, Grid Computing, Utility Computing, Autonomic Computing, Dynamic Data center Alliance, Hosting / Outsourcing, Introduction to Cloud Computing, Workload Patterns for the Cloud, \u201cBig Data\u201d, IT as a Service, Technology Behind Cloud Computing","title":"Introduction"},{"location":"cc/UnitII/","text":"Cloud Implementation Tools Link A Classification of Cloud Implementations- Amazon Web Services - IaaS, The Elastic Compute Cloud (EC2), The Simple Storage Service (S3), The Simple Queuing Services (SQS), VMware vCloud - IaaS, vCloud Express, Google AppEngine - PaaS, The Java Runtime Environment The Java Runtime Environment Cloud Implementations Cloud Implementation Models IAAS Amazon Amazon Elastic Cloud Computing Amazon S3 Amazon SQS Amazon EMR Amazon Cloud Front Amazon Simple DB Amazon Storage Service vCloud Platform as a Service Software as a Service Comparison among SAAS, IAAS and PAAS","title":"Cloud Implementation Tools"},{"location":"cc/UnitII/#cloud-implementation-tools","text":"A Classification of Cloud Implementations- Amazon Web Services - IaaS, The Elastic Compute Cloud (EC2), The Simple Storage Service (S3), The Simple Queuing Services (SQS), VMware vCloud - IaaS, vCloud Express, Google AppEngine - PaaS, The Java Runtime Environment The Java Runtime Environment Cloud Implementations Cloud Implementation Models IAAS Amazon Amazon Elastic Cloud Computing Amazon S3 Amazon SQS Amazon EMR Amazon Cloud Front Amazon Simple DB Amazon Storage Service vCloud Platform as a Service Software as a Service Comparison among SAAS, IAAS and PAAS","title":"Cloud Implementation Tools"},{"location":"cc/UnitIII/","text":"Cloud Implementation Tools : Microsoft Link The Python Runtime Environment- The Data-store, Development Workflow, Windows Azure Platform - PaaS, Windows Azure, SQL Azure, Windows AzureAppFabric","title":"Cloud Implementation Tools : Microsoft"},{"location":"cc/UnitIII/#cloud-implementation-tools-microsoft","text":"The Python Runtime Environment- The Data-store, Development Workflow, Windows Azure Platform - PaaS, Windows Azure, SQL Azure, Windows AzureAppFabric","title":"Cloud Implementation Tools : Microsoft"},{"location":"cc/UnitII_Amazon/","text":"AMAZON Link Amazon play a major role in IAAS environment. On-demand computing is an increasingly popular enterprise model in which computing resources are made available to the user as needed. Computing resources that are maintained on a user\u2019s site are becoming fewer and fewer, while those made available by a service provider are on the rise. The on-demand model evolved to overcome the challenge of being able to meet fluctuating resource demands efficiently. Because demand for computing resources can vary drastically from one time to another, main- taining sufficient resources to meet peak requirements can be costly. Over-engineering a solution can be just as adverse as a situation where the enterprise cuts costs by maintaining only minimal computing resources, resulting in insufficient resources to meet peak load requirements. Concepts such as clustered computing, grid computing, utility computing, etc., may all seem very similar to the concept of on-demand computing, but they can be better understood if one thinks of them as building blocks that evolved over time and with techno-evolution to achieve the modern cloud computing model we think of and use today. One example we will examine is Amazon\u2019s Elastic Compute Cloud (Amazon EC2). This is a web service that provides resizable computing capacity in the cloud. It is designed to make web-scale computing easier for developers and offers many advantages to customers: - It\u2019s web service interface allows customers to obtain and configure capacity with minimal effort. - It provides users with complete control of their (leased) computing resources and lets them run on a proven computing environment. - It reduces the time required to obtain and boot new server instances to minutes, allowing customers to quickly scale capacity as their computing demands dictate. - It changes the economics of computing by allowing clients to pay only for capacity they actually use. - It provides developers the tools needed to build failure-resilient applications and isolate themselves from common failure scenarios. Amazon Web Services Link Amazon Web Services. A number of significant AWS competitors exist who have different takes on the IaaS problem. These different approaches have key value propositions for different kinds of cloud customers. AWS is based on pure virtualization. Amazon owns all the hardware and controls the network infrastructure, and you own everything from the guest operating system up. You request virtual instances on-demand and let them go when you are done. Amazon sees one of its key benefits is a commitment to not over committing resources to virtualization. AppNexus represents a different approach to this problem. As with AWS, AppNexus enables you to gain access to servers on demand. AppNexus, however, provides dedicated servers with virtualization on top. The confidence in knowing that your applications are not fighting with anyone else for resources and that you can meet any requirements that demand full control over all physical server resources. Hybrid computing takes advantage of both worlds, offering virtualization where appropriate and dedicated hardware where appropriate. In addition, most hybrid vendors such as Rackspace and GoGrid base their model on the idea that people still want a traditional data center\u2014they just want it in the cloud. There are a number of reasons why a purely virtualization solution might not work for you: Regulatory requirements that demand certain functions operate on dedicated hardware Performance requirements \u2014particularly in the area of I/O\u2014that will not support portions of your application Integration points with legacy systems that may lack any kind of web integration strategy. A cloud approach tied more closely to physical hardware may meet your needs in such cases There is Microsoft Azure . Microsoft Azure represents all aspects of cloud computing, from private clouds up to PaaS. You write your applications using Microsoft technologies and can deploy them initially in a private cloud and later migrate them to a public cloud . Like Google App Engine , you write applications to a proprietary application development framework. In the case of Azure, however, the framework is based on the more ubiquitous .NET platform and is thus more easily portable across Microsoft environments. Overview of of Amazon Web Services Link There apply cloud environment by using following principles. In reality, however, most of are likely implementing in the AWS environment. Ignoring that fact is just plain foolish; therefore, using that AWS environment for the examples used throughout. AWS is Amazon\u2019s umbrella description of all of their web-based technology services. It encompasses a wide variety of services, all of which fall into the concept of cloud computing. There are technologies that fit into their Infrastructure Services: Amazon Elastic Cloud Compute (Amazon EC2) Amazon Simple Storage Service (Amazon S3) Amazon Simple Queue Service (Amazon SQS) Amazon CloudFront Amazon SimpleDB Two of these technologies\u2014 Amazon EC2 and Amazon S3 \u2014are particularly interesting in the context of transactional systems . There message queues are critical in grid computing and are also useful in many kinds of transactional systems . Given that the heart of a transactional system is a database, think Amazon SimpleDB would be a critical piece for a transactional application in the Amazon cloud . In reality, however, Amazon SimpleDB is\u2014as its name implies\u2014simple. Therefore, it\u2019s not well suited to large-scale web applications. Furthermore, it is a proprietary database system, so an application too tightly coupled to Amazon SimpleDB is stuck in the Amazon cloud. Infrastructure as A Services (IAAS) Amazon EC2 Link Amazon Elastic Compute Cloud (Amazon EC2) is an Amazon Web Service (AWS) you can use to access servers, software, and storage resources across the Internet in a self-service manner Provides scalable, pay as-you-go compute capacity Elastic - scales in both direction Storage Link Amazon EC2 provides three type of storage option Amazon EBS Amazon S3 Instance Storage Networking and Security Link Amazon EC2 Key Pairs Link Amazon EC2 uses public\u2013key cryptography to encrypt and decrypt login information. Public\u2013key cryptography uses a public key to encrypt a piece of data, such as a password, then the recipient uses the private key to decrypt the data. The public and private keys are known as a key pair . To log in to your instance, you must create a key pair, specify the name of the key pair when you launch the instance, and provide the private key when you connect to the instance. On a Linux instance, the public key content is placed in an entry within ~/.ssh/authorized_keys . This is done at boot time and enables you to securely access your instance using the private key instead of a password. Amazon EC2 Security Groups for Linux Instances Link A security group acts as a virtual firewall that controls the traffic for one or more instances. When you launch an instance, you can specify one or more security groups; otherwise, we use the default security group. You can add rules to each security group that allow traffic to or from its associated instances. You can modify the rules for a security group at any time; the new rules are automatically applied to all instances that are associated with the security group. When we decide whether to allow traffic to reach an instance, we evaluate all the rules from all the security groups that are associated with the instance. Controlling Access to Amazon EC2 Resources Link Your security credentials identify you to services in AWS and grant you unlimited use of your AWS resources, such as your Amazon EC2 resources. You can use features of Amazon EC2 and AWS Identity and Access Management (IAM) to allow other users, services, and applications to use your Amazon EC2 resources without sharing your security credentials. You can use IAM to control how other users use resources in your AWS account, and you can use security groups to control access to your Amazon EC2 instances. You can choose to allow full use or limited use of your Amazon EC2 resources. Amazon EC2 Instance IP Addressing Link Amazon EC2 and Amazon VPC support both the IPv4 and IPv6 addressing protocols. By default, Amazon EC2 and Amazon VPC use the IPv4 addressing protocol; you can't disable this behavior. When you create a VPC, you must specify an IPv4 CIDR block (a range of private IPv4 addresses). You can optionally assign an IPv6 CIDR block to your VPC and subnets, and assign IPv6 addresses from that block to instances in your subnet. IPv6 addresses are reachable over the Internet. Elastic IP Addresses Link An Elastic IP address is a static IPv4 address designed for dynamic cloud computing. An Elastic IP address is associated with your AWS account. With an Elastic IP address, you can mask the failure of an instance or software by rapidly remapping the address to another instance in your account. An Elastic IP address is a public IPv4 address, which is reachable from the internet. If your instance does not have a public IPv4 address, you can associate an Elastic IP address with your instance to enable communication with the internet; for example, to connect to your instance from your local computer. Enhanced Networking on Linux Link Enhanced networking uses single root I/O virtualization (SR-IOV) to provide high-performance networking capabilities on supported instance types . SR-IOV is a method of device virtualization that provides higher I/O performance and lower CPU utilization when compared to traditional virtualized network interfaces. Enhanced networking provides higher bandwidth, higher packet per second (PPS) performance, and consistently lower inter-instance latencies. There is no additional charge for using enhanced networking. Placement Groups Link You can launch or start instances in a placement group , which determines how instances are placed on underlying hardware. When you create a placement group, you specify one of the following strategies for the group: Cluster \u2013 clusters instances into a low-latency group in a single Availability Zone Partition \u2013 spreads instances across logical partitions, ensuring that instances in one partition do not share underlying hardware with instances in other partitions Spread \u2013 spreads instances across underlying hardware Instances can be launched on one of the two platforms EC2-Classic EC2-VPC Instance IP address is dynamic. new IP address is assigned every time instance is launched Static IP address \u2013 Elastic IP address Remap the Elastic IP to new instance to mask failure Separate pool for EC2-Classic and VPC Security Groups to access control to instance Monitoring, Auto Scaling, and Load Balancing Link \u2022Monitor statistics of instances and EBS \u2013CloudWatch \u2022Automatically scales amazon EC2 capacity up and down based on rules \u2013Add and remove compute resource based on demand \u2013Suitable for businesses experiencing variability in usage \u2022Distribute incoming traffic across multiple instances \u2013Elastic Load Balancing References Link (Theory in Practice O'Reilly) George Reese-Cloud Application Architectures_ Building Applications and Infrastructure in the Cloud (Theory in Practice (O'Reilly))-O'Reilly Media (2009) AMAZON EC2 Borko Furht (auth.), Borko Furht, Armando Escalante (eds.)-Handbook of cloud computing-Springer US (2010), Cloud Computing Services Part III http://docs.aws.amazon.com Above the Clouds: A Berkeley View of Cloud Computing - Michael Armbrust et.al 2009 International telecommunication union \u2013 Focus Group Cloud Technical Report Wikipedia aws.amazon.com/big-data aws.amazon.com/compliance aws.amazon.com/datasets aws.amazon.com/grants aws.amazon.com/genomics aws.amazon.com/hpc aws.amazon.com/security","title":"AMAZON"},{"location":"cc/UnitII_Amazon/#amazon","text":"Amazon play a major role in IAAS environment. On-demand computing is an increasingly popular enterprise model in which computing resources are made available to the user as needed. Computing resources that are maintained on a user\u2019s site are becoming fewer and fewer, while those made available by a service provider are on the rise. The on-demand model evolved to overcome the challenge of being able to meet fluctuating resource demands efficiently. Because demand for computing resources can vary drastically from one time to another, main- taining sufficient resources to meet peak requirements can be costly. Over-engineering a solution can be just as adverse as a situation where the enterprise cuts costs by maintaining only minimal computing resources, resulting in insufficient resources to meet peak load requirements. Concepts such as clustered computing, grid computing, utility computing, etc., may all seem very similar to the concept of on-demand computing, but they can be better understood if one thinks of them as building blocks that evolved over time and with techno-evolution to achieve the modern cloud computing model we think of and use today. One example we will examine is Amazon\u2019s Elastic Compute Cloud (Amazon EC2). This is a web service that provides resizable computing capacity in the cloud. It is designed to make web-scale computing easier for developers and offers many advantages to customers: - It\u2019s web service interface allows customers to obtain and configure capacity with minimal effort. - It provides users with complete control of their (leased) computing resources and lets them run on a proven computing environment. - It reduces the time required to obtain and boot new server instances to minutes, allowing customers to quickly scale capacity as their computing demands dictate. - It changes the economics of computing by allowing clients to pay only for capacity they actually use. - It provides developers the tools needed to build failure-resilient applications and isolate themselves from common failure scenarios.","title":"AMAZON"},{"location":"cc/UnitII_Amazon/#amazon-web-services","text":"Amazon Web Services. A number of significant AWS competitors exist who have different takes on the IaaS problem. These different approaches have key value propositions for different kinds of cloud customers. AWS is based on pure virtualization. Amazon owns all the hardware and controls the network infrastructure, and you own everything from the guest operating system up. You request virtual instances on-demand and let them go when you are done. Amazon sees one of its key benefits is a commitment to not over committing resources to virtualization. AppNexus represents a different approach to this problem. As with AWS, AppNexus enables you to gain access to servers on demand. AppNexus, however, provides dedicated servers with virtualization on top. The confidence in knowing that your applications are not fighting with anyone else for resources and that you can meet any requirements that demand full control over all physical server resources. Hybrid computing takes advantage of both worlds, offering virtualization where appropriate and dedicated hardware where appropriate. In addition, most hybrid vendors such as Rackspace and GoGrid base their model on the idea that people still want a traditional data center\u2014they just want it in the cloud. There are a number of reasons why a purely virtualization solution might not work for you: Regulatory requirements that demand certain functions operate on dedicated hardware Performance requirements \u2014particularly in the area of I/O\u2014that will not support portions of your application Integration points with legacy systems that may lack any kind of web integration strategy. A cloud approach tied more closely to physical hardware may meet your needs in such cases There is Microsoft Azure . Microsoft Azure represents all aspects of cloud computing, from private clouds up to PaaS. You write your applications using Microsoft technologies and can deploy them initially in a private cloud and later migrate them to a public cloud . Like Google App Engine , you write applications to a proprietary application development framework. In the case of Azure, however, the framework is based on the more ubiquitous .NET platform and is thus more easily portable across Microsoft environments.","title":"Amazon Web Services"},{"location":"cc/UnitII_Amazon/#overview-of-of-amazon-web-services","text":"There apply cloud environment by using following principles. In reality, however, most of are likely implementing in the AWS environment. Ignoring that fact is just plain foolish; therefore, using that AWS environment for the examples used throughout. AWS is Amazon\u2019s umbrella description of all of their web-based technology services. It encompasses a wide variety of services, all of which fall into the concept of cloud computing. There are technologies that fit into their Infrastructure Services: Amazon Elastic Cloud Compute (Amazon EC2) Amazon Simple Storage Service (Amazon S3) Amazon Simple Queue Service (Amazon SQS) Amazon CloudFront Amazon SimpleDB Two of these technologies\u2014 Amazon EC2 and Amazon S3 \u2014are particularly interesting in the context of transactional systems . There message queues are critical in grid computing and are also useful in many kinds of transactional systems . Given that the heart of a transactional system is a database, think Amazon SimpleDB would be a critical piece for a transactional application in the Amazon cloud . In reality, however, Amazon SimpleDB is\u2014as its name implies\u2014simple. Therefore, it\u2019s not well suited to large-scale web applications. Furthermore, it is a proprietary database system, so an application too tightly coupled to Amazon SimpleDB is stuck in the Amazon cloud.","title":"Overview of of Amazon Web Services"},{"location":"cc/UnitII_Amazon/#infrastructure-as-a-services-iaas-amazon-ec2","text":"Amazon Elastic Compute Cloud (Amazon EC2) is an Amazon Web Service (AWS) you can use to access servers, software, and storage resources across the Internet in a self-service manner Provides scalable, pay as-you-go compute capacity Elastic - scales in both direction","title":"Infrastructure as A Services (IAAS) Amazon EC2"},{"location":"cc/UnitII_Amazon/#storage","text":"Amazon EC2 provides three type of storage option Amazon EBS Amazon S3 Instance Storage","title":"Storage"},{"location":"cc/UnitII_Amazon/#networking-and-security","text":"","title":"Networking and Security"},{"location":"cc/UnitII_Amazon/#amazon-ec2-key-pairs","text":"Amazon EC2 uses public\u2013key cryptography to encrypt and decrypt login information. Public\u2013key cryptography uses a public key to encrypt a piece of data, such as a password, then the recipient uses the private key to decrypt the data. The public and private keys are known as a key pair . To log in to your instance, you must create a key pair, specify the name of the key pair when you launch the instance, and provide the private key when you connect to the instance. On a Linux instance, the public key content is placed in an entry within ~/.ssh/authorized_keys . This is done at boot time and enables you to securely access your instance using the private key instead of a password.","title":"Amazon EC2 Key Pairs"},{"location":"cc/UnitII_Amazon/#amazon-ec2-security-groups-for-linux-instances","text":"A security group acts as a virtual firewall that controls the traffic for one or more instances. When you launch an instance, you can specify one or more security groups; otherwise, we use the default security group. You can add rules to each security group that allow traffic to or from its associated instances. You can modify the rules for a security group at any time; the new rules are automatically applied to all instances that are associated with the security group. When we decide whether to allow traffic to reach an instance, we evaluate all the rules from all the security groups that are associated with the instance.","title":"Amazon EC2 Security Groups for Linux Instances"},{"location":"cc/UnitII_Amazon/#controlling-access-to-amazon-ec2-resources","text":"Your security credentials identify you to services in AWS and grant you unlimited use of your AWS resources, such as your Amazon EC2 resources. You can use features of Amazon EC2 and AWS Identity and Access Management (IAM) to allow other users, services, and applications to use your Amazon EC2 resources without sharing your security credentials. You can use IAM to control how other users use resources in your AWS account, and you can use security groups to control access to your Amazon EC2 instances. You can choose to allow full use or limited use of your Amazon EC2 resources.","title":"Controlling Access to Amazon EC2 Resources"},{"location":"cc/UnitII_Amazon/#amazon-ec2-instance-ip-addressing","text":"Amazon EC2 and Amazon VPC support both the IPv4 and IPv6 addressing protocols. By default, Amazon EC2 and Amazon VPC use the IPv4 addressing protocol; you can't disable this behavior. When you create a VPC, you must specify an IPv4 CIDR block (a range of private IPv4 addresses). You can optionally assign an IPv6 CIDR block to your VPC and subnets, and assign IPv6 addresses from that block to instances in your subnet. IPv6 addresses are reachable over the Internet.","title":"Amazon EC2 Instance IP Addressing"},{"location":"cc/UnitII_Amazon/#elastic-ip-addresses","text":"An Elastic IP address is a static IPv4 address designed for dynamic cloud computing. An Elastic IP address is associated with your AWS account. With an Elastic IP address, you can mask the failure of an instance or software by rapidly remapping the address to another instance in your account. An Elastic IP address is a public IPv4 address, which is reachable from the internet. If your instance does not have a public IPv4 address, you can associate an Elastic IP address with your instance to enable communication with the internet; for example, to connect to your instance from your local computer.","title":"Elastic IP Addresses"},{"location":"cc/UnitII_Amazon/#enhanced-networking-on-linux","text":"Enhanced networking uses single root I/O virtualization (SR-IOV) to provide high-performance networking capabilities on supported instance types . SR-IOV is a method of device virtualization that provides higher I/O performance and lower CPU utilization when compared to traditional virtualized network interfaces. Enhanced networking provides higher bandwidth, higher packet per second (PPS) performance, and consistently lower inter-instance latencies. There is no additional charge for using enhanced networking.","title":"Enhanced Networking on Linux"},{"location":"cc/UnitII_Amazon/#placement-groups","text":"You can launch or start instances in a placement group , which determines how instances are placed on underlying hardware. When you create a placement group, you specify one of the following strategies for the group: Cluster \u2013 clusters instances into a low-latency group in a single Availability Zone Partition \u2013 spreads instances across logical partitions, ensuring that instances in one partition do not share underlying hardware with instances in other partitions Spread \u2013 spreads instances across underlying hardware Instances can be launched on one of the two platforms EC2-Classic EC2-VPC Instance IP address is dynamic. new IP address is assigned every time instance is launched Static IP address \u2013 Elastic IP address Remap the Elastic IP to new instance to mask failure Separate pool for EC2-Classic and VPC Security Groups to access control to instance","title":"Placement Groups"},{"location":"cc/UnitII_Amazon/#monitoring-auto-scaling-and-load-balancing","text":"\u2022Monitor statistics of instances and EBS \u2013CloudWatch \u2022Automatically scales amazon EC2 capacity up and down based on rules \u2013Add and remove compute resource based on demand \u2013Suitable for businesses experiencing variability in usage \u2022Distribute incoming traffic across multiple instances \u2013Elastic Load Balancing","title":"Monitoring, Auto Scaling, and Load Balancing"},{"location":"cc/UnitII_Amazon/#references","text":"(Theory in Practice O'Reilly) George Reese-Cloud Application Architectures_ Building Applications and Infrastructure in the Cloud (Theory in Practice (O'Reilly))-O'Reilly Media (2009) AMAZON EC2 Borko Furht (auth.), Borko Furht, Armando Escalante (eds.)-Handbook of cloud computing-Springer US (2010), Cloud Computing Services Part III http://docs.aws.amazon.com Above the Clouds: A Berkeley View of Cloud Computing - Michael Armbrust et.al 2009 International telecommunication union \u2013 Focus Group Cloud Technical Report Wikipedia aws.amazon.com/big-data aws.amazon.com/compliance aws.amazon.com/datasets aws.amazon.com/grants aws.amazon.com/genomics aws.amazon.com/hpc aws.amazon.com/security","title":"References"},{"location":"cc/UnitII_AmazonCloudFront/","text":"Amazon CloudFront Link Amazon CloudFront, a cloud-based content distribution network (CDN), is a new offering from Amazon Web Services at the time of this writing. It enables you to place your online content at the edges of the network, meaning that content is delivered from a location close to the user requesting it. In other words, a site visitor from Los Angeles can grab the same content from an Amazon server in Los Angeles that a visitor from New York is getting from a server in New York. You place the content in S3 and it gets moved to the edge points of the Amazon network for rapid delivery to content consumers.","title":"Amazon CloudFront"},{"location":"cc/UnitII_AmazonCloudFront/#amazon-cloudfront","text":"Amazon CloudFront, a cloud-based content distribution network (CDN), is a new offering from Amazon Web Services at the time of this writing. It enables you to place your online content at the edges of the network, meaning that content is delivered from a location close to the user requesting it. In other words, a site visitor from Los Angeles can grab the same content from an Amazon server in Los Angeles that a visitor from New York is getting from a server in New York. You place the content in S3 and it gets moved to the edge points of the Amazon network for rapid delivery to content consumers.","title":"Amazon CloudFront"},{"location":"cc/UnitII_AmazonEC2/","text":"Amazon Elastic Cloud Computing EC2 Link Introduction Link Amazon EC2 presents a true virtual computing environment, allowing cli- ents to use a web-based interface to obtain and manage services needed to launch one or more instances of a variety of operating systems (OSs). Cli- ents can load the OS environments with their customized applications. They can manage their network\u2019s access permissions and run as many or as few systems as needed. In order to use Amazon EC2, clients first need to create an Amazon Machine Image (AMI). This image contains the applica- tions, libraries, data, and associated configuration settings used in the virtual computing environment. Amazon EC2 offers the use of preconfigured images built with templates to get up and running immediately. Once users have defined and configured their AMI, they use the Amazon EC2 tools provided for storing the AMI by uploading the AMI into Amazon S3. Ama- zon S3 is a repository that provides safe, reliable, and fast access to a client AMI. Before clients can use the AMI, they must use the Amazon EC2 web service to configure security and network access. Amazon EC2 is the heart of the Amazon cloud. It provides a web services API for provisioning, managing, and deprovisioning virtual servers inside the Amazon cloud. In other words, any application anywhere on the Internet can launch a virtual server in the Amazon cloud with a single web services call. At the time of this, Amazon\u2019s EC2 U.S. footprint spans three data centers on the East Coast of the U.S. and two in Western Europe . You can sign up separately for an Amazon European data center account , but you cannot mix and match U.S. and European environments. The servers in these environments run a highly customized version of the Open Source Xen hyper-visor using para virtualization . This Xen environment enables the dynamic provisioning and deprovisioning of servers, as well as the capabilities necessary to provide isolated computing environment for guest servers. When you want to start up a virtual server in the Amazon environment, you launch a new node based on a predefined Amazon machine image (AMI) . The AMI includes your operating system and any other prebuilt software. Most people start with a standard AMI based on their favorite operating system, customize it, create a new image, and then launch their servers based on their custom images. By itself, EC2 has two kinds of storage: Ephemeral storage tied to the node that expires with the node Block storage that acts like a SAN and persists across time Amazon has provided a popular universal and comprehensive solution to Cloud Computing, called the Amazon Elastic Compute Cloud (EC2) (2010). This solu- tion was released as a limited public beta on August 25, 2006, but grew rapidly in the following years. After Amazon added many important and powerful features to EC2, it dropped the beta label on October 23, 2008. Today EC2 provides complete control over a customer\u2019s computing resources, so new server instances can be set up and booted in minutes, and their capacity can be scaled quickly through a simple web service interface. EC2 provides many useful features for customers, including a mature and inexpensive billing system able to charge for computing at a very fine-grained level (memory usage, CPU usage, data transfer, etc.), deployment between multiple locations,elastic IP addresses,connection to a customer\u2019s existing infrastructure through a Virtual Private Network, monitoring services by Amazon Cloud Watch, and elastic load balancing. EC2 has deployed such fine granularity and precision that it has become a benchmark and model in cloud computing. CaaS Amazon EC2 GoGrid Rackspace (cloud server) Virtualization Xen Xen VMware OS support Linux, Windows Linux, Windows Linux, Windows Server RAM 1.7 GB and going upto 68.4 GB 0.5 GB and going up to 8 GB 256 MB and going up to 16 GB Load Balancer Amazon Elastic Load Balancer Free F5 Load Balancer No Persistent Block Storage Yes Yes Yes Hybrid Hosting No Yes Yes 24/7 Support No Yes Yes Pricing Billed 0.085 \u2013 3.18 per hour (vary for different Instance and Regions). The Data Transfer rates vary based on where the data goes out to and comes in from with pricing between 0.00 to 0.15 per GB transferred. Billed 0.19 per GB of deployed RAM per hour and 60 GB of disk, 0.50 per GB of outbound data transferred, and all inbound data transfer is free. Billed 0.06 per GB of deployed RAM per Hour and 40 GB of disk, 0.05 per GB of inbound data transfer and 0.22 per GB of outbound data transfer. Amazon\u2019s EC2 provides virtual machine based computation environments. It uses the Xen hypervisor (2010) to manage their Amazon Machine Image (AMI) instance. AMI (Amazon EC2, 2010) is \u201can encrypted machine image that contains all information necessary to boot instances of your software\u201d. Using simple web service interfaces, users can launch, run, monitor and terminate their instances. Moreover they can, on the fly, add any of the above mentioned features to their configuration as they desire. Many competitors to Amazon also provide persistent internal storage for nodes to make them operate more like a traditional data center. In addition, servers in EC2\u2014like any other server on the Internet\u2014can access Amazon S3 for cloud-based persistent storage. EC2 servers in particular see both cost savings and greater efficiencies in accessing S3. To secure your network within the cloud, you can control virtual firewall rules that define how traffic can be filtered to your virtual nodes. You define routing rules by creating security groups and associating the rules with those groups. For example, you might create a DMZ group that allows port 80 and port 443 traffic from the public Internet into its servers, but allows no other incoming traffic. Using Amazon EC2 to Run Instances Link During configuration, users choose which instance type(s) and operating system they want to use. Available instance types come in two distinct cate- gories, Standard or High-CPU instances. Most applications are best suited for Standard instances, which come in small, large, and extra-large instance platforms. High-CPU instances have proportionally more CPU resources than random-access memory (RAM) and are well suited for compute-inten- sive applications. With the High-CPU instances, there are medium and extra large platforms to choose from. After determining which instance to use, clients can start, terminate, and monitor as many instances of their AMI as needed by using web service Application Programming Interfaces (APIs) or a wide variety of other management tools that are provided with the service. Users are able to choose whether they want to run in multiple locations, use static IP endpoints, or attach persistent block storage to any of their instances, and they pay only for resources actually consumed. They can also choose from a library of globally available AMIs that provide useful instances. For example, if all that is needed is a basic Linux server, clients can choose one of the standard Linux distribution AMIs. Amazon EC2 Service Characteristics Link There are quite a few characteristics of the EC2 service that provide signifi- cant benefits to an enterprise. First of all, Amazon EC2 provides financial benefits. Because of Amazon\u2019s massive scale and large customer base, it is an inexpensive alternative to many other possible solutions. The costs incurred to set up and run an operation are shared over many customers, making the overall cost to any single customer much lower than almost any other alter- native. Customers pay a very low rate for the compute capacity they actually consume. Security is also provided through Amazon EC2 web service inter- faces. These allow users to configure firewall settings that control network access to and between groups of instances. Amazon EC2 offers a highly reli- able environment where replacement instances can be rapidly provisioned. When one compares this solution to the significant up-front expendi- tures traditionally required to purchase and maintain hardware, either in- house or hosted, the decision to outsource is not hard to make. Outsourced solutions like EC2 free customers from many of the complexities of capacity planning and allow clients to move from large capital investments and fixed costs to smaller, variable, expensed costs. This approach removes the need to overbuy and overbuild capacity to handle periodic traffic spikes. The EC2 service runs within Amazon\u2019s proven, secure, and reliable network infra- structure and data center locations. Dynamic Scalability:Amazon EC2 enables users to increase or decrease capacity in a few min- utes. Users can invoke a single instance, hundreds of instances, or even thousands of instances simultaneously. Of course, because this is all con- trolled with web service APIs, an application can automatically scale itself up or down depending on its needs. This type of dynamic scalability is very attractive to enterprise customers because it allows them to meet their cus- tomers\u2019 demands without having to overbuild their infrastructure. Full Control of Instances: Users have complete control of their instances. They have root access to each instance and can interact with them as one would with any machine. Instances can be rebooted remotely using web service APIs. Users also have access to console output of their instances. Once users have set up their account and uploaded their AMI to the Amazon S3 service, they just need to boot that instance. It is possible to start an AMI on any number of instances (or any type) by calling the RunInstances API that is provided by Amazon. Configuration Flexibility: Configuration settings can vary widely among users. They have the choice of multiple instance types, operating systems, and software packages. Ama- zon EC2 allows them to select a configuration of memory, CPU, and instance storage that is optimal for their choice of operating system and application. For example, a user\u2019s choice of operating systems may also include numerous Linux distributions, Microsoft Windows Server, and even an OpenSolaris environment, all running on virtual servers. Integration with Other Amazon Web Services : Amazon EC2 works in conjunction with a variety of other Amazon web ser- vices. For example, Amazon Simple Storage Service (Amazon S3), Amazon SimpleDB, Amazon Simple Queue Service (Amazon SQS), and Amazon CloudFront are all integrated to provide a complete solution for computing, query processing, and storage across a wide range of applications. Amazon S3 provides a web services interface that allows users to store and retrieve any amount of data from the Internet at any time, anywhere. It gives developers direct access to the same highly scalable, reliable, fast,inexpensive data storage infrastructure Amazon uses to run its own global network of web sites. The S3 service aims to maximize benefits of scale and to pass those benefits on to developers. Amazon SimpleDB is another web-based service, designed for running queries on structured data stored with the Amazon Simple Storage Service (Amazon S3) in real time. This service works in conjunction with the Ama- zon Elastic Compute Cloud (Amazon EC2) to provide users the capability to store, process, and query data sets within the cloud environment. These services are designed to make web-scale computing easier and more cost- effective for developers. Traditionally, this type of functionality was pro- vided using a clustered relational database that requires a sizable investment. Implementations of this nature brought on more complexity and often required the services of a database administer to maintain it. By comparison to traditional approaches, Amazon SimpleDB is easy to use and provides the core functionality of a database (e.g., real-time lookup and simple querying of structured data) without inheriting the operational complexity involved in traditional implementations. Amazon SimpleDB requires no schema, automatically indexes data, and provides a simple API for data storage and access. This eliminates the need for cus- tomers to perform tasks such as data modeling, index maintenance, and performance tuning. Amazon Simple Queue Service (Amazon SQS) is a reliable, scalable, hosted queue for storing messages as they pass between computers. Using Amazon SQS, developers can move data between distributed components of applications that perform different tasks without losing messages or requiring 100% availability for each component. Amazon SQS works by exposing Amazon\u2019s web-scale messaging infrastructure as a service. Any computer connected to the Internet can add or read messages without the need for having any installed software or special firewall configurations. Components of applications using Amazon SQS can run independently and do not need to be on the same network, developed with the same tech- nologies, or running at the same time. Amazon CloudFront is a web service for content delivery. It integrates with other Amazon web services to distribute content to end users with low latency and high data transfer speeds. Amazon CloudFront delivers content using a global network of edge locations. Requests for objects are automat- ically routed to the nearest edge server, so content is delivered with the best possible performance. An edge server receives a request from the user\u2019s computer and makes a connection to another computer called the origin server, where the application resides. When the origin server fulfills the request, it sends the application\u2019s data back to the edge server, which, in turn, forwards the data to the client computer that made the request. Reliable and Resilient Performance Amazon Elastic Block Store (EBS) is yet another Amazon EC2 feature that provides users powerful features to build failure-resilient applications. Amazon EBS offers persistent storage for Amazon EC2 instances. Amazon EBS volumes provide \u201coff-instance\u201d storage that persists independently from the life of any instance. Amazon EBS volumes are highly available, highly reliable data shares that can be attached to a running Amazon EC2 instance and are exposed to the instance as standard block devices. Amazon EBS volumes are automatically replicated on the back end. The service pro- vides users with the ability to create point-in-time snapshots of their data volumes, which are stored using the Amazon S3 service. These snapshots can be used as a starting point for new Amazon EBS volumes and can pro- tect data indefinitely. Support for Use in Geographically Disparate Locations Amazon EC2 provides users with the ability to place one or more instances in multiple locations. Amazon EC2 locations are composed of Regions (such as North America and Europe) and Availability Zones. Regions con- sist of one or more Availability Zones, are geographically dispersed, and are in separate geographic areas or countries. Availability Zones are distinct locations that are engineered to be insulated from failures in other Availabil- ity Zones and provide inexpensive, low-latency network connectivity to other Availability Zones in the same Region. For example, the North America Region may be split into the following Availability Zones: North- east, East, SouthEast, NorthCentral, Central, SouthCentral, NorthWest, West, SouthWest, etc. By launching instances in any one or more of the sep- arate Availability Zones, you can insulate your applications from a single point of failure. Amazon EC2 has a service-level agreement that commits to a 99.95% uptime availability for each Amazon EC2 Region. Amazon EC2 is currently available in two regions, the United States and Europe. Elastic IP Addressing Elastic IP (EIP) addresses are static IP addresses designed for dynamic cloud computing. An Elastic IP address is associated with your account and not with a particular instance, and you control that address until you choose explicitly to release it. Unlike traditional static IP addresses, however, EIP addresses allow you to mask instance or Availability Zone failures by pro- grammatically remapping your public IP addresses to any instance in your account. Rather than waiting on a technician to reconfigure or replace your host, or waiting for DNS to propagate to all of your customers, Amazon EC2 enables you to work around problems that occur with client instances or client software by quickly remapping their EIP address to another run- ning instance. A significant feature of Elastic IP addressing is that each IP address can be reassigned to a different instance when needed. Now, let\u2019s review how the Elastic IPs work with Amazon EC2 services. First of all, Amazon allows users to allocate up to five Elastic IP addresses per account (which is the default). Each EIP can be assigned to a single instance. When this reassignment occurs, it replaces the normal dynamic IP address used by that instance. By default, each instance starts with a dynamic IP address that is allocated upon startup. Since each instance can have only one external IP address, the instance starts out using the default dynamic IP address. If the EIP in use is assigned to a different instance, a new dynamic IP address is allocated to the vacated address of that instance. Assigning or reassigning an IP to an instance requires only a few minutes. The limitation of designating a single IP at a time is due to the way Network Address Translation (NAT) works. Each instance is mapped to an internal IP address and is also assigned an external (public) address. The public address is mapped to the internal address using Network Address Translation tables (hence, NAT). If two external IP addresses hap- pen to be translated to the same internal IP address, all inbound traffic (in the form of data packets) would arrive without any issues. However, assign- ing outgoing packets to an external IP address would be very difficult because a determination of which external IP address to use could not be made. This is why implementors have built in the limitation of having only a single external IP address per instance at any one time. Amazon EC2 Concepts Link AMI & Instance Region & Zones Storage Networking and Security Monitoring Auto Scaling Load Balancer How to access EC2 Link AWS Console \u2013 http://console.aws.amazon.com Command Line Tools Programmatic Interface EC2 APIs AWS SDK AMI and Instance Link An Amazon Machine Image (AMI) provides the information required to launch an instance, which is a virtual server in the cloud. You must specify a source AMI when you launch an instance. You can launch multiple instances from a single AMI when you need multiple instances with the same configuration. You can use different AMIs to launch instances when you need instances with different configurations. An AMI includes the following: A template for the root volume for the instance (for example, an operating system, an application server, and applications) Launch permissions that control which AWS accounts can use the AMI to launch instances A block device mapping that specifies the volumes to attach to the instance when it's launched Amazon Machine Image (AMI) is a template for software configuration (Operating System, Application Server, and Applications) Instance is a AMI running on virtual servers in the cloud Each instance type offers different compute and memory facilities Using an AMI Link The following diagram summarizes the AMI lifecycle. After you create and register an AMI, you can use it to launch new instances. (You can also launch instances from an AMI if the AMI owner grants you launch permissions.) You can copy an AMI within the same region or to different regions. When you no longer require an AMI, you can deregister it. You can search for an AMI that meets the criteria for your instance. You can search for AMIs provided by AWS or AMIs provided by the community. For more information, see AMI Types and Finding a Linux AMI. When you are connected to an instance, you can use it just like you use any other server. For information about launching, connecting, and using your instance, Amazon Linux 2 and Amazon Linux AMI Link Amazon Linux 2 and the Amazon Linux AMI are supported and maintained Linux images provided by AWS. The following are some of the features of Amazon Linux 2 and Amazon Linux AMI: A stable, secure, and high-performance execution environment for applications running on Amazon EC2. Provided at no additional charge to Amazon EC2 users. Repository access to multiple versions of MySQL, PostgreSQL, Python, Ruby, Tomcat, and many more common packages. Updated on a regular basis to include the latest components, and these updates are also made available in the yum repositories for installation on running instances. Includes packages that enable easy integration with AWS services, such as the AWS CLI, Amazon EC2 API and AMI tools, the Boto library for Python, and the Elastic Load Balancing tools. Types of images Link Public: an AMI that can be used by anyone. Paid: a for-pay AMI that is registered with Amazon DevPay and can be used by anyone who subscribes for it. DevPay allows developers to mark-up Amazon's usage fees and optionally add monthly subscription fees. Shared: a private AMI that can only be used by Amazon EC2 users who are allowed access to it by the developer. Region and Zones Link Amazon EC2 is hosted in multiple locations world-wide. These locations are composed of regions and Availability Zones. Each region is a separate geographic area. Each region has multiple, isolated locations known as Availability Zones . Amazon EC2 provides you the ability to place resources, such as instances, and data in multiple locations. Resources aren't replicated across regions unless you do so specifically. Amazon operates state-of-the-art, highly-available data centers. Although rare, failures can occur that affect the availability of instances that are in the same location. If you host all your instances in a single location that is affected by such a failure, none of your instances would be available. Region and Availability Zone Concepts Link Each region is completely independent. Each Availability Zone is isolated, but the Availability Zones in a region are connected through low-latency links. The following diagram illustrates the relationship between regions and Availability Zones. Amazon EC2 resources are either global, tied to a region, or tied to an Availability Zone. For more information, see Resource Locations . Regions Link Each Amazon EC2 region is designed to be completely isolated from the other Amazon EC2 regions. This achieves the greatest possible fault tolerance and stability. When you view your resources, you'll only see the resources tied to the region you've specified. This is because regions are isolated from each other, and we don't replicate resources across regions automatically. When you launch an instance, you must select an AMI that's in the same region. If the AMI is in another region, you can copy the AMI to the region you're using. For more information, see Copying an AMI . Availability Zones Link When you launch an instance, you can select an Availability Zone or let us choose one for you. If you distribute your instances across multiple Availability Zones and one instance fails, you can design your application so that an instance in another Availability Zone can handle requests. You can also use Elastic IP addresses to mask the failure of an instance in one Availability Zone by rapidly remapping the address to an instance in another Availability Zone. For more information, see Elastic IP Addresses . An Availability Zone is represented by a region code followed by a letter identifier; for example, us-east-1a . To ensure that resources are distributed across the Availability Zones for a region, we independently map Availability Zones to names for each AWS account. For example, the Availability Zone us-east-1a for your AWS account might not be the same location as us-east-1a for another AWS account. To coordinate Availability Zones across accounts, you must use the AZ ID , which is a unique and consistent identifier for an Availability Zone. For example, use1-az1 is an AZ ID for the us-east-1 Region and it has the same location in every AWS account. Viewing AZ IDs enables you to determine the location of resources in one account relative to the resources in another account. For example, if you share a subnet in the Availability Zone with the AZ ID use-az2 with another account, this subnet is available to that account in the Availability Zone whose AZ ID is also use-az2 . The AZ ID for each VPC and subnet is displayed in the Amazon VPC console. For more information, see Working with VPC Sharing in the Amazon VPC User Guide . As Availability Zones grow over time, our ability to expand them can become constrained. If this happens, we might restrict you from launching an instance in a constrained Availability Zone unless you already have an instance in that Availability Zone. Eventually, we might also remove the constrained Availability Zone from the list of Availability Zones for new accounts. Therefore, your account might have a different number of available Availability Zones in a region than another account. You can list the Availability Zones that are available to your account. For more information, see Describing Your Regions and Availability Zones . Available Regions Link Your account determines the regions that are available to you. For example: An AWS account provides multiple regions so that you can launch Amazon EC2 instances in locations that meet your requirements. For example, you might want to launch instances in Europe to be closer to your European customers or to meet legal requirements. An AWS GovCloud (US-West) account provides access to the AWS GovCloud (US-West) region only. For more information, see AWS GovCloud (US-West) Region . An Amazon AWS (China) account provides access to the Beijing and Ningxia Regions only. For more information, see AWS in China . The following table lists the regions provided by an AWS account. You can't describe or access additional regions from an AWS account, such as AWS GovCloud (US-West) or the China Regions. Code Name us-east-1 US East (N. Virginia) us-east-2 US East (Ohio) us-west-1 US West (N. California) us-west-2 US West (Oregon) ca-central-1 Canada (Central) eu-central-1 EU (Frankfurt) eu-west-1 EU (Ireland) eu-west-2 EU (London) eu-west-3 EU (Paris) eu-north-1 EU (Stockholm) ap-northeast-1 Asia Pacific (Tokyo) ap-northeast-2 Asia Pacific (Seoul) ap-northeast-3 Asia Pacific (Osaka-Local) ap-southeast-1 Asia Pacific (Singapore) ap-southeast-2 Asia Pacific (Sydney) ap-south-1 Asia Pacific (Mumbai) sa-east-1 South America (S\u00e3o Paulo) For more information, see AWS Global Infrastructure . The number and mapping of Availability Zones per region may vary between AWS accounts. To get a list of the Availability Zones that are available to your account, you can use the Amazon EC2 console or the command line interface. For more information, see Describing Your Regions and Availability Zones . Regions and Endpoints Link When you work with an instance using the command line interface or API actions, you must specify its regional endpoint. For more information about the regions and endpoints for Amazon EC2, see Regions and Endpoints in the Amazon Web Services General Reference . For more information about endpoints and protocols in AWS GovCloud (US-West), see AWS GovCloud (US-West) Endpoints in the AWS GovCloud (US) User Guide . Describing Your Regions and Availability Zones Link You can use the Amazon EC2 console or the command line interface to determine which regions and Availability Zones are available for your account. For more information about these command line interfaces, see Accessing Amazon EC2 . To find your regions and Availability Zones using the console Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . From the navigation bar, view the options in the region selector. On the navigation pane, choose EC2 Dashboard . The Availability Zones are listed under Service Health , Availability Zone Status . To find your regions and Availability Zones using the command line [AWS CLI] Use the describe-regions command as follows to describe the regions for your account. aws ec2 describe-regions [AWS CLI] Use the describe-availability-zones command as follows to describe the Availability Zones within the specified region. aws ec2 describe-availability-zones --region region-name [AWS Tools for Windows PowerShell] Use the Get-EC2Region command as follows to describe the regions for your account. PS C:\\> Get-EC2Region [AWS Tools for Windows PowerShell] Use the Get-EC2AvailabilityZone command as follows to describe the Availability Zones within the specified region. PS C:\\> Get-EC2AvailabilityZone -Region region-name Specifying the Region for a Resource Link Every time you create an Amazon EC2 resource, you can specify the region for the resource. You can specify the region for a resource using the AWS Management Console or the command line. Note Some AWS resources might not be available in all regions and Availability Zones. Ensure that you can create the resources you need in the desired regions or Availability Zone before launching an instance in a specific Availability Zone. To specify the region for a resource using the console Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . Use the region selector in the navigation bar. To specify the default region using the command line You can set the value of an environment variable to the desired regional endpoint (for example, https://ec2.us-east-2.amazonaws.com ): AWS_DEFAULT_REGION (AWS CLI) Set-AWSDefaultRegion (AWS Tools for Windows PowerShell) Alternatively, you can use the --region (AWS CLI) or -Region (AWS Tools for Windows PowerShell) command line option with each individual command. For example, --region us-east-2 . For more information about the endpoints for Amazon EC2, see Amazon Elastic Compute Cloud Endpoints . Launching Instances in an Availability Zone Link When you launch an instance, select a region that puts your instances closer to specific customers, or meets the legal or other requirements you have. By launching your instances in separate Availability Zones, you can protect your applications from the failure of a single location. When you launch an instance, you can optionally specify an Availability Zone in the region that you are using. If you do not specify an Availability Zone, we select one for you. When you launch your initial instances, we recommend that you accept the default Availability Zone, because this enables us to select the best Availability Zone for you based on system health and available capacity. If you launch additional instances, only specify an Availability Zone if your new instances must be close to, or separated from, your running instances. Migrating an Instance to Another Availability Zone Link If you need to, you can migrate an instance from one Availability Zone to another. For example, if you are trying to modify the instance type of your instance and we can't launch an instance of the new instance type in the current Availability Zone, you could migrate the instance to an Availability Zone where we can launch an instance of that instance type. The migration process involves creating an AMI from the original instance, launching an instance in the new Availability Zone, and updating the configuration of the new instance, as shown in the following procedure. To migrate an instance to another Availability Zone Create an AMI from the instance. The procedure depends on the operating system and the type of root device volume for the instance. For more information, see the documentation that corresponds to your operating system and root device volume: Creating an Amazon EBS-Backed Linux AMI Creating an Instance Store-Backed Linux AMI Creating an Amazon EBS-Backed Windows AMI If you need to preserve the private IPv4 address of the instance, you must delete the subnet in the current Availability Zone and then create a subnet in the new Availability Zone with the same IPv4 address range as the original subnet. Note that you must terminate all instances in a subnet before you can delete it. Therefore, you should create AMIs from all the instances in your subnet so that you can move all instances in the current subnet to the new subnet. Launch an instance from the AMI that you just created, specifying the new Availability Zone or subnet. You can use the same instance type as the original instance, or select a new instance type. For more information, see Launching Instances in an Availability Zone . If the original instance has an associated Elastic IP address, associate it with the new instance. For more information, see Disassociating an Elastic IP Address and Reassociating with a Different Instance . If the original instance is a Reserved Instance, change the Availability Zone for your reservation. (If you also changed the instance type, you can also change the instance type for your reservation.) For more information, see Submitting Modification Requests . (Optional) Terminate the original instance. For more information, see Terminating an Instance . Amazon have data centers in different region across the globe An instance can be launched in different regions depending on the need. Closer to specific customer To meet legal or other requirements Each region has set of zones Zones are isolated from failure in other zones Inexpensive, low latency connectivity between zones in same region","title":"Amazon Elastic Cloud Computing EC2"},{"location":"cc/UnitII_AmazonEC2/#amazon-elastic-cloud-computing-ec2","text":"","title":"Amazon Elastic Cloud Computing EC2"},{"location":"cc/UnitII_AmazonEC2/#introduction","text":"Amazon EC2 presents a true virtual computing environment, allowing cli- ents to use a web-based interface to obtain and manage services needed to launch one or more instances of a variety of operating systems (OSs). Cli- ents can load the OS environments with their customized applications. They can manage their network\u2019s access permissions and run as many or as few systems as needed. In order to use Amazon EC2, clients first need to create an Amazon Machine Image (AMI). This image contains the applica- tions, libraries, data, and associated configuration settings used in the virtual computing environment. Amazon EC2 offers the use of preconfigured images built with templates to get up and running immediately. Once users have defined and configured their AMI, they use the Amazon EC2 tools provided for storing the AMI by uploading the AMI into Amazon S3. Ama- zon S3 is a repository that provides safe, reliable, and fast access to a client AMI. Before clients can use the AMI, they must use the Amazon EC2 web service to configure security and network access. Amazon EC2 is the heart of the Amazon cloud. It provides a web services API for provisioning, managing, and deprovisioning virtual servers inside the Amazon cloud. In other words, any application anywhere on the Internet can launch a virtual server in the Amazon cloud with a single web services call. At the time of this, Amazon\u2019s EC2 U.S. footprint spans three data centers on the East Coast of the U.S. and two in Western Europe . You can sign up separately for an Amazon European data center account , but you cannot mix and match U.S. and European environments. The servers in these environments run a highly customized version of the Open Source Xen hyper-visor using para virtualization . This Xen environment enables the dynamic provisioning and deprovisioning of servers, as well as the capabilities necessary to provide isolated computing environment for guest servers. When you want to start up a virtual server in the Amazon environment, you launch a new node based on a predefined Amazon machine image (AMI) . The AMI includes your operating system and any other prebuilt software. Most people start with a standard AMI based on their favorite operating system, customize it, create a new image, and then launch their servers based on their custom images. By itself, EC2 has two kinds of storage: Ephemeral storage tied to the node that expires with the node Block storage that acts like a SAN and persists across time Amazon has provided a popular universal and comprehensive solution to Cloud Computing, called the Amazon Elastic Compute Cloud (EC2) (2010). This solu- tion was released as a limited public beta on August 25, 2006, but grew rapidly in the following years. After Amazon added many important and powerful features to EC2, it dropped the beta label on October 23, 2008. Today EC2 provides complete control over a customer\u2019s computing resources, so new server instances can be set up and booted in minutes, and their capacity can be scaled quickly through a simple web service interface. EC2 provides many useful features for customers, including a mature and inexpensive billing system able to charge for computing at a very fine-grained level (memory usage, CPU usage, data transfer, etc.), deployment between multiple locations,elastic IP addresses,connection to a customer\u2019s existing infrastructure through a Virtual Private Network, monitoring services by Amazon Cloud Watch, and elastic load balancing. EC2 has deployed such fine granularity and precision that it has become a benchmark and model in cloud computing. CaaS Amazon EC2 GoGrid Rackspace (cloud server) Virtualization Xen Xen VMware OS support Linux, Windows Linux, Windows Linux, Windows Server RAM 1.7 GB and going upto 68.4 GB 0.5 GB and going up to 8 GB 256 MB and going up to 16 GB Load Balancer Amazon Elastic Load Balancer Free F5 Load Balancer No Persistent Block Storage Yes Yes Yes Hybrid Hosting No Yes Yes 24/7 Support No Yes Yes Pricing Billed 0.085 \u2013 3.18 per hour (vary for different Instance and Regions). The Data Transfer rates vary based on where the data goes out to and comes in from with pricing between 0.00 to 0.15 per GB transferred. Billed 0.19 per GB of deployed RAM per hour and 60 GB of disk, 0.50 per GB of outbound data transferred, and all inbound data transfer is free. Billed 0.06 per GB of deployed RAM per Hour and 40 GB of disk, 0.05 per GB of inbound data transfer and 0.22 per GB of outbound data transfer. Amazon\u2019s EC2 provides virtual machine based computation environments. It uses the Xen hypervisor (2010) to manage their Amazon Machine Image (AMI) instance. AMI (Amazon EC2, 2010) is \u201can encrypted machine image that contains all information necessary to boot instances of your software\u201d. Using simple web service interfaces, users can launch, run, monitor and terminate their instances. Moreover they can, on the fly, add any of the above mentioned features to their configuration as they desire. Many competitors to Amazon also provide persistent internal storage for nodes to make them operate more like a traditional data center. In addition, servers in EC2\u2014like any other server on the Internet\u2014can access Amazon S3 for cloud-based persistent storage. EC2 servers in particular see both cost savings and greater efficiencies in accessing S3. To secure your network within the cloud, you can control virtual firewall rules that define how traffic can be filtered to your virtual nodes. You define routing rules by creating security groups and associating the rules with those groups. For example, you might create a DMZ group that allows port 80 and port 443 traffic from the public Internet into its servers, but allows no other incoming traffic.","title":"Introduction"},{"location":"cc/UnitII_AmazonEC2/#using-amazon-ec2-to-run-instances","text":"During configuration, users choose which instance type(s) and operating system they want to use. Available instance types come in two distinct cate- gories, Standard or High-CPU instances. Most applications are best suited for Standard instances, which come in small, large, and extra-large instance platforms. High-CPU instances have proportionally more CPU resources than random-access memory (RAM) and are well suited for compute-inten- sive applications. With the High-CPU instances, there are medium and extra large platforms to choose from. After determining which instance to use, clients can start, terminate, and monitor as many instances of their AMI as needed by using web service Application Programming Interfaces (APIs) or a wide variety of other management tools that are provided with the service. Users are able to choose whether they want to run in multiple locations, use static IP endpoints, or attach persistent block storage to any of their instances, and they pay only for resources actually consumed. They can also choose from a library of globally available AMIs that provide useful instances. For example, if all that is needed is a basic Linux server, clients can choose one of the standard Linux distribution AMIs.","title":"Using Amazon EC2 to Run Instances"},{"location":"cc/UnitII_AmazonEC2/#amazon-ec2-service-characteristics","text":"There are quite a few characteristics of the EC2 service that provide signifi- cant benefits to an enterprise. First of all, Amazon EC2 provides financial benefits. Because of Amazon\u2019s massive scale and large customer base, it is an inexpensive alternative to many other possible solutions. The costs incurred to set up and run an operation are shared over many customers, making the overall cost to any single customer much lower than almost any other alter- native. Customers pay a very low rate for the compute capacity they actually consume. Security is also provided through Amazon EC2 web service inter- faces. These allow users to configure firewall settings that control network access to and between groups of instances. Amazon EC2 offers a highly reli- able environment where replacement instances can be rapidly provisioned. When one compares this solution to the significant up-front expendi- tures traditionally required to purchase and maintain hardware, either in- house or hosted, the decision to outsource is not hard to make. Outsourced solutions like EC2 free customers from many of the complexities of capacity planning and allow clients to move from large capital investments and fixed costs to smaller, variable, expensed costs. This approach removes the need to overbuy and overbuild capacity to handle periodic traffic spikes. The EC2 service runs within Amazon\u2019s proven, secure, and reliable network infra- structure and data center locations. Dynamic Scalability:Amazon EC2 enables users to increase or decrease capacity in a few min- utes. Users can invoke a single instance, hundreds of instances, or even thousands of instances simultaneously. Of course, because this is all con- trolled with web service APIs, an application can automatically scale itself up or down depending on its needs. This type of dynamic scalability is very attractive to enterprise customers because it allows them to meet their cus- tomers\u2019 demands without having to overbuild their infrastructure. Full Control of Instances: Users have complete control of their instances. They have root access to each instance and can interact with them as one would with any machine. Instances can be rebooted remotely using web service APIs. Users also have access to console output of their instances. Once users have set up their account and uploaded their AMI to the Amazon S3 service, they just need to boot that instance. It is possible to start an AMI on any number of instances (or any type) by calling the RunInstances API that is provided by Amazon. Configuration Flexibility: Configuration settings can vary widely among users. They have the choice of multiple instance types, operating systems, and software packages. Ama- zon EC2 allows them to select a configuration of memory, CPU, and instance storage that is optimal for their choice of operating system and application. For example, a user\u2019s choice of operating systems may also include numerous Linux distributions, Microsoft Windows Server, and even an OpenSolaris environment, all running on virtual servers. Integration with Other Amazon Web Services : Amazon EC2 works in conjunction with a variety of other Amazon web ser- vices. For example, Amazon Simple Storage Service (Amazon S3), Amazon SimpleDB, Amazon Simple Queue Service (Amazon SQS), and Amazon CloudFront are all integrated to provide a complete solution for computing, query processing, and storage across a wide range of applications. Amazon S3 provides a web services interface that allows users to store and retrieve any amount of data from the Internet at any time, anywhere. It gives developers direct access to the same highly scalable, reliable, fast,inexpensive data storage infrastructure Amazon uses to run its own global network of web sites. The S3 service aims to maximize benefits of scale and to pass those benefits on to developers. Amazon SimpleDB is another web-based service, designed for running queries on structured data stored with the Amazon Simple Storage Service (Amazon S3) in real time. This service works in conjunction with the Ama- zon Elastic Compute Cloud (Amazon EC2) to provide users the capability to store, process, and query data sets within the cloud environment. These services are designed to make web-scale computing easier and more cost- effective for developers. Traditionally, this type of functionality was pro- vided using a clustered relational database that requires a sizable investment. Implementations of this nature brought on more complexity and often required the services of a database administer to maintain it. By comparison to traditional approaches, Amazon SimpleDB is easy to use and provides the core functionality of a database (e.g., real-time lookup and simple querying of structured data) without inheriting the operational complexity involved in traditional implementations. Amazon SimpleDB requires no schema, automatically indexes data, and provides a simple API for data storage and access. This eliminates the need for cus- tomers to perform tasks such as data modeling, index maintenance, and performance tuning. Amazon Simple Queue Service (Amazon SQS) is a reliable, scalable, hosted queue for storing messages as they pass between computers. Using Amazon SQS, developers can move data between distributed components of applications that perform different tasks without losing messages or requiring 100% availability for each component. Amazon SQS works by exposing Amazon\u2019s web-scale messaging infrastructure as a service. Any computer connected to the Internet can add or read messages without the need for having any installed software or special firewall configurations. Components of applications using Amazon SQS can run independently and do not need to be on the same network, developed with the same tech- nologies, or running at the same time. Amazon CloudFront is a web service for content delivery. It integrates with other Amazon web services to distribute content to end users with low latency and high data transfer speeds. Amazon CloudFront delivers content using a global network of edge locations. Requests for objects are automat- ically routed to the nearest edge server, so content is delivered with the best possible performance. An edge server receives a request from the user\u2019s computer and makes a connection to another computer called the origin server, where the application resides. When the origin server fulfills the request, it sends the application\u2019s data back to the edge server, which, in turn, forwards the data to the client computer that made the request. Reliable and Resilient Performance Amazon Elastic Block Store (EBS) is yet another Amazon EC2 feature that provides users powerful features to build failure-resilient applications. Amazon EBS offers persistent storage for Amazon EC2 instances. Amazon EBS volumes provide \u201coff-instance\u201d storage that persists independently from the life of any instance. Amazon EBS volumes are highly available, highly reliable data shares that can be attached to a running Amazon EC2 instance and are exposed to the instance as standard block devices. Amazon EBS volumes are automatically replicated on the back end. The service pro- vides users with the ability to create point-in-time snapshots of their data volumes, which are stored using the Amazon S3 service. These snapshots can be used as a starting point for new Amazon EBS volumes and can pro- tect data indefinitely. Support for Use in Geographically Disparate Locations Amazon EC2 provides users with the ability to place one or more instances in multiple locations. Amazon EC2 locations are composed of Regions (such as North America and Europe) and Availability Zones. Regions con- sist of one or more Availability Zones, are geographically dispersed, and are in separate geographic areas or countries. Availability Zones are distinct locations that are engineered to be insulated from failures in other Availabil- ity Zones and provide inexpensive, low-latency network connectivity to other Availability Zones in the same Region. For example, the North America Region may be split into the following Availability Zones: North- east, East, SouthEast, NorthCentral, Central, SouthCentral, NorthWest, West, SouthWest, etc. By launching instances in any one or more of the sep- arate Availability Zones, you can insulate your applications from a single point of failure. Amazon EC2 has a service-level agreement that commits to a 99.95% uptime availability for each Amazon EC2 Region. Amazon EC2 is currently available in two regions, the United States and Europe. Elastic IP Addressing Elastic IP (EIP) addresses are static IP addresses designed for dynamic cloud computing. An Elastic IP address is associated with your account and not with a particular instance, and you control that address until you choose explicitly to release it. Unlike traditional static IP addresses, however, EIP addresses allow you to mask instance or Availability Zone failures by pro- grammatically remapping your public IP addresses to any instance in your account. Rather than waiting on a technician to reconfigure or replace your host, or waiting for DNS to propagate to all of your customers, Amazon EC2 enables you to work around problems that occur with client instances or client software by quickly remapping their EIP address to another run- ning instance. A significant feature of Elastic IP addressing is that each IP address can be reassigned to a different instance when needed. Now, let\u2019s review how the Elastic IPs work with Amazon EC2 services. First of all, Amazon allows users to allocate up to five Elastic IP addresses per account (which is the default). Each EIP can be assigned to a single instance. When this reassignment occurs, it replaces the normal dynamic IP address used by that instance. By default, each instance starts with a dynamic IP address that is allocated upon startup. Since each instance can have only one external IP address, the instance starts out using the default dynamic IP address. If the EIP in use is assigned to a different instance, a new dynamic IP address is allocated to the vacated address of that instance. Assigning or reassigning an IP to an instance requires only a few minutes. The limitation of designating a single IP at a time is due to the way Network Address Translation (NAT) works. Each instance is mapped to an internal IP address and is also assigned an external (public) address. The public address is mapped to the internal address using Network Address Translation tables (hence, NAT). If two external IP addresses hap- pen to be translated to the same internal IP address, all inbound traffic (in the form of data packets) would arrive without any issues. However, assign- ing outgoing packets to an external IP address would be very difficult because a determination of which external IP address to use could not be made. This is why implementors have built in the limitation of having only a single external IP address per instance at any one time.","title":"Amazon EC2 Service Characteristics"},{"location":"cc/UnitII_AmazonEC2/#amazon-ec2-concepts","text":"AMI & Instance Region & Zones Storage Networking and Security Monitoring Auto Scaling Load Balancer","title":"Amazon EC2 Concepts"},{"location":"cc/UnitII_AmazonEC2/#how-to-access-ec2","text":"AWS Console \u2013 http://console.aws.amazon.com Command Line Tools Programmatic Interface EC2 APIs AWS SDK","title":"How to access EC2"},{"location":"cc/UnitII_AmazonEC2/#ami-and-instance","text":"An Amazon Machine Image (AMI) provides the information required to launch an instance, which is a virtual server in the cloud. You must specify a source AMI when you launch an instance. You can launch multiple instances from a single AMI when you need multiple instances with the same configuration. You can use different AMIs to launch instances when you need instances with different configurations. An AMI includes the following: A template for the root volume for the instance (for example, an operating system, an application server, and applications) Launch permissions that control which AWS accounts can use the AMI to launch instances A block device mapping that specifies the volumes to attach to the instance when it's launched Amazon Machine Image (AMI) is a template for software configuration (Operating System, Application Server, and Applications) Instance is a AMI running on virtual servers in the cloud Each instance type offers different compute and memory facilities","title":"AMI and Instance"},{"location":"cc/UnitII_AmazonEC2/#using-an-ami","text":"The following diagram summarizes the AMI lifecycle. After you create and register an AMI, you can use it to launch new instances. (You can also launch instances from an AMI if the AMI owner grants you launch permissions.) You can copy an AMI within the same region or to different regions. When you no longer require an AMI, you can deregister it. You can search for an AMI that meets the criteria for your instance. You can search for AMIs provided by AWS or AMIs provided by the community. For more information, see AMI Types and Finding a Linux AMI. When you are connected to an instance, you can use it just like you use any other server. For information about launching, connecting, and using your instance,","title":"Using an AMI"},{"location":"cc/UnitII_AmazonEC2/#amazon-linux-2-and-amazon-linux-ami","text":"Amazon Linux 2 and the Amazon Linux AMI are supported and maintained Linux images provided by AWS. The following are some of the features of Amazon Linux 2 and Amazon Linux AMI: A stable, secure, and high-performance execution environment for applications running on Amazon EC2. Provided at no additional charge to Amazon EC2 users. Repository access to multiple versions of MySQL, PostgreSQL, Python, Ruby, Tomcat, and many more common packages. Updated on a regular basis to include the latest components, and these updates are also made available in the yum repositories for installation on running instances. Includes packages that enable easy integration with AWS services, such as the AWS CLI, Amazon EC2 API and AMI tools, the Boto library for Python, and the Elastic Load Balancing tools.","title":"Amazon Linux 2 and Amazon Linux AMI"},{"location":"cc/UnitII_AmazonEC2/#types-of-images","text":"Public: an AMI that can be used by anyone. Paid: a for-pay AMI that is registered with Amazon DevPay and can be used by anyone who subscribes for it. DevPay allows developers to mark-up Amazon's usage fees and optionally add monthly subscription fees. Shared: a private AMI that can only be used by Amazon EC2 users who are allowed access to it by the developer.","title":"Types of images"},{"location":"cc/UnitII_AmazonEC2/#region-and-zones","text":"Amazon EC2 is hosted in multiple locations world-wide. These locations are composed of regions and Availability Zones. Each region is a separate geographic area. Each region has multiple, isolated locations known as Availability Zones . Amazon EC2 provides you the ability to place resources, such as instances, and data in multiple locations. Resources aren't replicated across regions unless you do so specifically. Amazon operates state-of-the-art, highly-available data centers. Although rare, failures can occur that affect the availability of instances that are in the same location. If you host all your instances in a single location that is affected by such a failure, none of your instances would be available.","title":"Region and Zones"},{"location":"cc/UnitII_AmazonEC2/#region-and-availability-zone-concepts","text":"Each region is completely independent. Each Availability Zone is isolated, but the Availability Zones in a region are connected through low-latency links. The following diagram illustrates the relationship between regions and Availability Zones. Amazon EC2 resources are either global, tied to a region, or tied to an Availability Zone. For more information, see Resource Locations .","title":"Region and Availability Zone Concepts"},{"location":"cc/UnitII_AmazonEC2/#regions","text":"Each Amazon EC2 region is designed to be completely isolated from the other Amazon EC2 regions. This achieves the greatest possible fault tolerance and stability. When you view your resources, you'll only see the resources tied to the region you've specified. This is because regions are isolated from each other, and we don't replicate resources across regions automatically. When you launch an instance, you must select an AMI that's in the same region. If the AMI is in another region, you can copy the AMI to the region you're using. For more information, see Copying an AMI .","title":"Regions"},{"location":"cc/UnitII_AmazonEC2/#availability-zones","text":"When you launch an instance, you can select an Availability Zone or let us choose one for you. If you distribute your instances across multiple Availability Zones and one instance fails, you can design your application so that an instance in another Availability Zone can handle requests. You can also use Elastic IP addresses to mask the failure of an instance in one Availability Zone by rapidly remapping the address to an instance in another Availability Zone. For more information, see Elastic IP Addresses . An Availability Zone is represented by a region code followed by a letter identifier; for example, us-east-1a . To ensure that resources are distributed across the Availability Zones for a region, we independently map Availability Zones to names for each AWS account. For example, the Availability Zone us-east-1a for your AWS account might not be the same location as us-east-1a for another AWS account. To coordinate Availability Zones across accounts, you must use the AZ ID , which is a unique and consistent identifier for an Availability Zone. For example, use1-az1 is an AZ ID for the us-east-1 Region and it has the same location in every AWS account. Viewing AZ IDs enables you to determine the location of resources in one account relative to the resources in another account. For example, if you share a subnet in the Availability Zone with the AZ ID use-az2 with another account, this subnet is available to that account in the Availability Zone whose AZ ID is also use-az2 . The AZ ID for each VPC and subnet is displayed in the Amazon VPC console. For more information, see Working with VPC Sharing in the Amazon VPC User Guide . As Availability Zones grow over time, our ability to expand them can become constrained. If this happens, we might restrict you from launching an instance in a constrained Availability Zone unless you already have an instance in that Availability Zone. Eventually, we might also remove the constrained Availability Zone from the list of Availability Zones for new accounts. Therefore, your account might have a different number of available Availability Zones in a region than another account. You can list the Availability Zones that are available to your account. For more information, see Describing Your Regions and Availability Zones .","title":"Availability Zones"},{"location":"cc/UnitII_AmazonEC2/#available-regions","text":"Your account determines the regions that are available to you. For example: An AWS account provides multiple regions so that you can launch Amazon EC2 instances in locations that meet your requirements. For example, you might want to launch instances in Europe to be closer to your European customers or to meet legal requirements. An AWS GovCloud (US-West) account provides access to the AWS GovCloud (US-West) region only. For more information, see AWS GovCloud (US-West) Region . An Amazon AWS (China) account provides access to the Beijing and Ningxia Regions only. For more information, see AWS in China . The following table lists the regions provided by an AWS account. You can't describe or access additional regions from an AWS account, such as AWS GovCloud (US-West) or the China Regions. Code Name us-east-1 US East (N. Virginia) us-east-2 US East (Ohio) us-west-1 US West (N. California) us-west-2 US West (Oregon) ca-central-1 Canada (Central) eu-central-1 EU (Frankfurt) eu-west-1 EU (Ireland) eu-west-2 EU (London) eu-west-3 EU (Paris) eu-north-1 EU (Stockholm) ap-northeast-1 Asia Pacific (Tokyo) ap-northeast-2 Asia Pacific (Seoul) ap-northeast-3 Asia Pacific (Osaka-Local) ap-southeast-1 Asia Pacific (Singapore) ap-southeast-2 Asia Pacific (Sydney) ap-south-1 Asia Pacific (Mumbai) sa-east-1 South America (S\u00e3o Paulo) For more information, see AWS Global Infrastructure . The number and mapping of Availability Zones per region may vary between AWS accounts. To get a list of the Availability Zones that are available to your account, you can use the Amazon EC2 console or the command line interface. For more information, see Describing Your Regions and Availability Zones .","title":"Available Regions"},{"location":"cc/UnitII_AmazonEC2/#regions-and-endpoints","text":"When you work with an instance using the command line interface or API actions, you must specify its regional endpoint. For more information about the regions and endpoints for Amazon EC2, see Regions and Endpoints in the Amazon Web Services General Reference . For more information about endpoints and protocols in AWS GovCloud (US-West), see AWS GovCloud (US-West) Endpoints in the AWS GovCloud (US) User Guide .","title":"Regions and Endpoints"},{"location":"cc/UnitII_AmazonEC2/#describing-your-regions-and-availability-zones","text":"You can use the Amazon EC2 console or the command line interface to determine which regions and Availability Zones are available for your account. For more information about these command line interfaces, see Accessing Amazon EC2 . To find your regions and Availability Zones using the console Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . From the navigation bar, view the options in the region selector. On the navigation pane, choose EC2 Dashboard . The Availability Zones are listed under Service Health , Availability Zone Status . To find your regions and Availability Zones using the command line [AWS CLI] Use the describe-regions command as follows to describe the regions for your account. aws ec2 describe-regions [AWS CLI] Use the describe-availability-zones command as follows to describe the Availability Zones within the specified region. aws ec2 describe-availability-zones --region region-name [AWS Tools for Windows PowerShell] Use the Get-EC2Region command as follows to describe the regions for your account. PS C:\\> Get-EC2Region [AWS Tools for Windows PowerShell] Use the Get-EC2AvailabilityZone command as follows to describe the Availability Zones within the specified region. PS C:\\> Get-EC2AvailabilityZone -Region region-name","title":"Describing Your Regions and Availability Zones"},{"location":"cc/UnitII_AmazonEC2/#specifying-the-region-for-a-resource","text":"Every time you create an Amazon EC2 resource, you can specify the region for the resource. You can specify the region for a resource using the AWS Management Console or the command line. Note Some AWS resources might not be available in all regions and Availability Zones. Ensure that you can create the resources you need in the desired regions or Availability Zone before launching an instance in a specific Availability Zone. To specify the region for a resource using the console Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . Use the region selector in the navigation bar. To specify the default region using the command line You can set the value of an environment variable to the desired regional endpoint (for example, https://ec2.us-east-2.amazonaws.com ): AWS_DEFAULT_REGION (AWS CLI) Set-AWSDefaultRegion (AWS Tools for Windows PowerShell) Alternatively, you can use the --region (AWS CLI) or -Region (AWS Tools for Windows PowerShell) command line option with each individual command. For example, --region us-east-2 . For more information about the endpoints for Amazon EC2, see Amazon Elastic Compute Cloud Endpoints .","title":"Specifying the Region for a Resource"},{"location":"cc/UnitII_AmazonEC2/#launching-instances-in-an-availability-zone","text":"When you launch an instance, select a region that puts your instances closer to specific customers, or meets the legal or other requirements you have. By launching your instances in separate Availability Zones, you can protect your applications from the failure of a single location. When you launch an instance, you can optionally specify an Availability Zone in the region that you are using. If you do not specify an Availability Zone, we select one for you. When you launch your initial instances, we recommend that you accept the default Availability Zone, because this enables us to select the best Availability Zone for you based on system health and available capacity. If you launch additional instances, only specify an Availability Zone if your new instances must be close to, or separated from, your running instances.","title":"Launching Instances in an Availability Zone"},{"location":"cc/UnitII_AmazonEC2/#migrating-an-instance-to-another-availability-zone","text":"If you need to, you can migrate an instance from one Availability Zone to another. For example, if you are trying to modify the instance type of your instance and we can't launch an instance of the new instance type in the current Availability Zone, you could migrate the instance to an Availability Zone where we can launch an instance of that instance type. The migration process involves creating an AMI from the original instance, launching an instance in the new Availability Zone, and updating the configuration of the new instance, as shown in the following procedure. To migrate an instance to another Availability Zone Create an AMI from the instance. The procedure depends on the operating system and the type of root device volume for the instance. For more information, see the documentation that corresponds to your operating system and root device volume: Creating an Amazon EBS-Backed Linux AMI Creating an Instance Store-Backed Linux AMI Creating an Amazon EBS-Backed Windows AMI If you need to preserve the private IPv4 address of the instance, you must delete the subnet in the current Availability Zone and then create a subnet in the new Availability Zone with the same IPv4 address range as the original subnet. Note that you must terminate all instances in a subnet before you can delete it. Therefore, you should create AMIs from all the instances in your subnet so that you can move all instances in the current subnet to the new subnet. Launch an instance from the AMI that you just created, specifying the new Availability Zone or subnet. You can use the same instance type as the original instance, or select a new instance type. For more information, see Launching Instances in an Availability Zone . If the original instance has an associated Elastic IP address, associate it with the new instance. For more information, see Disassociating an Elastic IP Address and Reassociating with a Different Instance . If the original instance is a Reserved Instance, change the Availability Zone for your reservation. (If you also changed the instance type, you can also change the instance type for your reservation.) For more information, see Submitting Modification Requests . (Optional) Terminate the original instance. For more information, see Terminating an Instance . Amazon have data centers in different region across the globe An instance can be launched in different regions depending on the need. Closer to specific customer To meet legal or other requirements Each region has set of zones Zones are isolated from failure in other zones Inexpensive, low latency connectivity between zones in same region","title":"Migrating an Instance to Another Availability Zone"},{"location":"cc/UnitII_AmazonEMR/","text":"Amazon EMR Link Introductions Link Amazon EMR is a web service that makes it easy to quickly and cost-effectively process vast amounts of data using Hadoop. Amazon EMR distribute the data and processing across a resizable cluster of Amazon EC2 instances. With Amazon EMR you can launch a persistent cluster that stays up indefinitely or a temporary cluster that terminates after the analysis is complete. Amazon EMR supports a variety of Amazon EC2 instance types and Amazon EC2 pricing options (On-Demand, Reserved, and Spot). When launching an Amazon EMR cluster (also called a \"job flow\"), you choose how many and what type of Amazon EC2 Instances to provision. The Amazon EMR price is in addition to the Amazon EC2 price. Amazon EMR is used in a variety of applications, including log analysis, web indexing, data warehousing, machine learning, financial analysis, scientific simulation, and bioinformatics. Amazon EMR is a managed cluster platform that simplifies running big data frameworks, such as Apache Hadoop and Apache Spark, on AWS to process and analyze vast amounts of data. By using these frameworks and related open-source projects, such as Apache Hive and Apache Pig, you can process data for analytics purposes and business intelligence workloads. Additionally, you can use Amazon EMR to transform and move large amounts of data into and out of other AWS data stores and databases, such as Amazon Simple Storage Service (Amazon S3) and Amazon DynamoDB. If you are a first-time user of Amazon EMR, we recommend that you begin by reading the following, in addition to this section: Amazon EMR \u2013 This service page provides the Amazon EMR highlights, product details, and pricing information. Getting Started: Analyzing Big Data with Amazon EMR \u2013 These tutorials get you started using Amazon EMR quickly. Benefits of Amazon EMR Link Simplifies Big Data Processing on a Managed Hadoop Framework Low Cost: Pay an hourly rate for every instance hour you use Elastic: Easily add or remove capacity Easy to use: Launch a cluster in minutes Reliable: Spend less time tuning and monitoring your cluster Secure: Managed firewall settings Flexible: You control every cluster","title":"Amazon EMR"},{"location":"cc/UnitII_AmazonEMR/#amazon-emr","text":"","title":"Amazon EMR"},{"location":"cc/UnitII_AmazonEMR/#introductions","text":"Amazon EMR is a web service that makes it easy to quickly and cost-effectively process vast amounts of data using Hadoop. Amazon EMR distribute the data and processing across a resizable cluster of Amazon EC2 instances. With Amazon EMR you can launch a persistent cluster that stays up indefinitely or a temporary cluster that terminates after the analysis is complete. Amazon EMR supports a variety of Amazon EC2 instance types and Amazon EC2 pricing options (On-Demand, Reserved, and Spot). When launching an Amazon EMR cluster (also called a \"job flow\"), you choose how many and what type of Amazon EC2 Instances to provision. The Amazon EMR price is in addition to the Amazon EC2 price. Amazon EMR is used in a variety of applications, including log analysis, web indexing, data warehousing, machine learning, financial analysis, scientific simulation, and bioinformatics. Amazon EMR is a managed cluster platform that simplifies running big data frameworks, such as Apache Hadoop and Apache Spark, on AWS to process and analyze vast amounts of data. By using these frameworks and related open-source projects, such as Apache Hive and Apache Pig, you can process data for analytics purposes and business intelligence workloads. Additionally, you can use Amazon EMR to transform and move large amounts of data into and out of other AWS data stores and databases, such as Amazon Simple Storage Service (Amazon S3) and Amazon DynamoDB. If you are a first-time user of Amazon EMR, we recommend that you begin by reading the following, in addition to this section: Amazon EMR \u2013 This service page provides the Amazon EMR highlights, product details, and pricing information. Getting Started: Analyzing Big Data with Amazon EMR \u2013 These tutorials get you started using Amazon EMR quickly.","title":"Introductions"},{"location":"cc/UnitII_AmazonEMR/#benefits-of-amazon-emr","text":"Simplifies Big Data Processing on a Managed Hadoop Framework Low Cost: Pay an hourly rate for every instance hour you use Elastic: Easily add or remove capacity Easy to use: Launch a cluster in minutes Reliable: Spend less time tuning and monitoring your cluster Secure: Managed firewall settings Flexible: You control every cluster","title":"Benefits of Amazon EMR"},{"location":"cc/UnitII_AmazonS3/","text":"Amazon Simple Storage Service (S3) Link Introduction Link What is AWS S3 ? Link Amazon Simple Storage Service (S3) is a storage for the internet. It is designed for large-capacity, low-cost storage provision across multiple geographical regions. Amazon S3 provides developers and IT teams with Secure , Durable and Highly Scalable object storage. S3 is Secure because AWS provides: Encryption to the data that you store. It can happen in two ways: Client Side Encryption Server Side Encryption Multiple copies are maintained to enable regeneration of data in case of data corruption Versioning, wherein each edit is archived for a potential retrieval. S3 is Durable because: It regularly verifies the integrity of data stored using checksums e.g. if S3 detects there is any corruption in data, it is immediately repaired with the help of replicated data. Even while storing or retrieving data, it checks incoming network traffic for any corrupted data packets. S3 is Highly Scalable , since it automatically scales your storage according to your requirement and you only pay for the storage you use. What kind and how much of data one can store in AWS S3? You can store virtually any kind of data, in any format, in S3 and when we talk about capacity, the volume and the number of objects that we can store in S3 are unlimited. An object is the fundamental entity in S3. It consists of data, key and metadata. When we talk about data, it can be of two types- Data which is to be accessed frequently. Data which is accessed not that frequently. Therefore, Amazon came up with 3 storage classes to provide its customers the best experience and at an affordable cost. Amazon Simple Storage Service (Amazon S3) is storage for the Internet. You can use Amazon S3 to store and retrieve any amount of data at any time, from anywhere on the web. You can accomplish these tasks using the AWS Management Console, which is a simple and intuitive web interface. Amazon S3 is cloud-based data storage accessible in real time via a web services API from anywhere on the Internet. Using this API, you can store any number of objects\u2014ranging in size from 1 byte to 5 GB\u2014in a fairly flat namespace. It is very important not to think of Amazon S3 as a filesystem. There are many people get in trouble when they expect it to act that way. First of all, it has a two-level namespace. At the first level, you have buckets. You can think of these buckets as directories, if you like, as they store the data you put in S3. Unlike traditional directories, however, you cannot organize them hierarchically\u2014you cannot put buckets in buckets. Perhaps more significant is the fact that the bucket namespace is shared across all Amazon customers. You need to take special care in designing bucket names that will not clash with other buckets. In other words, you won\u2019t be creating a bucket called \u201cDocuments\u201d. Another important thing to keep in mind is that Amazon S3 is relatively slow. Actually, it is very fast for an Internet-deployed service, but if you are expecting it to respond like a local disk or a SAN, you will be very disappointed. Therefore, it is not feasible to use Amazon S3 as an operational storage medium. Finally, access to S3 is via web services, not a filesystem or WebDAV. As a result, applications must be written specifically to store data in Amazon S3. Perhaps more to the point, you can\u2019t simply rsync a directory with S3 without specially crafted tools that use the Amazon API and skirt the S3 limitations. Amazon S3 is not\u2014so what is it? Amazon S3 enables you to place persistent data into the cloud and retrieve it at a later date with a near certainty that it will be there in one consistent piece when you get it back. Its key benefit is that you can simply continue to shove data into Amazon S3 and never worry about running out of storage space. In short, for most users, S3 serves as a short-term or long-term backup facility. Apache Hadoop (2010) uses S3 to store computation data, and online synchronization utilities such as Dropbox (2010) and Ubuntu One (2010) use S3 as their storage and transfer facility. The Amazon Simple Storage Service (2010) (S3) is an online storage web service offered by Amazon Web Services. S3 is accessible to users through web services, REST-style HTTP interfaces, 1 or by involving a SOAP interface. Like other cloud computing services, users can request small or large amounts of storage on the fly, providing a highly scalable storage system. Amazon S3 organizes the storage space into many \u201cbuckets\u201d, with each bucket being given a global unique namespace to help locate data addresses, identify the user account for payments, and gathering usage information (ASSSDG, 2010). S3 deals with all type of data as objects and stores them with their metadata into the bucket chosen by the data owner. An object can be accessed through a URL composed of its key and version ID with its bucket namespace as the prefix. Amazon S3\u2019s users are spread across countless fields, for example, SmugMug (2010), Slideshare (2010) and Twitter (2010) use Amazon S3 to host images. This guide introduces you to Amazon S3 and how to use the AWS Management Console to complete the tasks shown in the following figure. Amazon S3 Features Link Low cost and Easy to Use \u2212 Using Amazon S3, the user can store a large amount of data at very low charges. Secure \u2212 Amazon S3 supports data transfer over SSL and the data gets encrypted automatically once it is uploaded. The user has complete control over their data by configuring bucket policies using AWS IAM. Scalable \u2212 Using Amazon S3, there need not be any worry about storage concerns. We can store as much data as we have and access it anytime. Higher performance \u2212 Amazon S3 is integrated with Amazon CloudFront, that distributes content to the end users with low latency and provides high data transfer speeds without any minimum usage commitments. Integrated with AWS services \u2212 Amazon S3 integrated with AWS services include Amazon CloudFront, Amazon CLoudWatch, Amazon Kinesis, Amazon RDS, Amazon Route 53, Amazon VPC, AWS Lambda, Amazon EBS, Amazon Dynamo DB, etc. Concepts of Amazon S3 Link To get the most out of Amazon S3, you need to understand a few simple concepts. Amazon S3 stores data as objects within buckets. An object consists of a file and optionally any metadata that describes that file. To store an object in Amazon S3, you upload the file you want to store to a bucket. When you upload a file, you can set permissions on the object as well as any metadata. Buckets are the containers for objects. You can have one or more buckets. For each bucket, you can control access to it (who can create, delete, and list objects in the bucket), view access logs for it and its objects, and choose the geographical region where Amazon S3 will store the bucket and its contents Sign Up for Amazon S3 Link To use Amazon S3, you need an AWS account. If you don't already have one, you'll be prompted to create one when you sign up for Amazon S3. You will not be charged for Amazon S3 until you use it. For information on Amazon S3 features, pricing, and to see the FAQ, go to the Amazon S3 product page. To sign up for Amazon S3 Go to https://aws.amazon.com/s3/ and choose Get started with Amazon S3. Follow the on-screen instructions. AWS will notify you by email when your account is active and available for you to use. Create a Bucket Link Now that you've signed up for Amazon S3, you're ready to create a bucket using the AWS Management Console. Every object in Amazon S3 is stored in a bucket. Before you can store data in Amazon S3, you must create a bucket. Note You are not charged for creating a bucket; you are charged only for storing objects in the bucket and for transferring objects in and out of the bucket. The charges you will incur through following the examples in this guide are minimal (less than $1). For more information about storage charges, see Amazon S3 Pricing. Create S3 bucket Link Sign in to the AWS Management Console and open the Amazon S3 console at https:// console.aws.amazon.com/s3/. Choose Create bucket. In the Bucket name field, type a unique DNS-compliant name for your new bucket. (The example screen shot uses the bucket name admin-created. You cannot use this name because S3 bucket names must be unique.) Create your own bucket name using the follow naming guidelines: The name must be unique across all existing bucket names in Amazon S3. After you create the bucket you cannot change the name, so choose wisely. Choose a bucket name that reflects the objects in the bucket because the bucket name is visible in the URL that points to the objects that you're going to put in your bucket. For information about naming buckets, see Rules for Bucket Naming in the Amazon Simple Storage Service Developer Guide. For Region, choose US West (Oregon) as the region where you want the bucket to reside. Choose Create. You've created a bucket in Amazon S3. Add an Object to a Bucket Link Now that you've created a bucket, you're ready to add an object to it. An object can be any kind of file: a text file, a photo, a video, and so on. To upload an object to a bucket In the Bucket name list, choose the name of the bucket that you want to upload your object to. Choose Upload. Or you can choose Get started. In the Upload dialog box, choose Add files to choose the file to upload. Choose a file to upload, and then choose Open. Choose Upload. View an Object Link Now that you've added an object to a bucket, you can view information about your object and download the object to your local computer. To download an object from a bucket In the Bucket name list, choose the name of the bucket that you created. In the Name list, select the check box next to the object that you uploaded, and then choose Download on the object overview panel. ### Move an Object So far you've added an object to a bucket and downloaded the object. Now we create a folder and move the object into the folder by copying and pasting the object. To copy an object In the Bucket name list, choose the name of the bucket that you created. Choose Create Folder, type favorite-pics for the folder name, choose None for the encryption setting for the folder object and then choose Save. In the Name list, select the check box next to the object that you want to copy, choose More, and then choose Copy. In the Name list, choose the name of the folder favorite-pics. Choose More, and then choose Paste. Choose Paste. Delete an Object and Bucket Link If you no longer need to store the object that you uploaded and made a copy of while going through this guide, you should delete the objects to prevent further charges. You can delete the objects individually. Or you can empty a bucket, which deletes all the objects in the bucket without deleting the bucket. You can also delete a bucket and all the objects contained in the bucket. However, if you want to continue to use the same bucket name, don't delete the bucket. We recommend that you empty the bucket and keep it. After a bucket is deleted, the name becomes available to reuse, but the name might not be available for you to reuse for various reasons. For example, it might take some time before the name can be reused and some other account could create a bucket with that name before you do. To delete an object from a bucket In the Bucket name list, choose the name of the bucket that you want to delete an object from. In the Name list, select the check box next to the object that you want to delete, choose More, and then choose Delete. In the Delete objects dialog box, verify that the name of the object you selected for deletion is listed, and then choose Delete. You can empty a bucket, which deletes all the objects in the bucket without deleting the bucket. To empty a bucket In the Bucket name list, choose the bucket icon next to the name of the bucket that you want to empty and then choose Empty bucket. In the Empty bucket dialog box, type the name of the bucket for confirmation and then choose Confirm. You can delete a bucket and all the objects contained in the bucket. To delete a bucket In the Bucket name list, choose the bucket icon next to the name of the bucket that you want to delete and then choose Delete bucket In the Delete bucket dialog box, type the name of the bucket for delete confirmation and then choose Confirm. Case Study Link Let\u2019s understand the 3 storage classes with a \u201chealth-care\u201d use case: Amazon S3 Standard for frequent data access. This is suitable for performance sensitive use cases where the latency should be kept low. e.g. in a hospital, frequently accessed data will be the data of admitted patients, which should be retrieved quickly. **Amazon S3 Standard* for infrequent data access: **This is suitable for use cases where the data is long lived and less frequently accessed, i.e for data archival but still expects high performance. e.g. in the same hospital, people who have been discharged, their records/data will not be needed on a daily basis, but if they return with any complication, their discharge summary should be retrieved quickly. Amazon Glacier Suitable for use cases where the data is to be archived, and high performance is not required, it has a lower cost than the other two services.e.g. in the hospital, patients\u2019 test reports, prescriptions, MRI, X Ray, Scan docs etc. that are older than a year will not be needed in the daily run and even if it is required, lower latency is not needed. Specification Snapshot: Storage Classes CLEVER SAFE STORAGE Link Cloud storage systems have unique challenges that legacy storage technologies cannot address. Storage technologies based on RAID and replication are not well suited for cloud infrastructures because they don\u2019t scale easily to the exabyte level. Legacy storage technologies rely on redundant copies to increase reliability, resulting in systems that are not easily manageable, chew up bandwidth, and are not cost effective. Cleversafe\u2019s unique cloud storage platform\u2014based on company technology trademarked under the name Dispersed Storage\u2014divides data into slices and stores them in different geographic locations on hardware appliances. The algorithms used to divide the data are comparable to the concept of parity\u2014but with much more sophistication\u2014because they allow the total data to be reconstituted from a subset. For instance, you may store the data in 12 locations, any 8 of which are enough to restore it completely. This technology, known as information dispersal, achieves geographic redundancy and high availability without expensive replication of the data. In April 2008, Cleversafe embodied its dispersal technology in hardware appliances that provide a front-end to the user using standard protocols such as REST APIs or iSCSI. The appliances take on the task of splitting and routing the data to storage sites, and merely increase the original file size by 1.3 to 1.6 times, versus 3 times in a replicated system. Companies are using Cleversafe\u2019s Dispersed Storage appliances to build public and private cloud storage as a backend infrastructure to Software as a Service. Dispersed Storage easily fulfills the characteristics of a cloud infrastructure since it provides storage on demand and accessibility anywhere. Dispersal also achieves higher levels of security within the cloud without necessarily needing encryption, because each slice contains too little information to be useful. This unique architecture helps people satisfy their concern over their data being outside of their immediate control, which often becomes a barrier to storage decisions. While a lost backup tape contains a full copy of data, access to a single appliance using Dispersed Storage results in no data breach. Additionally, Dispersed Storage is massively scalable and designed to handle petabytes of data. By adding servers into the storage cloud with automated storage discovery, the total storage of the system can easily grow, and performance can be scaled by simply adding additional appliances. Virtualization tools enable easy deployment and on-demand provisioning. All of these capabilities streamline efforts for storage administrators. Dispersed Storage is also designed to store and distribute large objects, the cornerstone of our media-intensive society that has become dependent on videos and images in every aspect of life. Dispersal is inherently designed for content distribution by naturally incorporating load balancing through the multitude of access choices for selecting the slices used to reconstruct the original file. This means companies do not have to deal with or pay for implementing a separate content delivery network for their stored data. Dispersed Storage offers a novel and needed approach to cloud storage, and will be significant as cloud storage matures and displaces traditional storage methods. Amazon Web Services - Elastic Block Store(EBS) Link Amazon Elastic Block Store (EBS) is a block storage system used to store persistent data. Amazon EBS is suitable for EC2 instances by providing highly available block level storage volumes. It has three types of volume, i.e. General Purpose (SSD), Provisioned IOPS (SSD), and Magnetic. These three volume types differ in performance, characteristics, and cost. EBS Volume Types Link Following are the three types. EBS General Purpose (SSD) Link This volume type is suitable for small and medium workloads like Root disk EC2 volumes, small and medium database workloads, frequently logs accessing workloads, etc. By default, SSD supports 3 IOPS (Input Output Operations per Second)/GB means 1 GB volume will give 3 IOPS, and 10 GB volume will give 30 IOPS. Its storage capacity of one volume ranges from 1 GB to 1 TB. The cost of one volume is $0.10 per GB for one month. Provisioned IOPS (SSD) Link This volume type is suitable for the most demanding I/O intensive, transactional workloads and large relational, EMR and Hadoop workloads, etc. By default, IOPS SSD supports 30 IOPS/GB means 10GB volume will give 300 IOPS. Its storage capacity of one volume ranges from 10GB to 1TB. The cost of one volume is $0.125 per GB for one month for provisioned storage and $0.10 per provisioned IOPS for one month. EBS Magnetic Volumes Link It was formerly known as standard volumes. This volume type is suitable for ideal workloads like infrequently accessing data, i.e. data backups for recovery, logs storage, etc. Its storage capacity of one volume ranges from 10GB to 1TB. The cost of one volume is $0.05 per GB for one month for provisioned storage and $0. 05 per million I/O requests. Volumes Attached to One Instance Link Each account will be limited to 20 EBS volumes. For a requirement of more than 20 EBS volumes, contact Amazon\u2019s Support team. We can attach up to 20 volumes on a single instance and each volume ranges from 1GB to 1TB in size. In EC2 instances, we store data in local storage which is available till the instance is running. However, when we shut down the instance, the data gets lost. Thus, when we need to save anything, it is advised to save it on Amazon EBS, as we can access and read the EBS volumes anytime, once we attach the file to an EC2 instance. Amazon EBS Benefits Link Reliable and secure storage \u2212 Each of the EBS volume will automatically respond to its Availability Zone to protect from component failure. Secure \u2212 Amazon\u2019s flexible access control policies allows to specify who can access which EBS volumes. Access control plus encryption offers a strong defense-in-depth security strategy for data. Higher performance \u2212 Amazon EBS uses SSD technology to deliver data results with consistent I/O performance of application. Easy data backup \u2212 Data backup can be saved by taking point-in-time snapshots of Amazon EBS volumes. How to Set Up Amazon EBS? Link Step 1 \u2212 Create Amazon EBS volume using the following steps. Open the Amazon EC2 console. Select the region in the navigation bar where the volume is to be created. In the navigation pane, select Volumes, then select Create Volume. Provide the required information like Volume Type list, Size, IOPS, Availability zone, etc. then click the Create button. The volume names can be seen in the volumes list. Step 2 \u2212 Store EBS Volume from a snapshot using the following steps. Repeat the above 1 to 4 steps to create volume. Type snapshot ID in the Snapshot ID field from which the volume is to be restored and select it from the list of suggested options. If there is requirement for more storage, change the storage size in the Size field. Select the Yes Create button. Step 3 \u2212 Attach EBS Volume to an Instance using the following steps. Open the Amazon EC2 console. Select Volumes in the navigation pane. Choose a volume and click the Attach Volume option. An Attach Volume dialog box will open. Enter the name/ID of instance to attach the volume in the Instance field or select it from the list of suggestion options. Click the Attach button. Connect to instance and make the volume available. Step 4 \u2212 Detach a volume from Instance. First, use the command /dev/sdh in cmd to unmount the device. Open the Amazon EC2 console. In the navigation pane, select the Volumes option. Choose a volume and click the Detach Volumes option. A confirmation dialog box opens. Click the Yes, Detach button to confirm. Amazon Web Services - Storage Gateway Link AWS Storage Gateway provides integration between the on-premises IT environment and the AWS storage infrastructure. The user can store data in the AWS cloud for scalable, data security features and cost-efficient storage. AWS Gateway offers two types of storage, i.e. volume based and tape based. Volume Gateways Link This storage type provides cloud-backed storage volumes which can be mount as Internet Small Computer System Interface (iSCSI) devices from on-premises application servers. Gateway-cached Volumes Link AWS Storage Gateway stores all the on-premises application data in a storage volume in Amazon S3. Its storage volume ranges from 1GB to 32 TB and up to 20 volumes with a total storage of 150TB. We can attach these volumes with iSCSI devices from on-premises application servers. It is of two categories \u2212 Cache Storage Disk Link Every application requires storage volumes to store their data. This storage type is used to initially store data when it is to be written to the storage volumes in AWS. The data from the cache storage disk is waiting to be uploaded to Amazon S3 from the upload buffer. The cache storage disk keeps the most recently accessed data for low-latency access. When the application needs data, the cache storage disk is first checked before checking Amazon S3. There are few guidelines to determine the amount of disk space to be allocated for cache storage. We should allocate at least 20% of the existing file store size as cache storage. It should be more than the upload buffer. Upload buffer disk \u2212 This type of storage disk is used to store the data before it is uploaded to Amazon S3 over SSL connection. The storage gateway uploads the data from the upload buffer over an SSL connection to AWS. Snapshots \u2212 Sometimes we need to back up storage volumes in Amazon S3. These backups are incremental and are known as snapshots . The snapshots are stored in Amazon S3 as Amazon EBS snapshots. Incremental backup means that a new snapshot is backing up only the data that has changed since the last snapshot. We can take snapshots either at a scheduled interval or as per the requirement. Gateway-stored Volumes Link When the Virtual Machine (VM) is activated, gateway volumes are created and mapped to the on-premises direct-attached storage disks. Hence, when the applications write/read the data from the gateway storage volumes, it reads and writes the data from the mapped on-premises disk. A gateway-stored volume allows to store primary data locally and provides on-premises applications with low-latency access to entire datasets. We can mount them as iSCSI devices to the on-premises application servers. It ranges from 1 GB to 16 TB in size and supports up to 12 volumes per gateway with a maximum storage of 192 TB. Gateway-Virtual Tape Library (VTL) Link This storage type provides a virtual tape infrastructure that scales seamlessly with your business needs and eliminates the operational burden of provisioning, scaling, and maintaining a physical tape infrastructure. Each gateway-VTL is preconfigured with media changer and tape drives, that are available with the existing client backup applications as iSCSI devices. Tape cartridges can be added later as required to archive the data. Few terms used in Architecture are explained below. Virtual Tape \u2212 Virtual tape is similar to a physical tape cartridge. It is stored in the AWS cloud. We can create virtual tapes in two ways: by using AWS Storage Gateway console or by using AWS Storage Gateway API. The size of each virtual tape is from 100 GB to 2.5 TB. The size of one gateway is up to 150 TB and can have maximum 1500 tapes at a time. Virtual Tape Library (VTL) \u2212 Each gateway-VTL comes with one VTL. VTL is similar to a physical tape library available on-premises with tape drives. The gateway first stores data locally, then asynchronously uploads it to virtual tapes of VTL. Tape Drive \u2212 A VTL tape drive is similar to a physical tape drive that can perform I/O operations on tape. Each VTL consists of 10 tape drives that are used for backup applications as iSCSI devices. Media Changer \u2212 A VTL media changer is similar to a robot that moves tapes around in a physical tape library's storage slots and tape drives. Each VTL comes with one media changer that is used for backup applications as iSCSI device. Virtual Tape Shelf (VTS) \u2212 A VTS is used to archive tapes from gateway VTL to VTS and vice-a-versa. Archiving Tapes \u2212 When the backup software ejects a tape, the gateway moves the tape to the VTS for storage. It is used data archiving and backups. Retrieving Tapes \u2212 Tapes archived to the VTS cannot be read directly so to read an archived tape, we need to retrieve the tape from gateway VTL either by using the AWS Storage Gateway console or by using the AWS Storage Gateway API. Amazon Web Services - CloudFront Link CloudFront is a CDN (Content Delivery Network) . It retrieves data from Amazon S3 bucket and distributes it to multiple datacenter locations. It delivers the data through a network of data centers called edge locations . The nearest edge location is routed when the user requests for data, resulting in lowest latency, low network traffic, fast access to data, etc. How AWS CloudFront Delivers the Content? Link AWS CloudFront delivers the content in the following steps. Step 1 \u2212 The user accesses a website and requests an object to download like an image file. Step 2 \u2212 DNS routes your request to the nearest CloudFront edge location to serve the user request. Step 3 \u2212 At edge location, CloudFront checks its cache for the requested files. If found, then returns it to the user otherwise does the following \u2212 First CloudFront compares the request with the specifications and forwards it to the applicable origin server for the corresponding file type. The origin servers send the files back to the CloudFront edge location. As soon as the first byte arrives from the origin, CloudFront starts forwarding it to the user and adds the files to the cache in the edge location for the next time when someone again requests for the same file. Step 4 \u2212 The object is now in an edge cache for 24 hours or for the provided duration in file headers. CloudFront does the following \u2212 CloudFront forwards the next request for the object to the user\u2019s origin to check the edge location version is updated or not. If the edge location version is updated, then CloudFront delivers it to the user. If the edge location version is not updated, then origin sends the latest version to CloudFront. CloudFront delivers the object to the user and stores the latest version in the cache at that edge location. Features of CloudFront Link Fast \u2212 The broad network of edge locations and CloudFront caches copies of content close to the end users that results in lowering latency, high data transfer rates and low network traffic. All these make CloudFront fast. Simple \u2212 It is easy to use. Can be used with other AWS Services \u2212 Amazon CloudFront is designed in such a way that it can be easily integrated with other AWS services, like Amazon S3, Amazon EC2. Cost-effective \u2212 Using Amazon CloudFront, we pay only for the content that you deliver through the network, without any hidden charges and no up-front fees. Elastic \u2212 Using Amazon CloudFront, we need not worry about maintenance. The service automatically responds if any action is needed, in case the demand increases or decreases. Reliable \u2212 Amazon CloudFront is built on Amazon\u2019s highly reliable infrastructure, i.e. its edge locations will automatically re-route the end users to the next nearest location, if required in some situations. Global \u2212 Amazon CloudFront uses a global network of edge locations located in most of the regions. How to Set Up AWS CloudFront? Link AWS CloudFront can be set up using the following steps. Step 1 \u2212 Sign in to AWS management console using the following link \u2212 https://console.aws.amazon.com/ Step 2 \u2212 Upload Amazon S3 and choose every permission public. (How to upload content to S3 bucket is discussed in chapter 14) Step 3 \u2212 Create a CloudFront Web Distribution using the following steps. Open CloudFront console using the following link \u2212 https://console.aws.amazon.com/cloudfront/ Click the Get Started button in the web section of Select a delivery method for your content page. Create Distribution page opens. Choose the Amazon S3 bucket created in the Origin Domain Name and leave the remaining fields as default. Default Cache Behavior Settings page opens. Keep the values as default and move to the next page. A Distribution settings page opens. Fill the details as per your requirement and click the Create Distribution button. The Status column changes from In Progress to Deployed. Enable your distribution by selecting the Enable option. It will take around 15 minutes for the domain name to be available in the Distributions list. Test the Links Link After creating distribution, CloudFront knows the location of Amazon S3 server and the user knows the domain name associated with the distribution. However, we can also create a link to Amazon S3 bucket content with that domain name and have CloudFront serve it. This helps save a lot of time. Following are the steps to link an object \u2212 Step 1 \u2212 Copy the following HTML code to a new file and write the domain-name that CloudFront assigned to the distribution in the place of domain name. Write a file name of Amazon S3 bucket in the place of object-name. < html > < head > CloudFront Testing link </ head > < body > < p > My Cludfront. </ p > < p >< img src = \"http://domain-name/object-name\" alt = \"test image\" /> </ body > </ html > Step 2 \u2212 Save the text in a file with .html extension. Step 3 \u2212 Open the web page in a browser to test the links to see if they are working correctly. If not, then crosscheck the settings.","title":"Amazon Simple Storage Service (S3)"},{"location":"cc/UnitII_AmazonS3/#amazon-simple-storage-service-s3","text":"","title":"Amazon Simple Storage Service (S3)"},{"location":"cc/UnitII_AmazonS3/#introduction","text":"","title":"Introduction"},{"location":"cc/UnitII_AmazonS3/#what-is-aws-s3","text":"Amazon Simple Storage Service (S3) is a storage for the internet. It is designed for large-capacity, low-cost storage provision across multiple geographical regions. Amazon S3 provides developers and IT teams with Secure , Durable and Highly Scalable object storage. S3 is Secure because AWS provides: Encryption to the data that you store. It can happen in two ways: Client Side Encryption Server Side Encryption Multiple copies are maintained to enable regeneration of data in case of data corruption Versioning, wherein each edit is archived for a potential retrieval. S3 is Durable because: It regularly verifies the integrity of data stored using checksums e.g. if S3 detects there is any corruption in data, it is immediately repaired with the help of replicated data. Even while storing or retrieving data, it checks incoming network traffic for any corrupted data packets. S3 is Highly Scalable , since it automatically scales your storage according to your requirement and you only pay for the storage you use. What kind and how much of data one can store in AWS S3? You can store virtually any kind of data, in any format, in S3 and when we talk about capacity, the volume and the number of objects that we can store in S3 are unlimited. An object is the fundamental entity in S3. It consists of data, key and metadata. When we talk about data, it can be of two types- Data which is to be accessed frequently. Data which is accessed not that frequently. Therefore, Amazon came up with 3 storage classes to provide its customers the best experience and at an affordable cost. Amazon Simple Storage Service (Amazon S3) is storage for the Internet. You can use Amazon S3 to store and retrieve any amount of data at any time, from anywhere on the web. You can accomplish these tasks using the AWS Management Console, which is a simple and intuitive web interface. Amazon S3 is cloud-based data storage accessible in real time via a web services API from anywhere on the Internet. Using this API, you can store any number of objects\u2014ranging in size from 1 byte to 5 GB\u2014in a fairly flat namespace. It is very important not to think of Amazon S3 as a filesystem. There are many people get in trouble when they expect it to act that way. First of all, it has a two-level namespace. At the first level, you have buckets. You can think of these buckets as directories, if you like, as they store the data you put in S3. Unlike traditional directories, however, you cannot organize them hierarchically\u2014you cannot put buckets in buckets. Perhaps more significant is the fact that the bucket namespace is shared across all Amazon customers. You need to take special care in designing bucket names that will not clash with other buckets. In other words, you won\u2019t be creating a bucket called \u201cDocuments\u201d. Another important thing to keep in mind is that Amazon S3 is relatively slow. Actually, it is very fast for an Internet-deployed service, but if you are expecting it to respond like a local disk or a SAN, you will be very disappointed. Therefore, it is not feasible to use Amazon S3 as an operational storage medium. Finally, access to S3 is via web services, not a filesystem or WebDAV. As a result, applications must be written specifically to store data in Amazon S3. Perhaps more to the point, you can\u2019t simply rsync a directory with S3 without specially crafted tools that use the Amazon API and skirt the S3 limitations. Amazon S3 is not\u2014so what is it? Amazon S3 enables you to place persistent data into the cloud and retrieve it at a later date with a near certainty that it will be there in one consistent piece when you get it back. Its key benefit is that you can simply continue to shove data into Amazon S3 and never worry about running out of storage space. In short, for most users, S3 serves as a short-term or long-term backup facility. Apache Hadoop (2010) uses S3 to store computation data, and online synchronization utilities such as Dropbox (2010) and Ubuntu One (2010) use S3 as their storage and transfer facility. The Amazon Simple Storage Service (2010) (S3) is an online storage web service offered by Amazon Web Services. S3 is accessible to users through web services, REST-style HTTP interfaces, 1 or by involving a SOAP interface. Like other cloud computing services, users can request small or large amounts of storage on the fly, providing a highly scalable storage system. Amazon S3 organizes the storage space into many \u201cbuckets\u201d, with each bucket being given a global unique namespace to help locate data addresses, identify the user account for payments, and gathering usage information (ASSSDG, 2010). S3 deals with all type of data as objects and stores them with their metadata into the bucket chosen by the data owner. An object can be accessed through a URL composed of its key and version ID with its bucket namespace as the prefix. Amazon S3\u2019s users are spread across countless fields, for example, SmugMug (2010), Slideshare (2010) and Twitter (2010) use Amazon S3 to host images. This guide introduces you to Amazon S3 and how to use the AWS Management Console to complete the tasks shown in the following figure.","title":"What is AWS S3 ?"},{"location":"cc/UnitII_AmazonS3/#amazon-s3-features","text":"Low cost and Easy to Use \u2212 Using Amazon S3, the user can store a large amount of data at very low charges. Secure \u2212 Amazon S3 supports data transfer over SSL and the data gets encrypted automatically once it is uploaded. The user has complete control over their data by configuring bucket policies using AWS IAM. Scalable \u2212 Using Amazon S3, there need not be any worry about storage concerns. We can store as much data as we have and access it anytime. Higher performance \u2212 Amazon S3 is integrated with Amazon CloudFront, that distributes content to the end users with low latency and provides high data transfer speeds without any minimum usage commitments. Integrated with AWS services \u2212 Amazon S3 integrated with AWS services include Amazon CloudFront, Amazon CLoudWatch, Amazon Kinesis, Amazon RDS, Amazon Route 53, Amazon VPC, AWS Lambda, Amazon EBS, Amazon Dynamo DB, etc.","title":"Amazon S3 Features"},{"location":"cc/UnitII_AmazonS3/#concepts-of-amazon-s3","text":"To get the most out of Amazon S3, you need to understand a few simple concepts. Amazon S3 stores data as objects within buckets. An object consists of a file and optionally any metadata that describes that file. To store an object in Amazon S3, you upload the file you want to store to a bucket. When you upload a file, you can set permissions on the object as well as any metadata. Buckets are the containers for objects. You can have one or more buckets. For each bucket, you can control access to it (who can create, delete, and list objects in the bucket), view access logs for it and its objects, and choose the geographical region where Amazon S3 will store the bucket and its contents","title":"Concepts of Amazon S3"},{"location":"cc/UnitII_AmazonS3/#sign-up-for-amazon-s3","text":"To use Amazon S3, you need an AWS account. If you don't already have one, you'll be prompted to create one when you sign up for Amazon S3. You will not be charged for Amazon S3 until you use it. For information on Amazon S3 features, pricing, and to see the FAQ, go to the Amazon S3 product page. To sign up for Amazon S3 Go to https://aws.amazon.com/s3/ and choose Get started with Amazon S3. Follow the on-screen instructions. AWS will notify you by email when your account is active and available for you to use.","title":"Sign Up for Amazon S3"},{"location":"cc/UnitII_AmazonS3/#create-a-bucket","text":"Now that you've signed up for Amazon S3, you're ready to create a bucket using the AWS Management Console. Every object in Amazon S3 is stored in a bucket. Before you can store data in Amazon S3, you must create a bucket. Note You are not charged for creating a bucket; you are charged only for storing objects in the bucket and for transferring objects in and out of the bucket. The charges you will incur through following the examples in this guide are minimal (less than $1). For more information about storage charges, see Amazon S3 Pricing.","title":"Create a Bucket"},{"location":"cc/UnitII_AmazonS3/#create-s3-bucket","text":"Sign in to the AWS Management Console and open the Amazon S3 console at https:// console.aws.amazon.com/s3/. Choose Create bucket. In the Bucket name field, type a unique DNS-compliant name for your new bucket. (The example screen shot uses the bucket name admin-created. You cannot use this name because S3 bucket names must be unique.) Create your own bucket name using the follow naming guidelines: The name must be unique across all existing bucket names in Amazon S3. After you create the bucket you cannot change the name, so choose wisely. Choose a bucket name that reflects the objects in the bucket because the bucket name is visible in the URL that points to the objects that you're going to put in your bucket. For information about naming buckets, see Rules for Bucket Naming in the Amazon Simple Storage Service Developer Guide. For Region, choose US West (Oregon) as the region where you want the bucket to reside. Choose Create. You've created a bucket in Amazon S3.","title":"Create S3 bucket"},{"location":"cc/UnitII_AmazonS3/#add-an-object-to-a-bucket","text":"Now that you've created a bucket, you're ready to add an object to it. An object can be any kind of file: a text file, a photo, a video, and so on. To upload an object to a bucket In the Bucket name list, choose the name of the bucket that you want to upload your object to. Choose Upload. Or you can choose Get started. In the Upload dialog box, choose Add files to choose the file to upload. Choose a file to upload, and then choose Open. Choose Upload.","title":"Add an Object to a Bucket"},{"location":"cc/UnitII_AmazonS3/#view-an-object","text":"Now that you've added an object to a bucket, you can view information about your object and download the object to your local computer. To download an object from a bucket In the Bucket name list, choose the name of the bucket that you created. In the Name list, select the check box next to the object that you uploaded, and then choose Download on the object overview panel. ### Move an Object So far you've added an object to a bucket and downloaded the object. Now we create a folder and move the object into the folder by copying and pasting the object. To copy an object In the Bucket name list, choose the name of the bucket that you created. Choose Create Folder, type favorite-pics for the folder name, choose None for the encryption setting for the folder object and then choose Save. In the Name list, select the check box next to the object that you want to copy, choose More, and then choose Copy. In the Name list, choose the name of the folder favorite-pics. Choose More, and then choose Paste. Choose Paste.","title":"View an Object"},{"location":"cc/UnitII_AmazonS3/#delete-an-object-and-bucket","text":"If you no longer need to store the object that you uploaded and made a copy of while going through this guide, you should delete the objects to prevent further charges. You can delete the objects individually. Or you can empty a bucket, which deletes all the objects in the bucket without deleting the bucket. You can also delete a bucket and all the objects contained in the bucket. However, if you want to continue to use the same bucket name, don't delete the bucket. We recommend that you empty the bucket and keep it. After a bucket is deleted, the name becomes available to reuse, but the name might not be available for you to reuse for various reasons. For example, it might take some time before the name can be reused and some other account could create a bucket with that name before you do. To delete an object from a bucket In the Bucket name list, choose the name of the bucket that you want to delete an object from. In the Name list, select the check box next to the object that you want to delete, choose More, and then choose Delete. In the Delete objects dialog box, verify that the name of the object you selected for deletion is listed, and then choose Delete. You can empty a bucket, which deletes all the objects in the bucket without deleting the bucket. To empty a bucket In the Bucket name list, choose the bucket icon next to the name of the bucket that you want to empty and then choose Empty bucket. In the Empty bucket dialog box, type the name of the bucket for confirmation and then choose Confirm. You can delete a bucket and all the objects contained in the bucket. To delete a bucket In the Bucket name list, choose the bucket icon next to the name of the bucket that you want to delete and then choose Delete bucket In the Delete bucket dialog box, type the name of the bucket for delete confirmation and then choose Confirm.","title":"Delete an Object and Bucket"},{"location":"cc/UnitII_AmazonS3/#case-study","text":"Let\u2019s understand the 3 storage classes with a \u201chealth-care\u201d use case: Amazon S3 Standard for frequent data access. This is suitable for performance sensitive use cases where the latency should be kept low. e.g. in a hospital, frequently accessed data will be the data of admitted patients, which should be retrieved quickly. **Amazon S3 Standard* for infrequent data access: **This is suitable for use cases where the data is long lived and less frequently accessed, i.e for data archival but still expects high performance. e.g. in the same hospital, people who have been discharged, their records/data will not be needed on a daily basis, but if they return with any complication, their discharge summary should be retrieved quickly. Amazon Glacier Suitable for use cases where the data is to be archived, and high performance is not required, it has a lower cost than the other two services.e.g. in the hospital, patients\u2019 test reports, prescriptions, MRI, X Ray, Scan docs etc. that are older than a year will not be needed in the daily run and even if it is required, lower latency is not needed. Specification Snapshot: Storage Classes","title":"Case Study"},{"location":"cc/UnitII_AmazonS3/#clever-safe-storage","text":"Cloud storage systems have unique challenges that legacy storage technologies cannot address. Storage technologies based on RAID and replication are not well suited for cloud infrastructures because they don\u2019t scale easily to the exabyte level. Legacy storage technologies rely on redundant copies to increase reliability, resulting in systems that are not easily manageable, chew up bandwidth, and are not cost effective. Cleversafe\u2019s unique cloud storage platform\u2014based on company technology trademarked under the name Dispersed Storage\u2014divides data into slices and stores them in different geographic locations on hardware appliances. The algorithms used to divide the data are comparable to the concept of parity\u2014but with much more sophistication\u2014because they allow the total data to be reconstituted from a subset. For instance, you may store the data in 12 locations, any 8 of which are enough to restore it completely. This technology, known as information dispersal, achieves geographic redundancy and high availability without expensive replication of the data. In April 2008, Cleversafe embodied its dispersal technology in hardware appliances that provide a front-end to the user using standard protocols such as REST APIs or iSCSI. The appliances take on the task of splitting and routing the data to storage sites, and merely increase the original file size by 1.3 to 1.6 times, versus 3 times in a replicated system. Companies are using Cleversafe\u2019s Dispersed Storage appliances to build public and private cloud storage as a backend infrastructure to Software as a Service. Dispersed Storage easily fulfills the characteristics of a cloud infrastructure since it provides storage on demand and accessibility anywhere. Dispersal also achieves higher levels of security within the cloud without necessarily needing encryption, because each slice contains too little information to be useful. This unique architecture helps people satisfy their concern over their data being outside of their immediate control, which often becomes a barrier to storage decisions. While a lost backup tape contains a full copy of data, access to a single appliance using Dispersed Storage results in no data breach. Additionally, Dispersed Storage is massively scalable and designed to handle petabytes of data. By adding servers into the storage cloud with automated storage discovery, the total storage of the system can easily grow, and performance can be scaled by simply adding additional appliances. Virtualization tools enable easy deployment and on-demand provisioning. All of these capabilities streamline efforts for storage administrators. Dispersed Storage is also designed to store and distribute large objects, the cornerstone of our media-intensive society that has become dependent on videos and images in every aspect of life. Dispersal is inherently designed for content distribution by naturally incorporating load balancing through the multitude of access choices for selecting the slices used to reconstruct the original file. This means companies do not have to deal with or pay for implementing a separate content delivery network for their stored data. Dispersed Storage offers a novel and needed approach to cloud storage, and will be significant as cloud storage matures and displaces traditional storage methods.","title":"CLEVER SAFE STORAGE"},{"location":"cc/UnitII_AmazonS3/#amazon-web-services-elastic-block-storeebs","text":"Amazon Elastic Block Store (EBS) is a block storage system used to store persistent data. Amazon EBS is suitable for EC2 instances by providing highly available block level storage volumes. It has three types of volume, i.e. General Purpose (SSD), Provisioned IOPS (SSD), and Magnetic. These three volume types differ in performance, characteristics, and cost.","title":"Amazon Web Services - Elastic Block Store(EBS)"},{"location":"cc/UnitII_AmazonS3/#ebs-volume-types","text":"Following are the three types.","title":"EBS Volume Types"},{"location":"cc/UnitII_AmazonS3/#ebs-general-purpose-ssd","text":"This volume type is suitable for small and medium workloads like Root disk EC2 volumes, small and medium database workloads, frequently logs accessing workloads, etc. By default, SSD supports 3 IOPS (Input Output Operations per Second)/GB means 1 GB volume will give 3 IOPS, and 10 GB volume will give 30 IOPS. Its storage capacity of one volume ranges from 1 GB to 1 TB. The cost of one volume is $0.10 per GB for one month.","title":"EBS General Purpose (SSD)"},{"location":"cc/UnitII_AmazonS3/#provisioned-iops-ssd","text":"This volume type is suitable for the most demanding I/O intensive, transactional workloads and large relational, EMR and Hadoop workloads, etc. By default, IOPS SSD supports 30 IOPS/GB means 10GB volume will give 300 IOPS. Its storage capacity of one volume ranges from 10GB to 1TB. The cost of one volume is $0.125 per GB for one month for provisioned storage and $0.10 per provisioned IOPS for one month.","title":"Provisioned IOPS (SSD)"},{"location":"cc/UnitII_AmazonS3/#ebs-magnetic-volumes","text":"It was formerly known as standard volumes. This volume type is suitable for ideal workloads like infrequently accessing data, i.e. data backups for recovery, logs storage, etc. Its storage capacity of one volume ranges from 10GB to 1TB. The cost of one volume is $0.05 per GB for one month for provisioned storage and $0. 05 per million I/O requests.","title":"EBS Magnetic Volumes"},{"location":"cc/UnitII_AmazonS3/#volumes-attached-to-one-instance","text":"Each account will be limited to 20 EBS volumes. For a requirement of more than 20 EBS volumes, contact Amazon\u2019s Support team. We can attach up to 20 volumes on a single instance and each volume ranges from 1GB to 1TB in size. In EC2 instances, we store data in local storage which is available till the instance is running. However, when we shut down the instance, the data gets lost. Thus, when we need to save anything, it is advised to save it on Amazon EBS, as we can access and read the EBS volumes anytime, once we attach the file to an EC2 instance.","title":"Volumes Attached to One Instance"},{"location":"cc/UnitII_AmazonS3/#amazon-ebs-benefits","text":"Reliable and secure storage \u2212 Each of the EBS volume will automatically respond to its Availability Zone to protect from component failure. Secure \u2212 Amazon\u2019s flexible access control policies allows to specify who can access which EBS volumes. Access control plus encryption offers a strong defense-in-depth security strategy for data. Higher performance \u2212 Amazon EBS uses SSD technology to deliver data results with consistent I/O performance of application. Easy data backup \u2212 Data backup can be saved by taking point-in-time snapshots of Amazon EBS volumes.","title":"Amazon EBS Benefits"},{"location":"cc/UnitII_AmazonS3/#how-to-set-up-amazon-ebs","text":"Step 1 \u2212 Create Amazon EBS volume using the following steps. Open the Amazon EC2 console. Select the region in the navigation bar where the volume is to be created. In the navigation pane, select Volumes, then select Create Volume. Provide the required information like Volume Type list, Size, IOPS, Availability zone, etc. then click the Create button. The volume names can be seen in the volumes list. Step 2 \u2212 Store EBS Volume from a snapshot using the following steps. Repeat the above 1 to 4 steps to create volume. Type snapshot ID in the Snapshot ID field from which the volume is to be restored and select it from the list of suggested options. If there is requirement for more storage, change the storage size in the Size field. Select the Yes Create button. Step 3 \u2212 Attach EBS Volume to an Instance using the following steps. Open the Amazon EC2 console. Select Volumes in the navigation pane. Choose a volume and click the Attach Volume option. An Attach Volume dialog box will open. Enter the name/ID of instance to attach the volume in the Instance field or select it from the list of suggestion options. Click the Attach button. Connect to instance and make the volume available. Step 4 \u2212 Detach a volume from Instance. First, use the command /dev/sdh in cmd to unmount the device. Open the Amazon EC2 console. In the navigation pane, select the Volumes option. Choose a volume and click the Detach Volumes option. A confirmation dialog box opens. Click the Yes, Detach button to confirm.","title":"How to Set Up Amazon EBS?"},{"location":"cc/UnitII_AmazonS3/#amazon-web-services-storage-gateway","text":"AWS Storage Gateway provides integration between the on-premises IT environment and the AWS storage infrastructure. The user can store data in the AWS cloud for scalable, data security features and cost-efficient storage. AWS Gateway offers two types of storage, i.e. volume based and tape based.","title":"Amazon Web Services - Storage Gateway"},{"location":"cc/UnitII_AmazonS3/#volume-gateways","text":"This storage type provides cloud-backed storage volumes which can be mount as Internet Small Computer System Interface (iSCSI) devices from on-premises application servers.","title":"Volume Gateways"},{"location":"cc/UnitII_AmazonS3/#gateway-cached-volumes","text":"AWS Storage Gateway stores all the on-premises application data in a storage volume in Amazon S3. Its storage volume ranges from 1GB to 32 TB and up to 20 volumes with a total storage of 150TB. We can attach these volumes with iSCSI devices from on-premises application servers. It is of two categories \u2212","title":"Gateway-cached Volumes"},{"location":"cc/UnitII_AmazonS3/#cache-storage-disk","text":"Every application requires storage volumes to store their data. This storage type is used to initially store data when it is to be written to the storage volumes in AWS. The data from the cache storage disk is waiting to be uploaded to Amazon S3 from the upload buffer. The cache storage disk keeps the most recently accessed data for low-latency access. When the application needs data, the cache storage disk is first checked before checking Amazon S3. There are few guidelines to determine the amount of disk space to be allocated for cache storage. We should allocate at least 20% of the existing file store size as cache storage. It should be more than the upload buffer. Upload buffer disk \u2212 This type of storage disk is used to store the data before it is uploaded to Amazon S3 over SSL connection. The storage gateway uploads the data from the upload buffer over an SSL connection to AWS. Snapshots \u2212 Sometimes we need to back up storage volumes in Amazon S3. These backups are incremental and are known as snapshots . The snapshots are stored in Amazon S3 as Amazon EBS snapshots. Incremental backup means that a new snapshot is backing up only the data that has changed since the last snapshot. We can take snapshots either at a scheduled interval or as per the requirement.","title":"Cache Storage Disk"},{"location":"cc/UnitII_AmazonS3/#gateway-stored-volumes","text":"When the Virtual Machine (VM) is activated, gateway volumes are created and mapped to the on-premises direct-attached storage disks. Hence, when the applications write/read the data from the gateway storage volumes, it reads and writes the data from the mapped on-premises disk. A gateway-stored volume allows to store primary data locally and provides on-premises applications with low-latency access to entire datasets. We can mount them as iSCSI devices to the on-premises application servers. It ranges from 1 GB to 16 TB in size and supports up to 12 volumes per gateway with a maximum storage of 192 TB.","title":"Gateway-stored Volumes"},{"location":"cc/UnitII_AmazonS3/#gateway-virtual-tape-library-vtl","text":"This storage type provides a virtual tape infrastructure that scales seamlessly with your business needs and eliminates the operational burden of provisioning, scaling, and maintaining a physical tape infrastructure. Each gateway-VTL is preconfigured with media changer and tape drives, that are available with the existing client backup applications as iSCSI devices. Tape cartridges can be added later as required to archive the data. Few terms used in Architecture are explained below. Virtual Tape \u2212 Virtual tape is similar to a physical tape cartridge. It is stored in the AWS cloud. We can create virtual tapes in two ways: by using AWS Storage Gateway console or by using AWS Storage Gateway API. The size of each virtual tape is from 100 GB to 2.5 TB. The size of one gateway is up to 150 TB and can have maximum 1500 tapes at a time. Virtual Tape Library (VTL) \u2212 Each gateway-VTL comes with one VTL. VTL is similar to a physical tape library available on-premises with tape drives. The gateway first stores data locally, then asynchronously uploads it to virtual tapes of VTL. Tape Drive \u2212 A VTL tape drive is similar to a physical tape drive that can perform I/O operations on tape. Each VTL consists of 10 tape drives that are used for backup applications as iSCSI devices. Media Changer \u2212 A VTL media changer is similar to a robot that moves tapes around in a physical tape library's storage slots and tape drives. Each VTL comes with one media changer that is used for backup applications as iSCSI device. Virtual Tape Shelf (VTS) \u2212 A VTS is used to archive tapes from gateway VTL to VTS and vice-a-versa. Archiving Tapes \u2212 When the backup software ejects a tape, the gateway moves the tape to the VTS for storage. It is used data archiving and backups. Retrieving Tapes \u2212 Tapes archived to the VTS cannot be read directly so to read an archived tape, we need to retrieve the tape from gateway VTL either by using the AWS Storage Gateway console or by using the AWS Storage Gateway API.","title":"Gateway-Virtual Tape Library (VTL)"},{"location":"cc/UnitII_AmazonS3/#amazon-web-services-cloudfront","text":"CloudFront is a CDN (Content Delivery Network) . It retrieves data from Amazon S3 bucket and distributes it to multiple datacenter locations. It delivers the data through a network of data centers called edge locations . The nearest edge location is routed when the user requests for data, resulting in lowest latency, low network traffic, fast access to data, etc.","title":"Amazon Web Services - CloudFront"},{"location":"cc/UnitII_AmazonS3/#how-aws-cloudfront-delivers-the-content","text":"AWS CloudFront delivers the content in the following steps. Step 1 \u2212 The user accesses a website and requests an object to download like an image file. Step 2 \u2212 DNS routes your request to the nearest CloudFront edge location to serve the user request. Step 3 \u2212 At edge location, CloudFront checks its cache for the requested files. If found, then returns it to the user otherwise does the following \u2212 First CloudFront compares the request with the specifications and forwards it to the applicable origin server for the corresponding file type. The origin servers send the files back to the CloudFront edge location. As soon as the first byte arrives from the origin, CloudFront starts forwarding it to the user and adds the files to the cache in the edge location for the next time when someone again requests for the same file. Step 4 \u2212 The object is now in an edge cache for 24 hours or for the provided duration in file headers. CloudFront does the following \u2212 CloudFront forwards the next request for the object to the user\u2019s origin to check the edge location version is updated or not. If the edge location version is updated, then CloudFront delivers it to the user. If the edge location version is not updated, then origin sends the latest version to CloudFront. CloudFront delivers the object to the user and stores the latest version in the cache at that edge location.","title":"How AWS CloudFront Delivers the Content?"},{"location":"cc/UnitII_AmazonS3/#features-of-cloudfront","text":"Fast \u2212 The broad network of edge locations and CloudFront caches copies of content close to the end users that results in lowering latency, high data transfer rates and low network traffic. All these make CloudFront fast. Simple \u2212 It is easy to use. Can be used with other AWS Services \u2212 Amazon CloudFront is designed in such a way that it can be easily integrated with other AWS services, like Amazon S3, Amazon EC2. Cost-effective \u2212 Using Amazon CloudFront, we pay only for the content that you deliver through the network, without any hidden charges and no up-front fees. Elastic \u2212 Using Amazon CloudFront, we need not worry about maintenance. The service automatically responds if any action is needed, in case the demand increases or decreases. Reliable \u2212 Amazon CloudFront is built on Amazon\u2019s highly reliable infrastructure, i.e. its edge locations will automatically re-route the end users to the next nearest location, if required in some situations. Global \u2212 Amazon CloudFront uses a global network of edge locations located in most of the regions.","title":"Features of CloudFront"},{"location":"cc/UnitII_AmazonS3/#how-to-set-up-aws-cloudfront","text":"AWS CloudFront can be set up using the following steps. Step 1 \u2212 Sign in to AWS management console using the following link \u2212 https://console.aws.amazon.com/ Step 2 \u2212 Upload Amazon S3 and choose every permission public. (How to upload content to S3 bucket is discussed in chapter 14) Step 3 \u2212 Create a CloudFront Web Distribution using the following steps. Open CloudFront console using the following link \u2212 https://console.aws.amazon.com/cloudfront/ Click the Get Started button in the web section of Select a delivery method for your content page. Create Distribution page opens. Choose the Amazon S3 bucket created in the Origin Domain Name and leave the remaining fields as default. Default Cache Behavior Settings page opens. Keep the values as default and move to the next page. A Distribution settings page opens. Fill the details as per your requirement and click the Create Distribution button. The Status column changes from In Progress to Deployed. Enable your distribution by selecting the Enable option. It will take around 15 minutes for the domain name to be available in the Distributions list.","title":"How to Set Up AWS CloudFront?"},{"location":"cc/UnitII_AmazonS3/#test-the-links","text":"After creating distribution, CloudFront knows the location of Amazon S3 server and the user knows the domain name associated with the distribution. However, we can also create a link to Amazon S3 bucket content with that domain name and have CloudFront serve it. This helps save a lot of time. Following are the steps to link an object \u2212 Step 1 \u2212 Copy the following HTML code to a new file and write the domain-name that CloudFront assigned to the distribution in the place of domain name. Write a file name of Amazon S3 bucket in the place of object-name. < html > < head > CloudFront Testing link </ head > < body > < p > My Cludfront. </ p > < p >< img src = \"http://domain-name/object-name\" alt = \"test image\" /> </ body > </ html > Step 2 \u2212 Save the text in a file with .html extension. Step 3 \u2212 Open the web page in a browser to test the links to see if they are working correctly. If not, then crosscheck the settings.","title":"Test the Links"},{"location":"cc/UnitII_AmazonSQS/","text":"Amazon Simple Queue Service (SQS) Link Amazon SQS is a cornerstone to any Amazon-based grid computing effort. As with any message queue service, it accepts messages and passes them on to servers subscribing to the message queue. A messaging system typically enables multiple computers to exchange information in complete ignorance of each other. The sender simply submits a short message (up to 8KB in Amazon SQS) into the queue and continues about its business. The recipient retrieves the message from the queue and acts upon the contents of the message. A message, for example, can be, \u201cProcess data set 123.csv in S3 bucket s3://fancy-bucket and submit the results to message queue Y.\u201d One advantage of a message queue system is that the sender does not need to identify a recipient or perform any error handling to deal with communication failures. The recipient does not even need to be active at the time the message is sent. The Amazon SQS system fits well into a cloud computing environment due to its simplicity. Most systems requiring a message queue need only a simple API to submit a message, retrieve it, and trust the integrity of the message within the queue. It can be a tedious task to develop and maintain something this simple, but it is also way too complex and expensive to use many of the commercial message queue packages.","title":"Amazon Simple Queue Service (SQS)"},{"location":"cc/UnitII_AmazonSQS/#amazon-simple-queue-service-sqs","text":"Amazon SQS is a cornerstone to any Amazon-based grid computing effort. As with any message queue service, it accepts messages and passes them on to servers subscribing to the message queue. A messaging system typically enables multiple computers to exchange information in complete ignorance of each other. The sender simply submits a short message (up to 8KB in Amazon SQS) into the queue and continues about its business. The recipient retrieves the message from the queue and acts upon the contents of the message. A message, for example, can be, \u201cProcess data set 123.csv in S3 bucket s3://fancy-bucket and submit the results to message queue Y.\u201d One advantage of a message queue system is that the sender does not need to identify a recipient or perform any error handling to deal with communication failures. The recipient does not even need to be active at the time the message is sent. The Amazon SQS system fits well into a cloud computing environment due to its simplicity. Most systems requiring a message queue need only a simple API to submit a message, retrieve it, and trust the integrity of the message within the queue. It can be a tedious task to develop and maintain something this simple, but it is also way too complex and expensive to use many of the commercial message queue packages.","title":"Amazon Simple Queue Service (SQS)"},{"location":"cc/UnitII_AmazonSimpleDB/","text":"Amazon SimpleDB Link Amazon SimpleDB is an odd combination of structured data storage with higher reliability than your typical MySQL or Oracle instance, and very baseline relational storage needs. It is very powerful for people concerned more with the availability of relational data and less so with the complexity of their relational model or transaction management. In my experience, this audience is a very small subset of transactional applications\u2014though it could be particularly useful in heavy read environments, such as web content management systems. The advantages of Amazon SimpleDB include: No need for a database administrator (DBA) A very simple web services API for querying the data Availability of a clustered database management system (DBMS) Very scalable in terms of data storage capabilities If you need the power of a relational database, Amazon SimpleDB is not an appropriate tool. On the other hand, if your idea of an application database is bdb , Amazon SimpleDB will be the perfect tool for you.","title":"UnitII AmazonSimpleDB"},{"location":"cc/UnitII_AmazonSimpleDB/#amazon-simpledb","text":"Amazon SimpleDB is an odd combination of structured data storage with higher reliability than your typical MySQL or Oracle instance, and very baseline relational storage needs. It is very powerful for people concerned more with the availability of relational data and less so with the complexity of their relational model or transaction management. In my experience, this audience is a very small subset of transactional applications\u2014though it could be particularly useful in heavy read environments, such as web content management systems. The advantages of Amazon SimpleDB include: No need for a database administrator (DBA) A very simple web services API for querying the data Availability of a clustered database management system (DBMS) Very scalable in terms of data storage capabilities If you need the power of a relational database, Amazon SimpleDB is not an appropriate tool. On the other hand, if your idea of an application database is bdb , Amazon SimpleDB will be the perfect tool for you.","title":"Amazon SimpleDB"},{"location":"cc/UnitII_Amazon_Storage_Service/","text":"Amazon Storage Service Link AWS \u2500 Amazon S3 How to Configure S3? How to Move S3 Objects? How to Delete an Object? How to Empty a Bucket? Amazon S3 Features AWS \u2500 Elastic Block Storage EBS Volume Types Amazon EBS Benefits How to Set Up Amazon EBS? AWS \u2500 Sto r age Gateway Volume Gateways Gateway-Virtual Tape Library (VTL) 16 AWS \u2500 CloudFront How AW S Cloud F ront Delivers the Content? Features of Cloud Front How to Set Up AWS Cloud Front? Test the Links 79","title":"Amazon Storage Service"},{"location":"cc/UnitII_Amazon_Storage_Service/#amazon-storage-service","text":"AWS \u2500 Amazon S3 How to Configure S3? How to Move S3 Objects? How to Delete an Object? How to Empty a Bucket? Amazon S3 Features AWS \u2500 Elastic Block Storage EBS Volume Types Amazon EBS Benefits How to Set Up Amazon EBS? AWS \u2500 Sto r age Gateway Volume Gateways Gateway-Virtual Tape Library (VTL) 16 AWS \u2500 CloudFront How AW S Cloud F ront Delivers the Content? Features of Cloud Front How to Set Up AWS Cloud Front? Test the Links 79","title":"Amazon Storage Service"},{"location":"cc/UnitII_Comparison/","text":"SAAS vs IAAS vs PAAS Link Today, everyone are moving towards Cloud World (AWS/GCP/Azure/PCF/VMC). It might be a public cloud, a private cloud or a hybrid cloud. But are you aware of what are Services Cloud Computing provides to us ???? Majorly there are three categories of Cloud Computing Services: Properties SAAS IAAS PAAS It is sometimes called to as \u201con-demand software\u201d. Typically accessed by users using a thin client via a web browser. In SaaS everything can be managed by vendors: applications, runtime, data, middleware, OSes, virtualization, servers, storage and networking, End users have to use it. It provides only a base infrastructure (Virtual machine, Software Define Network, Storage attached). End user have to configure and manage platform and environment, deploy applications on it. It provides a platform allowing end user to develop, run, and manage applications without the complexity of building and maintaining the infrastructure. e.g. GMAIL is Best example of SaaS. Google team managing everything just we have to use the application through any of client or in browsers. Other examples SAP , Salesforce . AWS (EC2), GCP (CE), Microsoft Azure (VM) are examples of Iaas. Google App Engine, CloudFoundry, Heroku, AWS (Beanstalk) are some examples of PaaS. IaaS vs PaaS vs SaaS: Which Cloud Service Is Suitable for You? It\u2019s time to pick which cloud-based service you need. In fact, the choice totally depends on your business goals, so first of all consider what your company needs. Here are some common business needs that can easily be met with the appropriate cloud service: If your business needs out-of-the-box software (CRM, email, collaboration tools, etc.), choose Software as a Service. If your company requires a platform for building software products, pick Platform as a Service. If your business needs a virtual machine, opt for Infrastructure as a Service. Comparison Among SAAS/PAAS/IAAS Link SAAS: SOFTWARE AS A SERVICE Link Cloud application services, or Software as a Service, represent the largest cloud market and are still growing quickly. SaaS uses the web to deliver applications that are managed by a third-party vendor and whose interface is accessed on the clients\u2019 side. Most SaaS applications can be run directly from a web browser without any downloads or installations required, although some require plugins. Because of the web delivery model, SaaS eliminates the need to install and run applications on individual computers. With SaaS, it\u2019s easy for enterprises to streamline their maintenance and support, because everything can be managed by vendors: applications, runtime, data, middleware, OSes, virtualization, servers, storage and networking. Popular SaaS offering types include email and collaboration, customer relationship management, and healthcare-related applications. Some large enterprises that are not traditionally thought of as software vendors have started building SaaS as an additional source of revenue in order to gain a competitive advantage. SaaS Examples: Google Apps, Salesforce, Workday, Concur, Citrix GoToMeeting, Cisco WebEx Common SaaS Use-Case: Replaces traditional on-device software Technology Analyst Examples: Bill Pray (Gartner), Amy DeMartine (Forrester) PAAS : Platform as a services Link Cloud platform services, or Platform as a Service (PaaS) , are used for applications, and other development, while providing cloud components to software. What developers gain with PaaS is a framework they can build upon to develop or customize applications. PaaS makes the development, testing, and deployment of applications quick, simple, and cost-effective. With this technology, enterprise operations, or a third-party provider, can manage OSes, virtualization, servers, storage, networking, and the PaaS software itself. Developers, however, manage the applications. Enterprise PaaS provides line-of-business software developers a self-service portal for managing computing infrastructure from centralized IT operations and the platforms that are installed on top of the hardware. The enterprise PaaS can be delivered through a hybrid model that uses both public IaaS and on-premise infrastructure or as a pure private PaaS that only uses the latter. Similar to the way in which you might create macros in Excel, PaaS allows you to create applications using software components that are built into the PaaS (middleware). Applications using PaaS inherit cloud characteristic such as scalability, high-availability, multi-tenancy, SaaS enablement, and more. Enterprises benefit from PaaS because it reduces the amount of coding necessary, automates business policy, and helps migrate apps to hybrid model. For the needs of enterprises and other organizations, Apprenda is one provider of a private cloud PaaS for .NET and Java. Enterprise PaaS Examples: Apprenda Common PaaS Use-Case: Increases developer productivity and utilization rates while also decreasing an application\u2019s time-to-market Technology Analyst Examples: Richard Watson (Gartner), Eric Knipp (Gartner), Yefim Natis (Gartner), Stefan Ried (Forrester), John Rymer (Forrester) IAAS : Infrastructure As a Service Link Cloud infrastructure services, known as Infrastructure as a Service (IaaS), are self-service models for accessing, monitoring, and managing remote datacenter infrastructures, such as compute (virtualized or bare metal), storage, networking, and networking services (e.g. firewalls). Instead of having to purchase hardware outright, users can purchase IaaS based on consumption, similar to electricity or other utility billing. Compared to SaaS and PaaS , IaaS users are responsible for managing applications, data, runtime, middleware, and OSes. Providers still manage virtualization, servers, hard drives, storage, and networking. Many IaaS providers now offer databases, messaging queues, and other services above the virtualization layer as well. Some tech analysts draw a distinction here and use the IaaS+ moniker for these other options. What users gain with IaaS is infrastructure on top of which they can install any required platform. Users are responsible for updating these if new versions are released. IaaS Examples: Amazon Web Services (AWS), Cisco Metapod, Microsoft Azure, Google Compute Engine (GCE), Joyent Common IaaS Use-Case: Extends current data center infrastructure for temporary workloads (e.g. increased Christmas holiday site traffic) Technology Analyst Examples: Kyle Hilgendorf (Gartner), Drue Reeves (Gartner), Lydia Leong (Gartner), Doug Toombs (Gartner), Gregor Petri (Gartner EU), Tiny Haynes (Gartner EU), Jeffery Hammond (Forrester), James Staten (Forrester)","title":"SAAS vs IAAS vs PAAS"},{"location":"cc/UnitII_Comparison/#saas-vs-iaas-vs-paas","text":"Today, everyone are moving towards Cloud World (AWS/GCP/Azure/PCF/VMC). It might be a public cloud, a private cloud or a hybrid cloud. But are you aware of what are Services Cloud Computing provides to us ???? Majorly there are three categories of Cloud Computing Services: Properties SAAS IAAS PAAS It is sometimes called to as \u201con-demand software\u201d. Typically accessed by users using a thin client via a web browser. In SaaS everything can be managed by vendors: applications, runtime, data, middleware, OSes, virtualization, servers, storage and networking, End users have to use it. It provides only a base infrastructure (Virtual machine, Software Define Network, Storage attached). End user have to configure and manage platform and environment, deploy applications on it. It provides a platform allowing end user to develop, run, and manage applications without the complexity of building and maintaining the infrastructure. e.g. GMAIL is Best example of SaaS. Google team managing everything just we have to use the application through any of client or in browsers. Other examples SAP , Salesforce . AWS (EC2), GCP (CE), Microsoft Azure (VM) are examples of Iaas. Google App Engine, CloudFoundry, Heroku, AWS (Beanstalk) are some examples of PaaS. IaaS vs PaaS vs SaaS: Which Cloud Service Is Suitable for You? It\u2019s time to pick which cloud-based service you need. In fact, the choice totally depends on your business goals, so first of all consider what your company needs. Here are some common business needs that can easily be met with the appropriate cloud service: If your business needs out-of-the-box software (CRM, email, collaboration tools, etc.), choose Software as a Service. If your company requires a platform for building software products, pick Platform as a Service. If your business needs a virtual machine, opt for Infrastructure as a Service.","title":"SAAS vs IAAS vs PAAS"},{"location":"cc/UnitII_Comparison/#comparison-among-saaspaasiaas","text":"","title":"Comparison Among SAAS/PAAS/IAAS"},{"location":"cc/UnitII_Comparison/#saas-software-as-a-service","text":"Cloud application services, or Software as a Service, represent the largest cloud market and are still growing quickly. SaaS uses the web to deliver applications that are managed by a third-party vendor and whose interface is accessed on the clients\u2019 side. Most SaaS applications can be run directly from a web browser without any downloads or installations required, although some require plugins. Because of the web delivery model, SaaS eliminates the need to install and run applications on individual computers. With SaaS, it\u2019s easy for enterprises to streamline their maintenance and support, because everything can be managed by vendors: applications, runtime, data, middleware, OSes, virtualization, servers, storage and networking. Popular SaaS offering types include email and collaboration, customer relationship management, and healthcare-related applications. Some large enterprises that are not traditionally thought of as software vendors have started building SaaS as an additional source of revenue in order to gain a competitive advantage. SaaS Examples: Google Apps, Salesforce, Workday, Concur, Citrix GoToMeeting, Cisco WebEx Common SaaS Use-Case: Replaces traditional on-device software Technology Analyst Examples: Bill Pray (Gartner), Amy DeMartine (Forrester)","title":"SAAS: SOFTWARE AS A SERVICE"},{"location":"cc/UnitII_Comparison/#paas-platform-as-a-services","text":"Cloud platform services, or Platform as a Service (PaaS) , are used for applications, and other development, while providing cloud components to software. What developers gain with PaaS is a framework they can build upon to develop or customize applications. PaaS makes the development, testing, and deployment of applications quick, simple, and cost-effective. With this technology, enterprise operations, or a third-party provider, can manage OSes, virtualization, servers, storage, networking, and the PaaS software itself. Developers, however, manage the applications. Enterprise PaaS provides line-of-business software developers a self-service portal for managing computing infrastructure from centralized IT operations and the platforms that are installed on top of the hardware. The enterprise PaaS can be delivered through a hybrid model that uses both public IaaS and on-premise infrastructure or as a pure private PaaS that only uses the latter. Similar to the way in which you might create macros in Excel, PaaS allows you to create applications using software components that are built into the PaaS (middleware). Applications using PaaS inherit cloud characteristic such as scalability, high-availability, multi-tenancy, SaaS enablement, and more. Enterprises benefit from PaaS because it reduces the amount of coding necessary, automates business policy, and helps migrate apps to hybrid model. For the needs of enterprises and other organizations, Apprenda is one provider of a private cloud PaaS for .NET and Java. Enterprise PaaS Examples: Apprenda Common PaaS Use-Case: Increases developer productivity and utilization rates while also decreasing an application\u2019s time-to-market Technology Analyst Examples: Richard Watson (Gartner), Eric Knipp (Gartner), Yefim Natis (Gartner), Stefan Ried (Forrester), John Rymer (Forrester)","title":"PAAS :  Platform as a services"},{"location":"cc/UnitII_Comparison/#iaas-infrastructure-as-a-service","text":"Cloud infrastructure services, known as Infrastructure as a Service (IaaS), are self-service models for accessing, monitoring, and managing remote datacenter infrastructures, such as compute (virtualized or bare metal), storage, networking, and networking services (e.g. firewalls). Instead of having to purchase hardware outright, users can purchase IaaS based on consumption, similar to electricity or other utility billing. Compared to SaaS and PaaS , IaaS users are responsible for managing applications, data, runtime, middleware, and OSes. Providers still manage virtualization, servers, hard drives, storage, and networking. Many IaaS providers now offer databases, messaging queues, and other services above the virtualization layer as well. Some tech analysts draw a distinction here and use the IaaS+ moniker for these other options. What users gain with IaaS is infrastructure on top of which they can install any required platform. Users are responsible for updating these if new versions are released. IaaS Examples: Amazon Web Services (AWS), Cisco Metapod, Microsoft Azure, Google Compute Engine (GCE), Joyent Common IaaS Use-Case: Extends current data center infrastructure for temporary workloads (e.g. increased Christmas holiday site traffic) Technology Analyst Examples: Kyle Hilgendorf (Gartner), Drue Reeves (Gartner), Lydia Leong (Gartner), Doug Toombs (Gartner), Gregor Petri (Gartner EU), Tiny Haynes (Gartner EU), Jeffery Hammond (Forrester), James Staten (Forrester)","title":"IAAS : Infrastructure As a Service"},{"location":"cc/UnitII_GCP/","text":"Google Cloud Platform Link Google App Engine Link https://developers.google.com/appengine/docs/whatisgoogleappengine Introduction Link Google App Engine is a Platform as a Service ( PaaS ) product that provides Web app developers and enterprises with access to Google's scalable hosting and tier 1 Internet service. Google App Engine provides more infrastructure than other scalable hosting services such as Amazon Elastic Compute Cloud ( EC2 ). The App Engine also eliminates some system administration and developmental tasks to make it easier to write scalable applications. Google App Engine is free up to a certain amount of resource usage. Users exceeding the per-day or per-minute usage rates for CPU resources, storage, number of API calls or requests and concurrent requests can pay for more of these resources. App Engine offers you a choice between two environments for Java applications: standard environment and flexible environment. Both environments have the same code-centric developer workflow, scale quickly and efficiently to handle increasing demand, and enable you to use Google\u2019s proven serving technology to build your web, mobile, and IoT applications quickly and with minimal operational overhead. While the available environments have a lot in common, they differ in a few important ways. Java on Google App Engine Link App Engine offers you a choice between two environments for Java applications: standard environment and flexible environment. Both environments have the same code-centric developer workflow, scale quickly and efficiently to handle increasing demand, and enable you to use Google\u2019s proven serving technology to build your web, mobile, and IoT applications quickly and with minimal operational overhead. While the available environments have a lot in common, they differ in a few important ways. Choose your preferred environment Link Standard environment Link Optimized to scale nearly instantaneously to handle huge traffic spikes. Most cost-effective for applications that have significant periods where they are not serving traffic. OpenJDK 8-based Java runtime supports the standard public Java library (no whitelist). Doesn't impose a security manager--your code won't be restricted by Java permissions issues. Java 8 runtime documentation Flexible environment Link Full open source language runtimes. Use any framework, library, or binary of your choice. Code is portable to anywhere that supports Docker containers. Most cost-effective for applications that serve traffic continuously. Java 8/9 runtime documentation Services Link The App Engine provides several services. For example the Blobstore allows to upload and store and serve large data objects (blobs) with a limit of 2 Gigabyte. To create a blob you upload a file via an HTTP request. GAE lets users run web applications on Google\u2019s infrastructure GAE data storage options are: Datastore* : a* NoSQL schemaless object datastore Google Cloud SQL: Relational SQL database service Google Cloud Storage: Storage service for objects and files All applications on GAE can use up to 1 GB of storage and enough CPU and bandwidth to support an efficient application serving around 5 million page views a month for free. Three runtime environments are supported: Java , Python and Go . Developing Java Applications on GAE Link The easiest way to develop Java applications for GAE is to use the Eclipse development environment with the Google plugin for Eclipse. App Engine Java applications use the Java Servlet standard for interacting with the web server environment. An application\u2019s files, including compiled classes, JARs, static files and configuration files, are arranged in a directory structure using the WAR standard layout for Java web applications. Developing Java Applications on GAE Link The App Engine SDK includes a web server application to test applications. The server simulates the complete GAE environment. The project can be run using the \u201c Debug As > Web Application \u201d option of Eclipse or using Ant. After running the server, the application can be tested by visiting the server\u2019s URL in a Web browser. Uploading an Application to GAE Link Applications are created and managed using the Administration Console at https://appengine.google.com . Once an application ID is registered for an application, the application can be uploaded to GAE using the Eclipse plugin or a command-line tool in the SDK. After uploading, the application can be accessed from a Web browser. If a free appspot.com account was used for registration, the URL for the application will be http://app_id.appspot.com/ , where app_id the application id assigned during registration. AppEngine Features Link Popular Languages : Build your application in Node.js, Java, Ruby, C#, Go, Python, or PHP\u2014or bring your own language runtime Open & Flexible: Custom runtimes allow you to bring any library and framework to App Engine by supplying a Docker container Fully Managed : A fully managed environment lets you focus on code while App Engine manages infrastructure concerns Monitoring, Logging & Diagnostics : Google Stackdriver gives you powerful application diagnostics to debug and monitor the health and performance of your app Application Versioning : Easily host different versions of your app, easily create development, test, staging, and production environments Traffic Splitting : Route incoming requests to different app versions, A/B test and do incremental feature rollouts Application Security : Help safeguard your application by defining access rules with App Engine firewall and leverage managed SSL/TLS certificates* by default on your custom domain at no additional cost Services Ecosystem: Tap a growing ecosystem of GCP services from your app including an excellent suite of cloud developer tools","title":"Google Cloud Platform"},{"location":"cc/UnitII_GCP/#google-cloud-platform","text":"","title":"Google Cloud Platform"},{"location":"cc/UnitII_GCP/#google-app-engine","text":"https://developers.google.com/appengine/docs/whatisgoogleappengine","title":"Google App Engine"},{"location":"cc/UnitII_GCP/#introduction","text":"Google App Engine is a Platform as a Service ( PaaS ) product that provides Web app developers and enterprises with access to Google's scalable hosting and tier 1 Internet service. Google App Engine provides more infrastructure than other scalable hosting services such as Amazon Elastic Compute Cloud ( EC2 ). The App Engine also eliminates some system administration and developmental tasks to make it easier to write scalable applications. Google App Engine is free up to a certain amount of resource usage. Users exceeding the per-day or per-minute usage rates for CPU resources, storage, number of API calls or requests and concurrent requests can pay for more of these resources. App Engine offers you a choice between two environments for Java applications: standard environment and flexible environment. Both environments have the same code-centric developer workflow, scale quickly and efficiently to handle increasing demand, and enable you to use Google\u2019s proven serving technology to build your web, mobile, and IoT applications quickly and with minimal operational overhead. While the available environments have a lot in common, they differ in a few important ways.","title":"Introduction"},{"location":"cc/UnitII_GCP/#java-on-google-app-engine","text":"App Engine offers you a choice between two environments for Java applications: standard environment and flexible environment. Both environments have the same code-centric developer workflow, scale quickly and efficiently to handle increasing demand, and enable you to use Google\u2019s proven serving technology to build your web, mobile, and IoT applications quickly and with minimal operational overhead. While the available environments have a lot in common, they differ in a few important ways.","title":"Java on Google App Engine"},{"location":"cc/UnitII_GCP/#choose-your-preferred-environment","text":"","title":"Choose your preferred environment"},{"location":"cc/UnitII_GCP/#standard-environment","text":"Optimized to scale nearly instantaneously to handle huge traffic spikes. Most cost-effective for applications that have significant periods where they are not serving traffic. OpenJDK 8-based Java runtime supports the standard public Java library (no whitelist). Doesn't impose a security manager--your code won't be restricted by Java permissions issues. Java 8 runtime documentation","title":"Standard environment"},{"location":"cc/UnitII_GCP/#flexible-environment","text":"Full open source language runtimes. Use any framework, library, or binary of your choice. Code is portable to anywhere that supports Docker containers. Most cost-effective for applications that serve traffic continuously. Java 8/9 runtime documentation","title":"Flexible environment"},{"location":"cc/UnitII_GCP/#services","text":"The App Engine provides several services. For example the Blobstore allows to upload and store and serve large data objects (blobs) with a limit of 2 Gigabyte. To create a blob you upload a file via an HTTP request. GAE lets users run web applications on Google\u2019s infrastructure GAE data storage options are: Datastore* : a* NoSQL schemaless object datastore Google Cloud SQL: Relational SQL database service Google Cloud Storage: Storage service for objects and files All applications on GAE can use up to 1 GB of storage and enough CPU and bandwidth to support an efficient application serving around 5 million page views a month for free. Three runtime environments are supported: Java , Python and Go .","title":"Services"},{"location":"cc/UnitII_GCP/#developing-java-applications-on-gae","text":"The easiest way to develop Java applications for GAE is to use the Eclipse development environment with the Google plugin for Eclipse. App Engine Java applications use the Java Servlet standard for interacting with the web server environment. An application\u2019s files, including compiled classes, JARs, static files and configuration files, are arranged in a directory structure using the WAR standard layout for Java web applications.","title":"Developing Java Applications on GAE"},{"location":"cc/UnitII_GCP/#developing-java-applications-on-gae_1","text":"The App Engine SDK includes a web server application to test applications. The server simulates the complete GAE environment. The project can be run using the \u201c Debug As > Web Application \u201d option of Eclipse or using Ant. After running the server, the application can be tested by visiting the server\u2019s URL in a Web browser.","title":"Developing Java Applications on GAE"},{"location":"cc/UnitII_GCP/#uploading-an-application-to-gae","text":"Applications are created and managed using the Administration Console at https://appengine.google.com . Once an application ID is registered for an application, the application can be uploaded to GAE using the Eclipse plugin or a command-line tool in the SDK. After uploading, the application can be accessed from a Web browser. If a free appspot.com account was used for registration, the URL for the application will be http://app_id.appspot.com/ , where app_id the application id assigned during registration.","title":"Uploading an Application to GAE"},{"location":"cc/UnitII_GCP/#appengine-features","text":"Popular Languages : Build your application in Node.js, Java, Ruby, C#, Go, Python, or PHP\u2014or bring your own language runtime Open & Flexible: Custom runtimes allow you to bring any library and framework to App Engine by supplying a Docker container Fully Managed : A fully managed environment lets you focus on code while App Engine manages infrastructure concerns Monitoring, Logging & Diagnostics : Google Stackdriver gives you powerful application diagnostics to debug and monitor the health and performance of your app Application Versioning : Easily host different versions of your app, easily create development, test, staging, and production environments Traffic Splitting : Route incoming requests to different app versions, A/B test and do incremental feature rollouts Application Security : Help safeguard your application by defining access rules with App Engine firewall and leverage managed SSL/TLS certificates* by default on your custom domain at no additional cost Services Ecosystem: Tap a growing ecosystem of GCP services from your app including an excellent suite of cloud developer tools","title":"AppEngine Features"},{"location":"cc/UnitII_IAAS/","text":"IAAS (Infrastructure as a Service) Link Introduction Link Infrastructure as a Service (IaaS) is one of the \u201cEverything as a Service\u201d trends. IaaS is easier to understand if we refer it as Hardware as a Service (i.e. instead of constructing our own server farms, a small firm could consider paying to use infrastructure provided by professional enterprises). Companies such as Google, Microsoft and IBM are involved in offering such services. Large-scale computer hardware and high computer network connectivity are essential components of an effective IaaS. The IaaS is categorized into: Computation as a Service (CaaS) , in which virtual machine based servers are rented and charged per hour based on the virtual machine capacity \u2013 mainly CPU and RAM size, features of the virtual machine, OS and deployed software; and Data as a Service (DaaS) , in which unlimited storage space is used to store the user\u2019s data regardless of its type, charged per GByte for data size and data transfer. In this section we will describe some popular IaaS systems such as Amazon EC2 (2010), GoGrid(2010),AmazonS3(2010)andRackspace (2010).Wethencompare three widely used CaaS systems. A category of cloud services which provides capability to provision processing, storage, intra-cloud network connectivity services, and other fundamental computing resources of the cloud infrastructure. Cloud infrastructure services, known as Infrastructure as a Service (IaaS), are self-service models for accessing, monitoring, and managing remote data-center infrastructures, such as compute (virtualization or bare metal), storage, networking, and networking services (e.g. firewalls). Instead of having to purchase hardware outright, users can purchase IaaS based on consumption, similar to electricity or other utility billing. Compared to SaaS, IaaS users are responsible for managing applications, data, runtime, middleware, and OSes. Providers still manage virtualization, servers, hard drives, storage, and networking. Many IaaS providers now offer databases, messaging queues, and other services above the virtualization layer as well. Some tech analysts draw a distinction here and use the IaaS+ moniker for these other options. What users gain with IaaS is infrastructure on top of which they can install any required platform. Users are responsible for updating these if new versions are released. IAAS is the base layer and typically provide access to networking, virtual machines, storage. The client has the highest level of flexibility and management over resources compared to PAAS and SAAS. Infrastructure as a Service, sometimes abbreviated as IaaS, contains the basic building blocks for cloud IT and typically provide access to networking features, computers (virtual or on dedicated hardware), and data storage space. Infrastructure as a Service provides you with the highest level of flexibility and management control over your IT resources and is most similar to existing IT resources that many IT departments and developers are familiar with today. IaaS provides access to fundamental resources such as physical machines, virtual machines, virtual storage, etc., Apart from these resources, the IaaS also offers: Virtual machine disk storage Virtual local area network (VLANs) Load balancers IP addresses Software bundles All of the above resources are made available to end user via server virtualization. Moreover, these resources are accessed by the customers as if they own them. Benefits Link IaaS allows the cloud provider to freely locate the infrastructure over the Internet in a cost-effective manner. Some of the key benefits of IaaS are listed below: Full Control of the computing resources through Administrative Access to VMs. Flexible and Efficient renting of Computer Hardware. Portability, Interoperability with Legacy Applications. Full Control Over Computing Resources Through Administrative Access to VMs IaaS allows the consumer to access computing resources through administrative access to virtual machines in the following manner: Consumer issues administrative command to cloud provider to run the virtual machine or to save data on cloud's server. Consumer issues administrative command to virtual machines they owned to start web server or installing new applications. Flexible and Efficient Renting of Computer Hardware IaaS resources such as virtual machines, storages, bandwidth, IP addresses, monitoring services, firewalls, etc., all are made available to the consumers on rent. The consumer has to pay based the length of time a consumer retains a resource. Also with administrative access to virtual machines, the consumer can also run any software, even a custom operating system. Portability, Interoperability, Interoperability with legacy Applications It is possible to maintain legacy between applications and workloads between IaaS clouds. For example, network applications such as web server, e-mail server that normally runs on consumer-owned server hardware can also be run from VMs in IaaS cloud. Other Benefits Scalability ; resource is available as and when you it, therefore there are no delays in expanding capacity or any wastage of unused capability No hardware CAPEX ; the underlying physical hardware supporting IaaS is set up and maintained by a cloud provider, saving you time and cost Utility style costing ; the service can be accessed on demand and you only pay for the resource that you actually use Location independence ; the service can be accessed from anywhere using the Internet, so long as the security protocol of the cloud lets it Physical security of data center location ; services available through a public cloud, or private clouds hosted externally with the cloud provider No single point of failure ; the multitude of hardware resources means that should one aspect of the service fail the service will be unaffected On demand computing resources - Eliminate the need of far ahead planning No up-front commitment Start small and grow as required No contract, Only credit card! Pay for what you use No maintenance Measured service Reliability Issues Link IaaS shares issues with PaaS and SaaS, such as Network dependence and browser based risks. It also have some specific issues associated with it. These issues are mentioned in the following diagram: Compatibility with legacy security vulnerabilities : Because IaaS offers the consumer to run legacy software in provider's infrastructure, therefore it exposes consumers to all of the security vulnerabilities of such legacy software. Virtual machine sprawl : The VM can become out of date with respect to security updates because IaaS allows the consumer to operate the virtual machines in running, suspended and off state. However, the provider can automatically update such VMs, but this mechanism is hard and complex. Robustness of VM Level isolation: IaaS offers an isolated environment to individual consumers through hypervisor. Hypervisor is a software layer that includes hardware support for virtualization to split a physical computer into multiple virtual machines. Data erase practices: The consumer uses virtual machines that in turn uses the common disk resources provided by the cloud provider. When the consumer releases the resource, the cloud provider must ensure that next consumer to rent the resource does not observe data residue from previous consumer. Characteristics Link Here are the characteristics of IaaS service model: Virtual machines with pre-installed software. Virtual machines with pre-installed Operating Systems such as Windows, Linux, and Solaris. On-demand availability of resources. Allows to store copies of particular data in different locations. The computing resources can be easily scaled up and down. IaaS Examples: Amazon Web Services (AWS), Cisco Metapod, Microsoft Azure, Google Compute Engine (GCE), Joyent Common IaaS Use-Case: Extends current data center infrastructure for temporary workloads (e.g. increased Christmas holiday site traffic) Technology Analyst Examples: Kyle Hilgendorf (Gartner), Drue Reeves (Gartner), Lydia Leong (Gartner), Doug Toombs (Gartner), Gregor Petri (Gartner EU), Tiny Haynes (Gartner EU), Jeffery Hammond (Forrester), James Staten (Forrester)","title":"IAAS (Infrastructure as a Service)"},{"location":"cc/UnitII_IAAS/#iaas-infrastructure-as-a-service","text":"","title":"IAAS (Infrastructure as a Service)"},{"location":"cc/UnitII_IAAS/#introduction","text":"Infrastructure as a Service (IaaS) is one of the \u201cEverything as a Service\u201d trends. IaaS is easier to understand if we refer it as Hardware as a Service (i.e. instead of constructing our own server farms, a small firm could consider paying to use infrastructure provided by professional enterprises). Companies such as Google, Microsoft and IBM are involved in offering such services. Large-scale computer hardware and high computer network connectivity are essential components of an effective IaaS. The IaaS is categorized into: Computation as a Service (CaaS) , in which virtual machine based servers are rented and charged per hour based on the virtual machine capacity \u2013 mainly CPU and RAM size, features of the virtual machine, OS and deployed software; and Data as a Service (DaaS) , in which unlimited storage space is used to store the user\u2019s data regardless of its type, charged per GByte for data size and data transfer. In this section we will describe some popular IaaS systems such as Amazon EC2 (2010), GoGrid(2010),AmazonS3(2010)andRackspace (2010).Wethencompare three widely used CaaS systems. A category of cloud services which provides capability to provision processing, storage, intra-cloud network connectivity services, and other fundamental computing resources of the cloud infrastructure. Cloud infrastructure services, known as Infrastructure as a Service (IaaS), are self-service models for accessing, monitoring, and managing remote data-center infrastructures, such as compute (virtualization or bare metal), storage, networking, and networking services (e.g. firewalls). Instead of having to purchase hardware outright, users can purchase IaaS based on consumption, similar to electricity or other utility billing. Compared to SaaS, IaaS users are responsible for managing applications, data, runtime, middleware, and OSes. Providers still manage virtualization, servers, hard drives, storage, and networking. Many IaaS providers now offer databases, messaging queues, and other services above the virtualization layer as well. Some tech analysts draw a distinction here and use the IaaS+ moniker for these other options. What users gain with IaaS is infrastructure on top of which they can install any required platform. Users are responsible for updating these if new versions are released. IAAS is the base layer and typically provide access to networking, virtual machines, storage. The client has the highest level of flexibility and management over resources compared to PAAS and SAAS. Infrastructure as a Service, sometimes abbreviated as IaaS, contains the basic building blocks for cloud IT and typically provide access to networking features, computers (virtual or on dedicated hardware), and data storage space. Infrastructure as a Service provides you with the highest level of flexibility and management control over your IT resources and is most similar to existing IT resources that many IT departments and developers are familiar with today. IaaS provides access to fundamental resources such as physical machines, virtual machines, virtual storage, etc., Apart from these resources, the IaaS also offers: Virtual machine disk storage Virtual local area network (VLANs) Load balancers IP addresses Software bundles All of the above resources are made available to end user via server virtualization. Moreover, these resources are accessed by the customers as if they own them.","title":"Introduction"},{"location":"cc/UnitII_IAAS/#benefits","text":"IaaS allows the cloud provider to freely locate the infrastructure over the Internet in a cost-effective manner. Some of the key benefits of IaaS are listed below: Full Control of the computing resources through Administrative Access to VMs. Flexible and Efficient renting of Computer Hardware. Portability, Interoperability with Legacy Applications. Full Control Over Computing Resources Through Administrative Access to VMs IaaS allows the consumer to access computing resources through administrative access to virtual machines in the following manner: Consumer issues administrative command to cloud provider to run the virtual machine or to save data on cloud's server. Consumer issues administrative command to virtual machines they owned to start web server or installing new applications. Flexible and Efficient Renting of Computer Hardware IaaS resources such as virtual machines, storages, bandwidth, IP addresses, monitoring services, firewalls, etc., all are made available to the consumers on rent. The consumer has to pay based the length of time a consumer retains a resource. Also with administrative access to virtual machines, the consumer can also run any software, even a custom operating system. Portability, Interoperability, Interoperability with legacy Applications It is possible to maintain legacy between applications and workloads between IaaS clouds. For example, network applications such as web server, e-mail server that normally runs on consumer-owned server hardware can also be run from VMs in IaaS cloud. Other Benefits Scalability ; resource is available as and when you it, therefore there are no delays in expanding capacity or any wastage of unused capability No hardware CAPEX ; the underlying physical hardware supporting IaaS is set up and maintained by a cloud provider, saving you time and cost Utility style costing ; the service can be accessed on demand and you only pay for the resource that you actually use Location independence ; the service can be accessed from anywhere using the Internet, so long as the security protocol of the cloud lets it Physical security of data center location ; services available through a public cloud, or private clouds hosted externally with the cloud provider No single point of failure ; the multitude of hardware resources means that should one aspect of the service fail the service will be unaffected On demand computing resources - Eliminate the need of far ahead planning No up-front commitment Start small and grow as required No contract, Only credit card! Pay for what you use No maintenance Measured service Reliability","title":"Benefits"},{"location":"cc/UnitII_IAAS/#issues","text":"IaaS shares issues with PaaS and SaaS, such as Network dependence and browser based risks. It also have some specific issues associated with it. These issues are mentioned in the following diagram: Compatibility with legacy security vulnerabilities : Because IaaS offers the consumer to run legacy software in provider's infrastructure, therefore it exposes consumers to all of the security vulnerabilities of such legacy software. Virtual machine sprawl : The VM can become out of date with respect to security updates because IaaS allows the consumer to operate the virtual machines in running, suspended and off state. However, the provider can automatically update such VMs, but this mechanism is hard and complex. Robustness of VM Level isolation: IaaS offers an isolated environment to individual consumers through hypervisor. Hypervisor is a software layer that includes hardware support for virtualization to split a physical computer into multiple virtual machines. Data erase practices: The consumer uses virtual machines that in turn uses the common disk resources provided by the cloud provider. When the consumer releases the resource, the cloud provider must ensure that next consumer to rent the resource does not observe data residue from previous consumer.","title":"Issues"},{"location":"cc/UnitII_IAAS/#characteristics","text":"Here are the characteristics of IaaS service model: Virtual machines with pre-installed software. Virtual machines with pre-installed Operating Systems such as Windows, Linux, and Solaris. On-demand availability of resources. Allows to store copies of particular data in different locations. The computing resources can be easily scaled up and down. IaaS Examples: Amazon Web Services (AWS), Cisco Metapod, Microsoft Azure, Google Compute Engine (GCE), Joyent Common IaaS Use-Case: Extends current data center infrastructure for temporary workloads (e.g. increased Christmas holiday site traffic) Technology Analyst Examples: Kyle Hilgendorf (Gartner), Drue Reeves (Gartner), Lydia Leong (Gartner), Doug Toombs (Gartner), Gregor Petri (Gartner EU), Tiny Haynes (Gartner EU), Jeffery Hammond (Forrester), James Staten (Forrester)","title":"Characteristics"},{"location":"cc/UnitII_Implementations/","text":"Cloud Implementations Link Cloud Computing Architecture Client Server Architecture Link Consists of one or more load balanced servers servicing requests sent by the clients Clients and servers exchange message in request-response fashion Client is often a thin client or a machine with low computational capabilities Server could be a load balanced cluster or a stand alone machine. Three Tier Client-Server Architecture Client Server model vs. Cloud model Client Server Model Cloud Computing Model Simple service model where server services client requests Variety of complex service models, such as, IaaS, PaaS, SaaS can be provided May/may not be load balanced Load balanced Scalable to some extent in a cluster environment. Theoretically infinitely scalable No concept of virtualization Virtualization is the core concept Cloud Services Cloud service models Introduction Link Cloud computing is providing developers and IT departments with the ability to focus on what matters most and avoid undifferentiated work like procurement, maintenance, and capacity planning. As cloud computing has grown in popularity, several different models and deployment strategies have emerged to help meet specific needs of different users. Each type of cloud service, and deployment method, provides you with different levels of control, flexibility, and management. Understanding the differences between Infrastructure as a Service, Platform as a Service, and Software as a Service, as well as what deployment strategies you can use, can help you decide what set of services is right for your needs. Cloud Computing Service Models There are three main models for cloud computing. Each model represents a different part of the cloud computing stack. Different people may have different requirements like deployment of code, not ready to manage the underlying infrastructure or simply want to use automated services. Cloud providing all kind of services to users achieve their goals. Cloud offering 3 types of service models as follows: On-premises IT infrastructure is like owning a car. When you buy a car, you\u2019re responsible for its maintenance, and upgrading means buying a new car. IaaS is like leasing a car. When you lease a car, you choose the car you want and drive it wherever you wish, but the car isn\u2019t yours. Want an upgrade? Just lease a different car! PaaS is like taking a taxi. You don\u2019t drive a taxi yourself, but simply tell the driver where you need to go and relax in the back seat. SaaS is like going by bus. Buses have assigned routes, and you share the ride with other passengers. IAAS (Infrastructure As A Services) : IaaS is the hardware and software that powers it all servers, storage, network, operating systems PAAS (Platform as a Service) : PaaS is the set of tools and services designed to make coding and deploying applications quickly and efficiently SAAS (Software As a Service) : SaaS applications are designed for end users and are delivered over the web Others CAAS Container as a Service (CaaS): Is a form of container-based virtualization in which container engines, orchestration and the underlying compute resources are delivered to users as a service from a cloud provider. Google Container Engine(GKE), AWS (ECS), Azure (ACS) and Pivotal (PKS) are some examples of CaaS. Function as a Service (FaaS): It provides a platform allowing customers to develop, run, and manage application functionalities without the complexity of building and maintaining the infrastructure. AWS (Lamda), Google Cloud Function are some examples of Faas Based on cloud services types we can say EC2 belongs to Infrastructure as a Service. Because when a user working with EC2, he/she responsible for the application, data, choosing the instance (OS, patching) and AWS responsible for the storage, networking, servers & virtualization. When you try to launch an EC2 instance you can choose AMI with related OS, attach different EBS volumes and you will get control of resources( limited network components i.e security groups, NACL) without maintaining the infrastructure. AWS Elastic Compute Service or EC2 is IaaS(Infrastructure as a Service). This is because Amazon takes the responsibility of networking, storage, server and virtualization and the user is responsible for managing the Operating System, middleware, runtime, data and application. In PaaS aka **Platform as a Service**the user only needs to take care of data and application, the management of rest of the layers lies in hands of the service provider. AWS Elastic BeanStalk is PaaS.","title":"Cloud Implementations"},{"location":"cc/UnitII_Implementations/#cloud-implementations","text":"Cloud Computing Architecture","title":"Cloud Implementations"},{"location":"cc/UnitII_Implementations/#client-server-architecture","text":"Consists of one or more load balanced servers servicing requests sent by the clients Clients and servers exchange message in request-response fashion Client is often a thin client or a machine with low computational capabilities Server could be a load balanced cluster or a stand alone machine. Three Tier Client-Server Architecture Client Server model vs. Cloud model Client Server Model Cloud Computing Model Simple service model where server services client requests Variety of complex service models, such as, IaaS, PaaS, SaaS can be provided May/may not be load balanced Load balanced Scalable to some extent in a cluster environment. Theoretically infinitely scalable No concept of virtualization Virtualization is the core concept Cloud Services Cloud service models","title":"Client Server Architecture"},{"location":"cc/UnitII_Implementations/#introduction","text":"Cloud computing is providing developers and IT departments with the ability to focus on what matters most and avoid undifferentiated work like procurement, maintenance, and capacity planning. As cloud computing has grown in popularity, several different models and deployment strategies have emerged to help meet specific needs of different users. Each type of cloud service, and deployment method, provides you with different levels of control, flexibility, and management. Understanding the differences between Infrastructure as a Service, Platform as a Service, and Software as a Service, as well as what deployment strategies you can use, can help you decide what set of services is right for your needs. Cloud Computing Service Models There are three main models for cloud computing. Each model represents a different part of the cloud computing stack. Different people may have different requirements like deployment of code, not ready to manage the underlying infrastructure or simply want to use automated services. Cloud providing all kind of services to users achieve their goals. Cloud offering 3 types of service models as follows: On-premises IT infrastructure is like owning a car. When you buy a car, you\u2019re responsible for its maintenance, and upgrading means buying a new car. IaaS is like leasing a car. When you lease a car, you choose the car you want and drive it wherever you wish, but the car isn\u2019t yours. Want an upgrade? Just lease a different car! PaaS is like taking a taxi. You don\u2019t drive a taxi yourself, but simply tell the driver where you need to go and relax in the back seat. SaaS is like going by bus. Buses have assigned routes, and you share the ride with other passengers. IAAS (Infrastructure As A Services) : IaaS is the hardware and software that powers it all servers, storage, network, operating systems PAAS (Platform as a Service) : PaaS is the set of tools and services designed to make coding and deploying applications quickly and efficiently SAAS (Software As a Service) : SaaS applications are designed for end users and are delivered over the web Others CAAS Container as a Service (CaaS): Is a form of container-based virtualization in which container engines, orchestration and the underlying compute resources are delivered to users as a service from a cloud provider. Google Container Engine(GKE), AWS (ECS), Azure (ACS) and Pivotal (PKS) are some examples of CaaS. Function as a Service (FaaS): It provides a platform allowing customers to develop, run, and manage application functionalities without the complexity of building and maintaining the infrastructure. AWS (Lamda), Google Cloud Function are some examples of Faas Based on cloud services types we can say EC2 belongs to Infrastructure as a Service. Because when a user working with EC2, he/she responsible for the application, data, choosing the instance (OS, patching) and AWS responsible for the storage, networking, servers & virtualization. When you try to launch an EC2 instance you can choose AMI with related OS, attach different EBS volumes and you will get control of resources( limited network components i.e security groups, NACL) without maintaining the infrastructure. AWS Elastic Compute Service or EC2 is IaaS(Infrastructure as a Service). This is because Amazon takes the responsibility of networking, storage, server and virtualization and the user is responsible for managing the Operating System, middleware, runtime, data and application. In PaaS aka **Platform as a Service**the user only needs to take care of data and application, the management of rest of the layers lies in hands of the service provider. AWS Elastic BeanStalk is PaaS.","title":"Introduction"},{"location":"cc/UnitII_Introduction/","text":"Cloud Implementations Amazon Web Services - IaaS, The Elastic Compute Cloud (EC2), The Simple Storage Service (S3), The Simple Queuing Services (SQS), VMware vCloud - IaaS, vCloud Express, Google AppEngine - PaaS, Cloud Service Model Patterns of this category describe different cloud types and how providers host the infrastructure to host them. IAAS PAAS SAAS Cloud Deployment Model Link Patterns of this category compare and categorize different Cloud Service Models according to the layers of the application stack for which they provide IT resources. Public Cloud Private Cloud Community Cloud Hybrid Cloud","title":"UnitII Introduction"},{"location":"cc/UnitII_Introduction/#cloud-deployment-model","text":"Patterns of this category compare and categorize different Cloud Service Models according to the layers of the application stack for which they provide IT resources. Public Cloud Private Cloud Community Cloud Hybrid Cloud","title":"Cloud Deployment Model"},{"location":"cc/UnitII_Java/","text":"The Java Runtime Environment Link A runtime environment is the execution environment provided to an application or software by the operating system. In a runtime environment, the application can send instructions or commands to the processor and access other system resources such as RAM, which otherwise is not possible as most programming languages used are high level languages. The Java Runtime Environment (JRE) is a set of software tools for development of Java applications. It combines the Java Virtual Machine (JVM), platform core classes and supporting libraries. JRE is part of the Java Development Kit (JDK), but can be downloaded separately. JRE was originally developed by Sun Microsystems Inc., a wholly-owned subsidiary of Oracle Corporation. Java Environment Link Tools JDK Tools you will need Link For performing the java program, you will need a hardware and Software Hardware Processor : Pentium200-MHz computer Memory : minimumof 64 MB of RAM (128 MB of RAM recommended). Software You also will need the following software\u2019s: Operating System: Linux or Windows 95/98/2000/XP operating system. Java JDK Microsoft Notepad or any other ASCII text editor Download JDK Link For running Java programs in your system, you will have to download and install JDK kit from here ( http://www.oracle.com/technetwork/java/javase/downloads/index.html ) (current version is jdk 1.7). Setting Class path Link Java is freely available on Oracle's Website. Download the latest version of JDK () (Java Development Kit) on your operating system. Install JDK on your machine. Once you have installed Java on your machine you would need to set environment variable to point to correct installation directory. Setting up path for windows ( 2000/XP/vista/Window 7,8 ) Assuming that you have installed Java in C: Program files/ Java / JDK directory Step 1: Right click on my computer and select properties. Step 2: Go to the Advance System Settings tab. Step 3: Click on Environment Variables button. Step 4: Now alter the path variable so that it also contains the path to JDK installed directory. For e.g:- Change C:\\windows/ system 32. to C:\\windows/system 32; C:\\program files / Java/ JDK. Setting up path for Linux , Unix , Solaris, free BSD Assuming that you have installed Java in /home/java/JDK directory, do the following: Step 1: Environment variable path should be set to point where java binaries have been installed. Refer to your shell if you have trouble doing this. For Example: If you use bash as your shell, then you would add following line to the end bash mc: export PATH=/ Path/to/java Popular Java Editors Link To write your Java programs, you will need a text editor. There are even more sophisticated IDEsavailable in the market. But for now,you can consider one of the following: Notepad: On Windows machine, you can use any simple text editor like Notepad (Recommended for this tutorial), TextPad. Netbeans : Isa Java IDE that is open-source and free which can be downloaded from http://www.netbeans.org/index.html . Eclipse:Is also a Java IDE developed by the eclipse open-source community and can be downloaded from http://www.eclipse.org/ . Java Development Kit(JDK) Link Java is a recently developed, concurrent, class-based, object-oriented programming and runtime environment, consisting of: A programming language An API specification A virtual machine specification The JDK has as its primary components a collection of programming tools,including: appletviewer\u2013 this tool can be used to run and debug Java applets without a web browser apt \u2013 theannotation-processing tool extcheck\u2013 a utility that detects JAR file conflicts idlj \u2013the IDL-to-Java compiler. This utility generates Java bindings from a givenJava IDL file. jabswitch\u2013 the Java Access Bridge. Exposes assistive technologies on Microsoft Windows systems. java \u2013the loader for Java applications. This tool is an interpreter and can interpretthe class files generated by the javaccompiler. Now a single launcher is used for both development and deployment.The old deployment launcher, jre, no longer comes with Sun JDK, and instead ithas been replaced by this new java loader. javac \u2013the Java compiler, which converts source code into Java bytecode javadoc \u2013the documentation generator, which automatically generates documentation fromsource code comments jar \u2013 thearchiver, which packages related class libraries into a single JAR file. Thistool also helps manage JAR files. javafxpackager\u2013 tool to package and sign JavaFX applications jarsigner\u2013 the jar signing and verification tool javah \u2013the C header and stub generator, used to write native methods javap \u2013the class file disassembler javaws \u2013the Java Web Start launcher for JNLP applications JConsole\u2013 Java Monitoring and Management Console jdb \u2013 thedebugger jhat\u2013Java Heap Analysis Tool (experimental) jinfo \u2013This utility gets configuration information from a running Java process orcrash dump. (experimental) jmap \u2013This utility outputs the memory map for Java and can print shared object memorymaps or heap memory details of a given process or core dump. (experimental) jmc \u2013Java Mission Control jps \u2013Java Virtual Machine Process Status Tool lists the instrumented HotSpot JavaVirtual Machines (JVMs) on the target system. (experimental) jrunscript\u2013 Java command-line script shell. jstack \u2013utility that prints Java stack traces of Java threads (experimental) jstat \u2013Java Virtual Machine statistics monitoring tool (experimental) jstatd \u2013 jstatdaemon (experimental) keytool \u2013tool for manipulating the keystore pack200 \u2013JAR compression tool policytool\u2013 the policy creation and management tool, which can determine policy for a Java runtime, specifying which permissions are available for code from various sources VisualVM\u2013 visual tool integrating several command-line JDK tools and light weight[clarification needed] performance and memory profiling capabilities wsimport\u2013 generates portable JAX-WS artifacts for invoking a web service. xjc \u2013 Partof the Java API for XML Binding (JAXB) API. It accepts an XML schema andgenerates Java classes. The JDK also called Java Development Kit is a super set of the JRE, and contains everything that is in the JRE, plus tools such as the compilers and debuggers necessary for developing applets and applications. Java Runtime Environment JRE Link The JRE is the software environment in which programs compiled for a typical JVM implementation can run. The runtime system includes: Code necessary to run Java programs, dynamically link native methods, manage memory, and handle exceptions Implementation of the JVM The following figure shows the JRE and its components, including a typical JVM implementation's various modules and its functional position with respect to the JRE and class libraries. The Java Runtime Environment (JRE) provides the libraries, the Java Virtual Machine, and other components to run applets and applications written in the Java programming language. JRE does not contain tools and utilities such as compilers or debuggers for developing applets and applications. Java Virtual Machine (JVM) Link Java virtual Machine(JVM) is a virtual Machine that provides runtime environment to execute java byte code. The JVM doesn't understand Java typo, that's why you compile your .java files to obtain .class files that contain the bytecodes understandable by the JVM. JVM control execution of every Java program. It enables features such as automated exception handling, Garbage-collected heap. The JVM is an abstract computing machine, having an instruction set that uses memory. Virtual machines are often used to implement a programming language. The JVM is the cornerstone of the Java programming language. It is responsible for Java's cross-platform portability and the small size of its compiled code. The Solaris JVM is used to execute Java applications. The Java compiler, javac, outputs bytecodes and puts them into a .class file. The JVM then interprets these bytecodes, which can then be executed by any JVM implementation, thus providing Java's cross-platform portability. The next two figures illustrate the traditional compile-time environment and the new portable Java compile-time environment. Sun Just-In-Time (JIT) Compiler Link The Sun Java JIT compiler, an integral part of the Solaris JVM, can accelerate execution performance many times over previous levels. Long-running, compute-intensive programs show the best performance improvement. JIT Compile Process Link When the JIT compiler environment variable is on (the default), the JVM reads the .class file for interpretation and passes it to the JIT compiler. The JIT compiler then compiles the bytecodes into native code for the platform on which it is running. The next figure illustrates the JIT compile process.","title":"The Java Runtime Environment"},{"location":"cc/UnitII_Java/#the-java-runtime-environment","text":"A runtime environment is the execution environment provided to an application or software by the operating system. In a runtime environment, the application can send instructions or commands to the processor and access other system resources such as RAM, which otherwise is not possible as most programming languages used are high level languages. The Java Runtime Environment (JRE) is a set of software tools for development of Java applications. It combines the Java Virtual Machine (JVM), platform core classes and supporting libraries. JRE is part of the Java Development Kit (JDK), but can be downloaded separately. JRE was originally developed by Sun Microsystems Inc., a wholly-owned subsidiary of Oracle Corporation.","title":"The Java Runtime Environment"},{"location":"cc/UnitII_Java/#java-environment","text":"Tools JDK","title":"Java Environment"},{"location":"cc/UnitII_Java/#tools-you-will-need","text":"For performing the java program, you will need a hardware and Software Hardware Processor : Pentium200-MHz computer Memory : minimumof 64 MB of RAM (128 MB of RAM recommended). Software You also will need the following software\u2019s: Operating System: Linux or Windows 95/98/2000/XP operating system. Java JDK Microsoft Notepad or any other ASCII text editor","title":"Tools you will need"},{"location":"cc/UnitII_Java/#download-jdk","text":"For running Java programs in your system, you will have to download and install JDK kit from here ( http://www.oracle.com/technetwork/java/javase/downloads/index.html ) (current version is jdk 1.7).","title":"Download JDK"},{"location":"cc/UnitII_Java/#setting-class-path","text":"Java is freely available on Oracle's Website. Download the latest version of JDK () (Java Development Kit) on your operating system. Install JDK on your machine. Once you have installed Java on your machine you would need to set environment variable to point to correct installation directory. Setting up path for windows ( 2000/XP/vista/Window 7,8 ) Assuming that you have installed Java in C: Program files/ Java / JDK directory Step 1: Right click on my computer and select properties. Step 2: Go to the Advance System Settings tab. Step 3: Click on Environment Variables button. Step 4: Now alter the path variable so that it also contains the path to JDK installed directory. For e.g:- Change C:\\windows/ system 32. to C:\\windows/system 32; C:\\program files / Java/ JDK. Setting up path for Linux , Unix , Solaris, free BSD Assuming that you have installed Java in /home/java/JDK directory, do the following: Step 1: Environment variable path should be set to point where java binaries have been installed. Refer to your shell if you have trouble doing this. For Example: If you use bash as your shell, then you would add following line to the end bash mc: export PATH=/ Path/to/java","title":"Setting Class path"},{"location":"cc/UnitII_Java/#popular-java-editors","text":"To write your Java programs, you will need a text editor. There are even more sophisticated IDEsavailable in the market. But for now,you can consider one of the following: Notepad: On Windows machine, you can use any simple text editor like Notepad (Recommended for this tutorial), TextPad. Netbeans : Isa Java IDE that is open-source and free which can be downloaded from http://www.netbeans.org/index.html . Eclipse:Is also a Java IDE developed by the eclipse open-source community and can be downloaded from http://www.eclipse.org/ .","title":"Popular Java Editors"},{"location":"cc/UnitII_Java/#java-development-kitjdk","text":"Java is a recently developed, concurrent, class-based, object-oriented programming and runtime environment, consisting of: A programming language An API specification A virtual machine specification The JDK has as its primary components a collection of programming tools,including: appletviewer\u2013 this tool can be used to run and debug Java applets without a web browser apt \u2013 theannotation-processing tool extcheck\u2013 a utility that detects JAR file conflicts idlj \u2013the IDL-to-Java compiler. This utility generates Java bindings from a givenJava IDL file. jabswitch\u2013 the Java Access Bridge. Exposes assistive technologies on Microsoft Windows systems. java \u2013the loader for Java applications. This tool is an interpreter and can interpretthe class files generated by the javaccompiler. Now a single launcher is used for both development and deployment.The old deployment launcher, jre, no longer comes with Sun JDK, and instead ithas been replaced by this new java loader. javac \u2013the Java compiler, which converts source code into Java bytecode javadoc \u2013the documentation generator, which automatically generates documentation fromsource code comments jar \u2013 thearchiver, which packages related class libraries into a single JAR file. Thistool also helps manage JAR files. javafxpackager\u2013 tool to package and sign JavaFX applications jarsigner\u2013 the jar signing and verification tool javah \u2013the C header and stub generator, used to write native methods javap \u2013the class file disassembler javaws \u2013the Java Web Start launcher for JNLP applications JConsole\u2013 Java Monitoring and Management Console jdb \u2013 thedebugger jhat\u2013Java Heap Analysis Tool (experimental) jinfo \u2013This utility gets configuration information from a running Java process orcrash dump. (experimental) jmap \u2013This utility outputs the memory map for Java and can print shared object memorymaps or heap memory details of a given process or core dump. (experimental) jmc \u2013Java Mission Control jps \u2013Java Virtual Machine Process Status Tool lists the instrumented HotSpot JavaVirtual Machines (JVMs) on the target system. (experimental) jrunscript\u2013 Java command-line script shell. jstack \u2013utility that prints Java stack traces of Java threads (experimental) jstat \u2013Java Virtual Machine statistics monitoring tool (experimental) jstatd \u2013 jstatdaemon (experimental) keytool \u2013tool for manipulating the keystore pack200 \u2013JAR compression tool policytool\u2013 the policy creation and management tool, which can determine policy for a Java runtime, specifying which permissions are available for code from various sources VisualVM\u2013 visual tool integrating several command-line JDK tools and light weight[clarification needed] performance and memory profiling capabilities wsimport\u2013 generates portable JAX-WS artifacts for invoking a web service. xjc \u2013 Partof the Java API for XML Binding (JAXB) API. It accepts an XML schema andgenerates Java classes. The JDK also called Java Development Kit is a super set of the JRE, and contains everything that is in the JRE, plus tools such as the compilers and debuggers necessary for developing applets and applications.","title":"Java Development Kit(JDK)"},{"location":"cc/UnitII_Java/#java-runtime-environment-jre","text":"The JRE is the software environment in which programs compiled for a typical JVM implementation can run. The runtime system includes: Code necessary to run Java programs, dynamically link native methods, manage memory, and handle exceptions Implementation of the JVM The following figure shows the JRE and its components, including a typical JVM implementation's various modules and its functional position with respect to the JRE and class libraries. The Java Runtime Environment (JRE) provides the libraries, the Java Virtual Machine, and other components to run applets and applications written in the Java programming language. JRE does not contain tools and utilities such as compilers or debuggers for developing applets and applications.","title":"Java Runtime Environment JRE"},{"location":"cc/UnitII_Java/#java-virtual-machine-jvm","text":"Java virtual Machine(JVM) is a virtual Machine that provides runtime environment to execute java byte code. The JVM doesn't understand Java typo, that's why you compile your .java files to obtain .class files that contain the bytecodes understandable by the JVM. JVM control execution of every Java program. It enables features such as automated exception handling, Garbage-collected heap. The JVM is an abstract computing machine, having an instruction set that uses memory. Virtual machines are often used to implement a programming language. The JVM is the cornerstone of the Java programming language. It is responsible for Java's cross-platform portability and the small size of its compiled code. The Solaris JVM is used to execute Java applications. The Java compiler, javac, outputs bytecodes and puts them into a .class file. The JVM then interprets these bytecodes, which can then be executed by any JVM implementation, thus providing Java's cross-platform portability. The next two figures illustrate the traditional compile-time environment and the new portable Java compile-time environment.","title":"Java Virtual Machine (JVM)"},{"location":"cc/UnitII_Java/#sun-just-in-time-jit-compiler","text":"The Sun Java JIT compiler, an integral part of the Solaris JVM, can accelerate execution performance many times over previous levels. Long-running, compute-intensive programs show the best performance improvement.","title":"Sun Just-In-Time (JIT) Compiler"},{"location":"cc/UnitII_Java/#jit-compile-process","text":"When the JIT compiler environment variable is on (the default), the JVM reads the .class file for interpretation and passes it to the JIT compiler. The JIT compiler then compiles the bytecodes into native code for the platform on which it is running. The next figure illustrates the JIT compile process.","title":"JIT Compile Process"},{"location":"cc/UnitII_PAAS/","text":"PAAS: Platform As a Services Link Introduction Link PAAS(Platform as a Service) provides flexibility to users that they no need to manage the underlying infrastructure like operating system, runtime, software maintenance, patching etc. PAAS is suitable for developers because of provider will manage OS, servers, storage, Networking. So they can only concentrate on the development of the application. Platforms as a service remove the need for organizations to manage the underlying infrastructure (usually hardware and operating systems) and allow you to focus on the deployment and management of your applications. This helps you be more efficient as you don\u2019t need to worry about resource procurement, capacity planning, software maintenance, patching, or any of the other undifferentiated heavy lifting involved in running your application. PaaS refers to cloud platforms that provide runtime environments for developing, testing, and managing applications. PaaS solutions, software developers can deploy applications, from simple to sophisticated, without needing all the related infrastructure (servers, databases, operating systems, development tools, etc). Examples of PaaS services are Heroku and Google App Engine. PaaS vendors supply a complete infrastructure for application development, while developers are in charge of the code. Just like SaaS, Platform as a Service solutions are available with a pay-as-you-go pricing model.","title":"PAAS: Platform As a Services"},{"location":"cc/UnitII_PAAS/#paas-platform-as-a-services","text":"","title":"PAAS: Platform As a Services"},{"location":"cc/UnitII_PAAS/#introduction","text":"PAAS(Platform as a Service) provides flexibility to users that they no need to manage the underlying infrastructure like operating system, runtime, software maintenance, patching etc. PAAS is suitable for developers because of provider will manage OS, servers, storage, Networking. So they can only concentrate on the development of the application. Platforms as a service remove the need for organizations to manage the underlying infrastructure (usually hardware and operating systems) and allow you to focus on the deployment and management of your applications. This helps you be more efficient as you don\u2019t need to worry about resource procurement, capacity planning, software maintenance, patching, or any of the other undifferentiated heavy lifting involved in running your application. PaaS refers to cloud platforms that provide runtime environments for developing, testing, and managing applications. PaaS solutions, software developers can deploy applications, from simple to sophisticated, without needing all the related infrastructure (servers, databases, operating systems, development tools, etc). Examples of PaaS services are Heroku and Google App Engine. PaaS vendors supply a complete infrastructure for application development, while developers are in charge of the code. Just like SaaS, Platform as a Service solutions are available with a pay-as-you-go pricing model.","title":"Introduction"},{"location":"cc/UnitII_SAAS/","text":"SAAS(Software as a Service) Link SaaS is defined as software that is deployed over the internet. With SaaS, a provider licenses an application to customers either as a service on demand, through a subscription, in a \u201cpay-as-you-go\u201d model, or (increasingly) at no charge when there is opportunity to generate revenue from streams other than the user, such as from advertisement or user list sales. SAAS(Software as a Service) is most popular and easy to use. Because service provider takes care of all the responsibilities like networking, storage, servers, firewalls, runtime, data, application. whenever client chooses cloud type as SAAS, he/she don't have any control over the resources under the application and responsibilities. Software as a Service provides you with a completed product that is run and managed by the service provider. In most cases, people referring to Software as a Service are referring to end-user applications. With a SaaS offering you do not have to think about how the service is maintained or how the underlying infrastructure is managed; you only need to think about how you will use that particular piece software. A common example of a SaaS application is web-based email where you can send and receive email without having to manage feature additions to the email product or maintaining the servers and operating systems that the email program is running on. SaaS allows people to use cloud-based web applications. In fact, email services such as Gmail and Hotmail are examples of cloud-based SaaS services. Other examples of SaaS services are office tools (Office 365 and Google Docs), customer relationship management software (Salesforce), event management software (Planning Pod), and so on. SaaS services are usually available with a pay-as-you-go (which means subscription) pricing model. All software and hardware are provided and managed by a vendor, so you don\u2019t need to install or configure anything. The application is ready to go as soon as you get your login and password. Characteristics Link Web access to commercial software Software is managed from central location Software is delivered in a \u2018one to many\u2019 model Users not required to handle software upgrades and patches Application Programming Interfaces (API) allow for integration between different pieces of software. Managed by you Managed by vendor Hosted applications Development and management tools Operating system Servers and storage Networking resources Data center","title":"SAAS(Software as a Service)"},{"location":"cc/UnitII_SAAS/#saassoftware-as-a-service","text":"SaaS is defined as software that is deployed over the internet. With SaaS, a provider licenses an application to customers either as a service on demand, through a subscription, in a \u201cpay-as-you-go\u201d model, or (increasingly) at no charge when there is opportunity to generate revenue from streams other than the user, such as from advertisement or user list sales. SAAS(Software as a Service) is most popular and easy to use. Because service provider takes care of all the responsibilities like networking, storage, servers, firewalls, runtime, data, application. whenever client chooses cloud type as SAAS, he/she don't have any control over the resources under the application and responsibilities. Software as a Service provides you with a completed product that is run and managed by the service provider. In most cases, people referring to Software as a Service are referring to end-user applications. With a SaaS offering you do not have to think about how the service is maintained or how the underlying infrastructure is managed; you only need to think about how you will use that particular piece software. A common example of a SaaS application is web-based email where you can send and receive email without having to manage feature additions to the email product or maintaining the servers and operating systems that the email program is running on. SaaS allows people to use cloud-based web applications. In fact, email services such as Gmail and Hotmail are examples of cloud-based SaaS services. Other examples of SaaS services are office tools (Office 365 and Google Docs), customer relationship management software (Salesforce), event management software (Planning Pod), and so on. SaaS services are usually available with a pay-as-you-go (which means subscription) pricing model. All software and hardware are provided and managed by a vendor, so you don\u2019t need to install or configure anything. The application is ready to go as soon as you get your login and password.","title":"SAAS(Software as a Service)"},{"location":"cc/UnitII_SAAS/#characteristics","text":"Web access to commercial software Software is managed from central location Software is delivered in a \u2018one to many\u2019 model Users not required to handle software upgrades and patches Application Programming Interfaces (API) allow for integration between different pieces of software. Managed by you Managed by vendor Hosted applications Development and management tools Operating system Servers and storage Networking resources Data center","title":"Characteristics"},{"location":"cc/UnitII_vCloud/","text":"vCloud Link vCloud is a public cloud computing service built on vSphere from VMware. vCloud has three \"infrastructure as a service\" (IaaS) subscription service types: dedicated cloud, virtual private cloud, and disaster recovery. vCloud Hybrid Service was rebranded to vCloud Air on August 21, 2014. vCloud Air provides a hybrid cloud\u2014a public IaaS that functions as an extension of existing data centers running VMware vSphere, with common management and networking. With the rebrand of the service, they also announced a cloud computing On Demand program that allows users to pay only for what each user needs to use for resources. vCloud Air supports more than 5,000 applications and 90+ operating systems certified to run on vSphere. The use of vCloud Air allows seamless workload portability and migration due to vSphere, which means no rewrites or recoding when moving workloads from an on-premises data center to the cloud and vice versa. VMware announced plans for a vCloud Air Virtual Private Cloud OnDemand early access program on October 14, 2014.[ 13] The program was officially launched on November 17, 2014.[ 14] It included $1,000 in service credits for approved users. Configurations Link The most basic configuration includes a virtual machine with 1GB RAM, 1 vCPU and 20GB SSD storage at $0.07 / hour.[16] Currently the service offers the choices of these three operating systems: CentOS Microsoft Windows Server Standard Edition Ubuntu Additionally, users can consume up to 16 vCPUs and 120 GB of memory. Storage options include: 2 TB standard storage 2 TB of SSD-accelerated storage Users can also have up to 20 public IP addresses and support levels vary, with online support being 7% of the total invoice and production support being $100 or 12%, whichever is greater.","title":"vCloud"},{"location":"cc/UnitII_vCloud/#vcloud","text":"vCloud is a public cloud computing service built on vSphere from VMware. vCloud has three \"infrastructure as a service\" (IaaS) subscription service types: dedicated cloud, virtual private cloud, and disaster recovery. vCloud Hybrid Service was rebranded to vCloud Air on August 21, 2014. vCloud Air provides a hybrid cloud\u2014a public IaaS that functions as an extension of existing data centers running VMware vSphere, with common management and networking. With the rebrand of the service, they also announced a cloud computing On Demand program that allows users to pay only for what each user needs to use for resources. vCloud Air supports more than 5,000 applications and 90+ operating systems certified to run on vSphere. The use of vCloud Air allows seamless workload portability and migration due to vSphere, which means no rewrites or recoding when moving workloads from an on-premises data center to the cloud and vice versa. VMware announced plans for a vCloud Air Virtual Private Cloud OnDemand early access program on October 14, 2014.[ 13] The program was officially launched on November 17, 2014.[ 14] It included $1,000 in service credits for approved users.","title":"vCloud"},{"location":"cc/UnitII_vCloud/#configurations","text":"The most basic configuration includes a virtual machine with 1GB RAM, 1 vCPU and 20GB SSD storage at $0.07 / hour.[16] Currently the service offers the choices of these three operating systems: CentOS Microsoft Windows Server Standard Edition Ubuntu Additionally, users can consume up to 16 vCPUs and 120 GB of memory. Storage options include: 2 TB standard storage 2 TB of SSD-accelerated storage Users can also have up to 20 public IP addresses and support levels vary, with online support being 7% of the total invoice and production support being $100 or 12%, whichever is greater.","title":"Configurations"},{"location":"cc/UnitIV/","text":"Cloud Implementation Tools : Salesforce Link Salesforce.com - SaaS / PaaS, Force.com, Force Database - the persistencey layer, Data Security, Microsoft Office Live - SaaS, LiveMesh.com, Google Apps - SaaS, A Comparison of Cloud Computing Platforms, Common Building Blocks.","title":"Cloud Implementation Tools : Salesforce"},{"location":"cc/UnitIV/#cloud-implementation-tools-salesforce","text":"Salesforce.com - SaaS / PaaS, Force.com, Force Database - the persistencey layer, Data Security, Microsoft Office Live - SaaS, LiveMesh.com, Google Apps - SaaS, A Comparison of Cloud Computing Platforms, Common Building Blocks.","title":"Cloud Implementation Tools : Salesforce"},{"location":"de/","text":"BCA 201: Digital Electronics and Computer Architecture Link Time: 3 Hrs. Max. Marks: 100 Papers Unit \u2013I Overview of electronics: Electronic components-Resistor, capacitor and Inductors, Semiconductor devices: Diodes, transistors (BJT and FET). Integrated circuits, Popular IC packages, Analog vs digital electronics, Transistor as a switch. Boolean algebra: Representation of values and complements, De\u2019Morgans theorem-simplifying expressions. Unit \u2013II Logic gates: AND, OR, NOT, XOR, XNOR, NAND, NOR gates and their truth tables, Combining logic circuits for expressions using NAND and NOR gates, Logic circuit families and characteristics, SSI, MSI, LSI and VLSI circuits. Combinational and sequential circuits: (Simple block diagrams, truth tables and IC packages only required). Adders, decoders, multiplexers, encoder circuits , Flip-flops: RS, clocked RS, JK, D and T flip flops, Master slave flip flops, edge and level triggering, Multivibrators - Astable, Bistable, Monostable, counters-ripple and decade. Registers, latches and Tristate buffers. Unit \u2013III Building blocks of a computer system: Basic building blocks-I/O, memory, ALU, Control and their interconnections, Control unit and its functions- Instruction-word, Instruction execution cycle, organizational sequence of operation of control registers; controlling of arithmetic operations; branch, skip, jump and shift instructions, ALU-its components. Unit \u2013IV Addressing techniques and registers: Addressing techniques-Direct, immediate addressing; paging, relative, Indirect and indexed addressing. Memory buffer register; accumulators; Registers-Indexed, General purpose, Special purpose; overflow, carry, shift, scratch registers; stack pointers; floating point; status information and buffer registers. Unit \u2013V Memory: Main, RAM, static and Dynamic, ROM, EPROM, EAROM, EEPROM, Cache and Virtual memory. Interconnecting System components: Buses, Interfacing buses, Bus formats-address, data and control, Interfacing keyboard, display, auxiliary storage devices, and printers. I/O cards in personal computers. Development of Indian Super Computer \u2018PARAM\u2019: History, Characteristics, Strengths, Weakness and basic Architecture. Text / Reference Books A.S.Tannenbaum : Structured Computer Organization, Pearson Thomas C. Bartee : Digital Computer Fundamentals, McGraw-Hill Duglus V Hall : Microprocessors and Interfacing: programming and Hardware, McGraw-Hill, 1986. Introduction to Computer Architecture, Stone S.Galgotia Publicatons 1996. Microprocessor Architecture Programming & Applications, R. Gaonkar, Wiley Eastern-1987. Computer Architecture and Organization by N.P. Carter, 4 th Edition, McGraw-Hill, 2014.","title":"BCA 201: Digital Electronics and Computer Architecture"},{"location":"de/#bca-201-digital-electronics-and-computer-architecture","text":"Time: 3 Hrs. Max. Marks: 100 Papers Unit \u2013I Overview of electronics: Electronic components-Resistor, capacitor and Inductors, Semiconductor devices: Diodes, transistors (BJT and FET). Integrated circuits, Popular IC packages, Analog vs digital electronics, Transistor as a switch. Boolean algebra: Representation of values and complements, De\u2019Morgans theorem-simplifying expressions. Unit \u2013II Logic gates: AND, OR, NOT, XOR, XNOR, NAND, NOR gates and their truth tables, Combining logic circuits for expressions using NAND and NOR gates, Logic circuit families and characteristics, SSI, MSI, LSI and VLSI circuits. Combinational and sequential circuits: (Simple block diagrams, truth tables and IC packages only required). Adders, decoders, multiplexers, encoder circuits , Flip-flops: RS, clocked RS, JK, D and T flip flops, Master slave flip flops, edge and level triggering, Multivibrators - Astable, Bistable, Monostable, counters-ripple and decade. Registers, latches and Tristate buffers. Unit \u2013III Building blocks of a computer system: Basic building blocks-I/O, memory, ALU, Control and their interconnections, Control unit and its functions- Instruction-word, Instruction execution cycle, organizational sequence of operation of control registers; controlling of arithmetic operations; branch, skip, jump and shift instructions, ALU-its components. Unit \u2013IV Addressing techniques and registers: Addressing techniques-Direct, immediate addressing; paging, relative, Indirect and indexed addressing. Memory buffer register; accumulators; Registers-Indexed, General purpose, Special purpose; overflow, carry, shift, scratch registers; stack pointers; floating point; status information and buffer registers. Unit \u2013V Memory: Main, RAM, static and Dynamic, ROM, EPROM, EAROM, EEPROM, Cache and Virtual memory. Interconnecting System components: Buses, Interfacing buses, Bus formats-address, data and control, Interfacing keyboard, display, auxiliary storage devices, and printers. I/O cards in personal computers. Development of Indian Super Computer \u2018PARAM\u2019: History, Characteristics, Strengths, Weakness and basic Architecture. Text / Reference Books A.S.Tannenbaum : Structured Computer Organization, Pearson Thomas C. Bartee : Digital Computer Fundamentals, McGraw-Hill Duglus V Hall : Microprocessors and Interfacing: programming and Hardware, McGraw-Hill, 1986. Introduction to Computer Architecture, Stone S.Galgotia Publicatons 1996. Microprocessor Architecture Programming & Applications, R. Gaonkar, Wiley Eastern-1987. Computer Architecture and Organization by N.P. Carter, 4 th Edition, McGraw-Hill, 2014.","title":"BCA 201: Digital Electronics and Computer Architecture"},{"location":"de/Paper/","text":"Model Paper Link Subject: Digital Electronics Max Marks: 75 Unit-I Solve Following Simplify using K Map F (A, B, C, D) = \u20ac (0, 4, 6, 10, 11, 13) and verify the results. Show that the dual of the exclusive OR is equal to its complement. Solve Following What are gates? Describe primary and universal gates with block diagram and truth tables. Implement the following Boolean function with OR and NOT gates only: F=XY+X\u2019Y\u2019+Y\u2019Z Unit-II What are combinational circuits? Explain following using block diagram. MUX DMUX Half Adder Full Adder Explain Following What are sequential circuits? Explain different types of Flip flops with truth table and excitation table. Explain ripple counter. Unit-III Describe following Explain Branch, skip and Jump instructions. Call and Return Explain ALU and its components Control Sequence Operation. Unit-IV What is Addressing? Explain various addressing techniques with examples. Explain instruction word formats and all phases of instruction cycle of a basic computer. Unit-V Differentiate Dynamic RAM and static RAM. Cache and Virtual Memory Explain Logical construction of a 4*3 RAM. Explain Cache memory Virtual memory 2010 Link Unit-I Explain Explain integrated circuits with its characteristics. Explain D'Morgans theorem with suitable example. Differentiate between BJT and FET transistors. Explain Write short note on : Capacitors Inductors Simplify Boolean expression using K-map F= x'yz + xy'z' + xyz + xyz' F= A'C + A'B + AB'C + BC Unit \u2013 II Explain What is decoder? Explain 3 to 8 line decoder with its diagram and truth table. Explain logic circuit familiar. Explain Draw the NAND gate implementation of the simplified Boolean function given below : F= AB + CD + E . F( x , y , z ) = \u20ac ( 0 , 6 ) 7 Write a note on Multivibrators Master slave flip flops. Unit-III Explain What is instruction word? Give the details of Instruction Execution cycle. Explain Branch, skip and Jump instructions. Explain Explain sequence of operations in control Registers. Describe the structure of ALU. 5 Unit-IV Explain What is Addressing ? Explain various addressing techniques with examples. 10 Write short notes on : MAR MBR Explain. What is special purpose register ? Define shift and stack pointer in detail. 10 Explain following terms : DI CLR LD PUSH INC Unit-V Explain What is the need of cache memory in computer memory structure? Explain different mapping techniques. Write short notes on : Write through Write back Explain What is data, address and control bus? What is Page replacement in virtual memory? Explain following types of memory EPROM and EEPROM. 2011 Link Unit-I Explain Write short notes on : Register Transistor. (2.5*2) What do you mean by Boolean variables, operations and functions? Simplify the logical expression : X'Y' + X'Z + YZ + Y'ZW' Explain Using Karnaugh map method simplify the expression. Y= A'B'C' + A'BC' + A'B'C Y= \u03a0(6,7,15) (Product of sum) \u200b Represent the following Boolean function on Karnaugh map , and simplify it Y= (A + B' + C' + D') (A' + B' + C' + D') (A + B' + C' + D) Unit-II NAND operation is said to be universal operation why? By use of NAND gate draw following operations:: INVERTER \u00e0 AND OR \u00e0XOR What do you mean by flip-flops? Explain Master - Slave J-K flip-flop. Unit-III Explain all phases of instruction cycle of a basic computer. Explain Arithmetic Micro operations with all symbolic designation. Unit-IV What are the provisions of addressing modes ? Explain following: Immediate Mode Indirect Address Mode Indexed Address Mode. Write short notes on : Accumulator Address register Instruction register Program counter Data register. Unit-V What do you mean by Cache memory? Explain mapping process in detail. Write short notes on : Auxiliary storage devices Bus formats - address, data and control. 2012 Link Unit-I Explain: Simplify the following expressions and draw the block diagram of the circuit of the simplified circuit using AND and OR gates. [ X ( Y +Y' ) ( Y' +Y ) ] . Z' AB [ A'B A'B' ] 8 Explain capacitors and resistors. 7 Explain : Transistor DeMorgan's Laws Simplify using K map: F( A, B , C, D ) = \u20ac ( 0, 4, 6, 10 , 11, 13 ) and verify the results. Unit-II Explain: What are combinational circuit? Explain using block diagram: multiplexer decoder. What are universal gates? By the use of NOR gates draw following operations: (i) inverter (ii) AND (iii) OR 7 Explain What are sequential circuits? Differentiate between D and T flip flops. Explain ripple counter. Unit-III Explain Explain instruction word formats. Explain following instruction : Shift instruction Explain Explain instruction execution cycle. Explain ALU and its components. Unit-IV Explain the following addressing modes with examples: Direct addressing Indirect addressing Immediate addressing Relative Addressing What are registers? Explain the following CPU registers with their functions : Program counter Address register Instruction register Data register Accumulator 15 Unit-V What are Buses? Explain different bus formats. Explain Cache memory Virtual memory Static RAM ROM. 2013 Link Unit \u2013 I Explain Following Write advantages of digital data as compared to Analog data. What are the advantages of BJT and FET? What is an Integrated Circuit? Define the term DIP. Explain following Simplify the following Boolean functions: x+x'y x( x'+y ) xy+x'z +yz ( x+y ) ( x'+z ) ( y+z ) Show that the dual of the exclusive OR is equal to its complement. Unit \u2013 II Explain Following What are universal gates? By the use of NAND gate draw following operations : AND NOR OR NOT What are combinational circuits? Explain following using block diagram. encoder Full Adder Demultiplexer Decoder Explain Following What are sequential circuits? Explain different types of Flip flops with truth table and excitation table. Explain ripple counter. Unit \u2013 III Explain Following Explain Memory Mapping in detail. Explain following instruction: Shift instruction ii. Jump instruction and iii. Branch instruction Explain Following Explain ALU and its components. Explain instruction execution cycle by timing diagram. Unit \u2013 IV Explain Following Explain the following addressing modes with example. Direct and relative addressing Indirect and indexed addressing Immediate addressing What are registers? Explain the following CPU registers with their functions: Stack Pointers Overflow and carry register Accumulator Program counter Floating point Unit \u2013 V Explain Following Differentiate Dynamic RAM and static RAM. Explain Cache memory ii. Virtual memory Explain Following Explain Logical construction of a 4*3 RAM. What are buses? Explain different bus formats. 2014 Link Unit-I Explain: What is meant by Semiconductor Integrated Circuit? Compare Digital and Analog communication? Write a short note on IC packaging methods? Explain: Solve Convert the following numbers: (10.10001)2 into (?)10 (250.5)10 into (?)4 Obtain 2\u2019s and 9\u2019s complement of (011000)2 and (90090)10 Implement the following Boolean function with OR and NOT gates only: F=XY X\u2019Y\u2019 Y\u2019Z Validate De Morgan\u2019s theorem for three variables of Boolean algebra by means of truth table. Unit-II Explain Solve Obtain and draw the NAND logic diagram of full adder. Compare all the IC logic families based on power consumption, propagation delay, switching Speed and noise margin. Solve Draw the logic diagram of 2 to 4-line decoder with only NOR gates. WHAT is a Multiplexer? Why is it called data selector? Explain Solve Draw the logic diagram of clocked D flip flop with AND and NOR gates. Obtain the logic diagram of master salve JK flip flop with AND and NOR gates. Include a provision for setting and clearing the flip flop asynchronously. Solve Design 4-bit binary ripple counter using flip flops that trigger on positive edges. Explain the shift register different configuration of shift register. Unit-III Explain Draw a block diagram to illustrate the basic organization of computer system. List any five functions, which ALU is capable of performing. Explain Explain the working of ALU and Control unit. Discuss the various phases of instruction cycle. Unit-IV Explain What is addressing mode? Explain various addressing modes with their advantages and disadvantages. Demonstrate the use of direct and indirect address with the help of suitable example. Explain Explain register stack operation in detail. Explain following terms: Floating point ii. Buffers register iii. Accumulator iv. Stack pointer Unit-V Explain What is the difference between static RAM and dynamic RAM? List different type of static and dynamic RAM? What is VIRTUAL memory? Why is it called virtual memory? Write the advantages of virtual memory? Explain What are various I/O data transfer techniques? Explain each technique with their relative merits and demerits? What is BUS? Draw and describe the bus architecture for a digital computer? 2015 Link Unit -I Solve Following State five advantage of digital electronics over analog electronics. [5] prove using Boolean algebra AB+\u00c0B+BC=AB+\u00c0C [5] Explain BJT working as switch [5] OR Solve Following What do you mean by smd package? Explain LCCC package with suitable diagram. [5] Prove using Boolean algebra ABC+\u00c0BC+AB\u2019C +ABC\u2019=AB +BC+CA [5] Explain output characteristic of BJT in CE mode [5] Unit-2 Solve Following Draw logic circuit for the following expression using NAND gates. [5] What do you mean by indeterminate state in clocked as flip-flop explain [5] Explain any five voltage and current parameters with reference to logic families [5] OR Solve Following Draw XOR gate using NAND gates and XNOR gate using NOR gates [5] Explain working of JK master-slave flip-flop [5] Explain working of tristate buffer [5] Unit-3 Solve Following Draw a block diagram to illustrate the basic organization of a computer system [5] Explain phases of instruction cycle [5] State any five functions of ALU [5] OR Solve Following What do you mean by branch instruction Explain various types of branch instruction[5] Explain inter connecting busses between basic building blocks of a computer system [5] Explain various types of shift operations [5] Unit-4 Solve Following what do you mean by addressing mode\\Explain various types of page Addressing [5] What is difference between overflow and carry [5] How does floating print data is represented in memory [5] OR Solve Following Explain relative addressing mode [5] What is memory stack and how is addressed [5] Explain MAR and MBR [5] \u200b Unit-5 Solve Following What is difference between cache and Virtual memory? [5] What do mean by interface circuit\\What are the functions of a keyboard Interface circuit [5] OR Solve Following Describe various types of ROMs List auxiliary storage devices describe Any one type of interface for auxiliary storage device [5] 2016 Link Unit -I Solve Following Discuss the working of a transistor as a switch. [5] Discuss the term depletion layer in p-N junction diode. Also discuss the capacitance effect in the p-N diode. [5] write a node on D'morgan's theorem. [5] OR Solve Following what do you understand bt FET and BJT? Discuss the similarities and differences between them. Why is FET better than BJT? [2+3+2] write a note on integrated circuits. [4] prove that : (A + B + C) (A +B + C)= A +C. [4] Unit-2 Solve Following what do mean by XOR gate? Give its boolean expression and truth table. [5] Discuss logic families and characteristics.[ 5] Define and discuss the Astable Multivibrater. [5] OR Solve Following Explain the working of RS flip-flop. [5] what do you understand by half and full adders? Give their truth tables and suitable logic circuit. [5] Discuss the working of decoder with circuit diagram. [5] Unit-3 Solve Following write a note on ALU. [5] what are the central units and their functions? [5] Discuss the skip instructions. [5] OR Solve Following what do you mean by basic building blocks? [5] write a note on execution cycle. [5] what do you understand by memory [5] Unit-4 Solve Following Discuss indirect and indexed addressing. [6] write a note on accumulators. [4] Explain floating point. [5] OR Solve Following what do you mean by overflow and carry? [6] what is the general purpose of registers indexed? [6] Write a short note on direct addressing. [3] Unit-5 Solve Following what is the difference between RAM and ROM? [5] write a note on Cache and Virtual memory.[7] Discuss EEPROM. [3] OR Solve Following what do you understand by auxiliary storage devices? what do you mean by interfacing keyboard circuit? Discuss I/O cards in personal computers. [5] 2017 Link UNIT -I Solve Write notes on the following semi-conductor devices : 5+5 Diodes Transistors Prove that : 5 A'.B.C + A.B'.C + A.B.C' + A.B.C = B.C. + C.A. + A.B. OR Solve Write a note on integrated circuits. 5 Explain the working of a transistor as a switch. 5 Prove that : 5 UNIT - II Solve Explain the working of JK flip-flop. 5 Explain the working of 4-to-1 multiplexer with a circuit diagram. 5 Explain the working of ripple counter. 5 Or Solve Explain the working of master slave flip-flop. 5 Explain with the help of circuit diagram, full adder. Give its truth table. 5 Explain the working of RS flip-flop. 5 UNIT-III Solve Explain the following with their functions : (i) ALU (ii) Control Unit. 5+5=10 What do you mean by instruction execution cycle ? 5 OR Solve Explain the following controlling operation instructions : Branch Skip Jump Shift. 4 What do you mean by basic building blocks of a computer system ? 6 What do you mean by instruction word ? 5 UNIT -IV Solve Following Explain direct and immediate addressing techniques. 5 What do you mean by general purpose and special purpose registers ? 5 Write a note on status information and buffer registers. 5 OR Solve Explain indirect and indexed addressing. 5 What do you mean by carry registers and shift registers ? 5 Explain floating point. 5 UNIT - V Solve Following What is the difference between static and dynamic memory ? 5 Explain auxiliary storage devices. 5 Explain Buses and interfacing buses. 5 OR Solve What is the difference between cache and virtual memory ? 5 What do you mean by interfacing keyboards ? 5\u00a9 Discuss the following : 5 EPROM EEPROM.","title":"Model Paper"},{"location":"de/Paper/#model-paper","text":"Subject: Digital Electronics Max Marks: 75 Unit-I Solve Following Simplify using K Map F (A, B, C, D) = \u20ac (0, 4, 6, 10, 11, 13) and verify the results. Show that the dual of the exclusive OR is equal to its complement. Solve Following What are gates? Describe primary and universal gates with block diagram and truth tables. Implement the following Boolean function with OR and NOT gates only: F=XY+X\u2019Y\u2019+Y\u2019Z Unit-II What are combinational circuits? Explain following using block diagram. MUX DMUX Half Adder Full Adder Explain Following What are sequential circuits? Explain different types of Flip flops with truth table and excitation table. Explain ripple counter. Unit-III Describe following Explain Branch, skip and Jump instructions. Call and Return Explain ALU and its components Control Sequence Operation. Unit-IV What is Addressing? Explain various addressing techniques with examples. Explain instruction word formats and all phases of instruction cycle of a basic computer. Unit-V Differentiate Dynamic RAM and static RAM. Cache and Virtual Memory Explain Logical construction of a 4*3 RAM. Explain Cache memory Virtual memory","title":"Model Paper"},{"location":"de/Paper/#2010","text":"Unit-I Explain Explain integrated circuits with its characteristics. Explain D'Morgans theorem with suitable example. Differentiate between BJT and FET transistors. Explain Write short note on : Capacitors Inductors Simplify Boolean expression using K-map F= x'yz + xy'z' + xyz + xyz' F= A'C + A'B + AB'C + BC Unit \u2013 II Explain What is decoder? Explain 3 to 8 line decoder with its diagram and truth table. Explain logic circuit familiar. Explain Draw the NAND gate implementation of the simplified Boolean function given below : F= AB + CD + E . F( x , y , z ) = \u20ac ( 0 , 6 ) 7 Write a note on Multivibrators Master slave flip flops. Unit-III Explain What is instruction word? Give the details of Instruction Execution cycle. Explain Branch, skip and Jump instructions. Explain Explain sequence of operations in control Registers. Describe the structure of ALU. 5 Unit-IV Explain What is Addressing ? Explain various addressing techniques with examples. 10 Write short notes on : MAR MBR Explain. What is special purpose register ? Define shift and stack pointer in detail. 10 Explain following terms : DI CLR LD PUSH INC Unit-V Explain What is the need of cache memory in computer memory structure? Explain different mapping techniques. Write short notes on : Write through Write back Explain What is data, address and control bus? What is Page replacement in virtual memory? Explain following types of memory EPROM and EEPROM.","title":"2010"},{"location":"de/Paper/#2011","text":"Unit-I Explain Write short notes on : Register Transistor. (2.5*2) What do you mean by Boolean variables, operations and functions? Simplify the logical expression : X'Y' + X'Z + YZ + Y'ZW' Explain Using Karnaugh map method simplify the expression. Y= A'B'C' + A'BC' + A'B'C Y= \u03a0(6,7,15) (Product of sum) \u200b Represent the following Boolean function on Karnaugh map , and simplify it Y= (A + B' + C' + D') (A' + B' + C' + D') (A + B' + C' + D) Unit-II NAND operation is said to be universal operation why? By use of NAND gate draw following operations:: INVERTER \u00e0 AND OR \u00e0XOR What do you mean by flip-flops? Explain Master - Slave J-K flip-flop. Unit-III Explain all phases of instruction cycle of a basic computer. Explain Arithmetic Micro operations with all symbolic designation. Unit-IV What are the provisions of addressing modes ? Explain following: Immediate Mode Indirect Address Mode Indexed Address Mode. Write short notes on : Accumulator Address register Instruction register Program counter Data register. Unit-V What do you mean by Cache memory? Explain mapping process in detail. Write short notes on : Auxiliary storage devices Bus formats - address, data and control.","title":"2011"},{"location":"de/Paper/#2012","text":"Unit-I Explain: Simplify the following expressions and draw the block diagram of the circuit of the simplified circuit using AND and OR gates. [ X ( Y +Y' ) ( Y' +Y ) ] . Z' AB [ A'B A'B' ] 8 Explain capacitors and resistors. 7 Explain : Transistor DeMorgan's Laws Simplify using K map: F( A, B , C, D ) = \u20ac ( 0, 4, 6, 10 , 11, 13 ) and verify the results. Unit-II Explain: What are combinational circuit? Explain using block diagram: multiplexer decoder. What are universal gates? By the use of NOR gates draw following operations: (i) inverter (ii) AND (iii) OR 7 Explain What are sequential circuits? Differentiate between D and T flip flops. Explain ripple counter. Unit-III Explain Explain instruction word formats. Explain following instruction : Shift instruction Explain Explain instruction execution cycle. Explain ALU and its components. Unit-IV Explain the following addressing modes with examples: Direct addressing Indirect addressing Immediate addressing Relative Addressing What are registers? Explain the following CPU registers with their functions : Program counter Address register Instruction register Data register Accumulator 15 Unit-V What are Buses? Explain different bus formats. Explain Cache memory Virtual memory Static RAM ROM.","title":"2012"},{"location":"de/Paper/#2013","text":"Unit \u2013 I Explain Following Write advantages of digital data as compared to Analog data. What are the advantages of BJT and FET? What is an Integrated Circuit? Define the term DIP. Explain following Simplify the following Boolean functions: x+x'y x( x'+y ) xy+x'z +yz ( x+y ) ( x'+z ) ( y+z ) Show that the dual of the exclusive OR is equal to its complement. Unit \u2013 II Explain Following What are universal gates? By the use of NAND gate draw following operations : AND NOR OR NOT What are combinational circuits? Explain following using block diagram. encoder Full Adder Demultiplexer Decoder Explain Following What are sequential circuits? Explain different types of Flip flops with truth table and excitation table. Explain ripple counter. Unit \u2013 III Explain Following Explain Memory Mapping in detail. Explain following instruction: Shift instruction ii. Jump instruction and iii. Branch instruction Explain Following Explain ALU and its components. Explain instruction execution cycle by timing diagram. Unit \u2013 IV Explain Following Explain the following addressing modes with example. Direct and relative addressing Indirect and indexed addressing Immediate addressing What are registers? Explain the following CPU registers with their functions: Stack Pointers Overflow and carry register Accumulator Program counter Floating point Unit \u2013 V Explain Following Differentiate Dynamic RAM and static RAM. Explain Cache memory ii. Virtual memory Explain Following Explain Logical construction of a 4*3 RAM. What are buses? Explain different bus formats.","title":"2013"},{"location":"de/Paper/#2014","text":"Unit-I Explain: What is meant by Semiconductor Integrated Circuit? Compare Digital and Analog communication? Write a short note on IC packaging methods? Explain: Solve Convert the following numbers: (10.10001)2 into (?)10 (250.5)10 into (?)4 Obtain 2\u2019s and 9\u2019s complement of (011000)2 and (90090)10 Implement the following Boolean function with OR and NOT gates only: F=XY X\u2019Y\u2019 Y\u2019Z Validate De Morgan\u2019s theorem for three variables of Boolean algebra by means of truth table. Unit-II Explain Solve Obtain and draw the NAND logic diagram of full adder. Compare all the IC logic families based on power consumption, propagation delay, switching Speed and noise margin. Solve Draw the logic diagram of 2 to 4-line decoder with only NOR gates. WHAT is a Multiplexer? Why is it called data selector? Explain Solve Draw the logic diagram of clocked D flip flop with AND and NOR gates. Obtain the logic diagram of master salve JK flip flop with AND and NOR gates. Include a provision for setting and clearing the flip flop asynchronously. Solve Design 4-bit binary ripple counter using flip flops that trigger on positive edges. Explain the shift register different configuration of shift register. Unit-III Explain Draw a block diagram to illustrate the basic organization of computer system. List any five functions, which ALU is capable of performing. Explain Explain the working of ALU and Control unit. Discuss the various phases of instruction cycle. Unit-IV Explain What is addressing mode? Explain various addressing modes with their advantages and disadvantages. Demonstrate the use of direct and indirect address with the help of suitable example. Explain Explain register stack operation in detail. Explain following terms: Floating point ii. Buffers register iii. Accumulator iv. Stack pointer Unit-V Explain What is the difference between static RAM and dynamic RAM? List different type of static and dynamic RAM? What is VIRTUAL memory? Why is it called virtual memory? Write the advantages of virtual memory? Explain What are various I/O data transfer techniques? Explain each technique with their relative merits and demerits? What is BUS? Draw and describe the bus architecture for a digital computer?","title":"2014"},{"location":"de/Paper/#2015","text":"Unit -I Solve Following State five advantage of digital electronics over analog electronics. [5] prove using Boolean algebra AB+\u00c0B+BC=AB+\u00c0C [5] Explain BJT working as switch [5] OR Solve Following What do you mean by smd package? Explain LCCC package with suitable diagram. [5] Prove using Boolean algebra ABC+\u00c0BC+AB\u2019C +ABC\u2019=AB +BC+CA [5] Explain output characteristic of BJT in CE mode [5] Unit-2 Solve Following Draw logic circuit for the following expression using NAND gates. [5] What do you mean by indeterminate state in clocked as flip-flop explain [5] Explain any five voltage and current parameters with reference to logic families [5] OR Solve Following Draw XOR gate using NAND gates and XNOR gate using NOR gates [5] Explain working of JK master-slave flip-flop [5] Explain working of tristate buffer [5] Unit-3 Solve Following Draw a block diagram to illustrate the basic organization of a computer system [5] Explain phases of instruction cycle [5] State any five functions of ALU [5] OR Solve Following What do you mean by branch instruction Explain various types of branch instruction[5] Explain inter connecting busses between basic building blocks of a computer system [5] Explain various types of shift operations [5] Unit-4 Solve Following what do you mean by addressing mode\\Explain various types of page Addressing [5] What is difference between overflow and carry [5] How does floating print data is represented in memory [5] OR Solve Following Explain relative addressing mode [5] What is memory stack and how is addressed [5] Explain MAR and MBR [5] \u200b Unit-5 Solve Following What is difference between cache and Virtual memory? [5] What do mean by interface circuit\\What are the functions of a keyboard Interface circuit [5] OR Solve Following Describe various types of ROMs List auxiliary storage devices describe Any one type of interface for auxiliary storage device [5]","title":"2015"},{"location":"de/Paper/#2016","text":"Unit -I Solve Following Discuss the working of a transistor as a switch. [5] Discuss the term depletion layer in p-N junction diode. Also discuss the capacitance effect in the p-N diode. [5] write a node on D'morgan's theorem. [5] OR Solve Following what do you understand bt FET and BJT? Discuss the similarities and differences between them. Why is FET better than BJT? [2+3+2] write a note on integrated circuits. [4] prove that : (A + B + C) (A +B + C)= A +C. [4] Unit-2 Solve Following what do mean by XOR gate? Give its boolean expression and truth table. [5] Discuss logic families and characteristics.[ 5] Define and discuss the Astable Multivibrater. [5] OR Solve Following Explain the working of RS flip-flop. [5] what do you understand by half and full adders? Give their truth tables and suitable logic circuit. [5] Discuss the working of decoder with circuit diagram. [5] Unit-3 Solve Following write a note on ALU. [5] what are the central units and their functions? [5] Discuss the skip instructions. [5] OR Solve Following what do you mean by basic building blocks? [5] write a note on execution cycle. [5] what do you understand by memory [5] Unit-4 Solve Following Discuss indirect and indexed addressing. [6] write a note on accumulators. [4] Explain floating point. [5] OR Solve Following what do you mean by overflow and carry? [6] what is the general purpose of registers indexed? [6] Write a short note on direct addressing. [3] Unit-5 Solve Following what is the difference between RAM and ROM? [5] write a note on Cache and Virtual memory.[7] Discuss EEPROM. [3] OR Solve Following what do you understand by auxiliary storage devices? what do you mean by interfacing keyboard circuit? Discuss I/O cards in personal computers. [5]","title":"2016"},{"location":"de/Paper/#2017","text":"UNIT -I Solve Write notes on the following semi-conductor devices : 5+5 Diodes Transistors Prove that : 5 A'.B.C + A.B'.C + A.B.C' + A.B.C = B.C. + C.A. + A.B. OR Solve Write a note on integrated circuits. 5 Explain the working of a transistor as a switch. 5 Prove that : 5 UNIT - II Solve Explain the working of JK flip-flop. 5 Explain the working of 4-to-1 multiplexer with a circuit diagram. 5 Explain the working of ripple counter. 5 Or Solve Explain the working of master slave flip-flop. 5 Explain with the help of circuit diagram, full adder. Give its truth table. 5 Explain the working of RS flip-flop. 5 UNIT-III Solve Explain the following with their functions : (i) ALU (ii) Control Unit. 5+5=10 What do you mean by instruction execution cycle ? 5 OR Solve Explain the following controlling operation instructions : Branch Skip Jump Shift. 4 What do you mean by basic building blocks of a computer system ? 6 What do you mean by instruction word ? 5 UNIT -IV Solve Following Explain direct and immediate addressing techniques. 5 What do you mean by general purpose and special purpose registers ? 5 Write a note on status information and buffer registers. 5 OR Solve Explain indirect and indexed addressing. 5 What do you mean by carry registers and shift registers ? 5 Explain floating point. 5 UNIT - V Solve Following What is the difference between static and dynamic memory ? 5 Explain auxiliary storage devices. 5 Explain Buses and interfacing buses. 5 OR Solve What is the difference between cache and virtual memory ? 5 What do you mean by interfacing keyboards ? 5\u00a9 Discuss the following : 5 EPROM EEPROM.","title":"2017"},{"location":"de/UnitI/","text":"Unit \u2013I Link Overview of electronics: Electronic components-Resistor, capacitor and Inductors, Semiconductor devices: Diodes, transistors (BJT and FET). Integrated circuits, Popular IC packages, Analog vs digital electronics, Transistor as a switch. Boolean algebra: Representation of values and complements, De\u2019Morgans theorem-simplifying expressions.","title":"Unit \u2013I"},{"location":"de/UnitI/#unit-i","text":"Overview of electronics: Electronic components-Resistor, capacitor and Inductors, Semiconductor devices: Diodes, transistors (BJT and FET). Integrated circuits, Popular IC packages, Analog vs digital electronics, Transistor as a switch. Boolean algebra: Representation of values and complements, De\u2019Morgans theorem-simplifying expressions.","title":"Unit \u2013I"},{"location":"de/UnitII/","text":"Unit \u2013II Link Logic gates: AND, OR, NOT, XOR, XNOR, NAND, NOR gates and their truth tables, Combining logic circuits for expressions using NAND and NOR gates, Logic circuit families and characteristics, SSI, MSI, LSI and VLSI circuits. Combinational and sequential circuits: (Simple block diagrams, truth tables and IC packages only required). Adders, decoders, multiplexers, encoder circuits , Flip-flops: RS, clocked RS, JK, D and T flip flops, Master slave flip flops, edge and level triggering, Multivibrators - Astable, Bistable, Monostable, counters-ripple and decade. Registers, latches and Tristate buffers.","title":"UnitII"},{"location":"de/UnitII/#unit-ii","text":"Logic gates: AND, OR, NOT, XOR, XNOR, NAND, NOR gates and their truth tables, Combining logic circuits for expressions using NAND and NOR gates, Logic circuit families and characteristics, SSI, MSI, LSI and VLSI circuits. Combinational and sequential circuits: (Simple block diagrams, truth tables and IC packages only required). Adders, decoders, multiplexers, encoder circuits , Flip-flops: RS, clocked RS, JK, D and T flip flops, Master slave flip flops, edge and level triggering, Multivibrators - Astable, Bistable, Monostable, counters-ripple and decade. Registers, latches and Tristate buffers.","title":"Unit \u2013II"},{"location":"de/UnitIII/","text":"Unit \u2013III Link Building blocks of a computer system: Basic building blocks-I/O, memory, ALU, Control and their interconnections, Control unit and its functions- Instruction-word, Instruction execution cycle, organizational sequence of operation of control registers; controlling of arithmetic operations; branch, skip, jump and shift instructions, ALU-its components. Introduction of Control Unit The Control Unit may be defined as a part of system for retrieving of instructions in proper sequence and the interpretation of each instruction and process applications with proper signal to the arithmetic unit. Control unit and arithmetical logical process each instruction using memory. The function of control unit or circuit is exist in every general purpose computer that\u2019s work as a process of instructions, instruction word and proper sequence for the necessary signals to a particular section of the computer that section perform executions on instructions. Control unit have various types of components and memory devices. Instruction Word A Computer word is an order of characters that handle as a group. All word consist of a set of binary numbers and that\u2019s meaning depend on several factors","title":"UnitIII"},{"location":"de/UnitIII/#unit-iii","text":"Building blocks of a computer system: Basic building blocks-I/O, memory, ALU, Control and their interconnections, Control unit and its functions- Instruction-word, Instruction execution cycle, organizational sequence of operation of control registers; controlling of arithmetic operations; branch, skip, jump and shift instructions, ALU-its components. Introduction of Control Unit The Control Unit may be defined as a part of system for retrieving of instructions in proper sequence and the interpretation of each instruction and process applications with proper signal to the arithmetic unit. Control unit and arithmetical logical process each instruction using memory. The function of control unit or circuit is exist in every general purpose computer that\u2019s work as a process of instructions, instruction word and proper sequence for the necessary signals to a particular section of the computer that section perform executions on instructions. Control unit have various types of components and memory devices. Instruction Word A Computer word is an order of characters that handle as a group. All word consist of a set of binary numbers and that\u2019s meaning depend on several factors","title":"Unit \u2013III"},{"location":"de/UnitIV/","text":"Unit \u2013IV Link Addressing techniques and registers: Addressing techniques-Direct, immediate addressing; paging, relative, Indirect and indexed addressing. Memory buffer register; accumulators; Registers-Indexed, General purpose, Special purpose; overflow, carry, shift, scratch registers; stack pointers; floating point; status information and buffer registers. Instruction Link An instruction is a command given to the computer to perform a specified operation on given data. Each instruction consists of 2 parts: an opcode and an operand. The first part of an instruction, which specifies the operation, to be performed is known as opcode. The second part of an instruction called operand is the data on which computer perform the specified operation. As a computer understands instructions only in the form of 0 & 1, instruction and data are fed into the computer is a binary form. They are written in binary codes known as machine codes. For the convenience of this user the codes can be written in hexical form. Instructions are classified into the following three types according to their word length: Single Byte Instruction Two Byte Instruction Three Byte Instruction Addressing Link Addressing techniques: Addressing modes are the method used to determine which part of memory is being referred to by a machine instruction. There are various types of addressing modes. Which addressing mode is used is dependent on what type of is being used. Random access memory (RAM) is the primary area of memory for a computer. This is where any application must be loaded to if it is to be run. The central processing unit reads machine instructions from the RAM and acts on those instructions. This is what happens whenever any application is run on a computer. The machine instructions given to the CPU often must refer to specific portions of the RAM. In order to do this, the CPU must have a way of knowing which portion of RAM the machine instruction is referring to. This is where addressing modes come into play. Addressing modes are used to divide up the sections of RAM into individual portions that may be referenced individually. This is similar to how each house has an address. This address can then be used by a machine instruction to refer to a specific portion of memory. The CPU will then access that portion of memory and perform the action specified by the machine instruction. There are many different types of addressing modes. Different types of computer architecture feature different types of addressing modes. This results in an incompatibility of software. If an application is designed for one type of addressing mode, then it will not be able to run when used on a system that uses a different type of addressing mode. It will be much like speaking to someone in a language he does not understand. The specifics of each type of addressing mode are important for computer programmers using assembly language. This type of is a direct representation of the machine instructions sent to the CPU. This is what makes assembly language able to produce programs that can run several times faster than other programming languages. Assembly language is used in the development of operating systems. A computer programmer must know the type of addressing modes used on the specific computer architecture before he can write a functioning operating system or application in assembly. The differences between addressing modes are part of the reason that applications are unable to run on different computer architectures. Direct addressing Link In direct addressing mode, effective address of the operand is given in the address field of the instruction. It requires one memory reference to read the operand from the given location and provides only a limited address space. Length of the address field is usually less than the word length. Ex : Move P, Ro, Add Q, Ro P and Q are the address of operand. A very simple form of addressing is direct addressing, in which: Address field contains address of operand Effective address (EA) = address field (A) e.g. ADD A ;Add contents of cell A to accumulator. The technique was common in earlier generations of computers but is not common on contemporary architectures. It requires only one memory reference and no spe\u00adcial calculation. The obvious limitation is that it provides only a limited address space. Indirect addressing Link Indirect addressing mode, the address field of the instruction refers to the address of a word in memory, which in turn contains the full length address of the operand. The advantage of this mode is that for the word length of N, an address space of 2N can be addressed. He disadvantage is that instruction execution requires two memory reference to fetch the operand Multilevel or cascaded indirect addressing can also be used. With direct addressing, the length of the address field is usually less than the word length, thus limiting the address range. One solution is to have the address field refer to the address of a word in memory, which in turn contains a full-length address of the operand. This is known as indirect addressing. Immediate addressing Link This is the simplest form of addressing. Here, the operand is given in the instruction itself. This mode is used to define a constant or set initial values of variables. The advantage of this mode is that no memory reference other than instruction fetch is required to obtain operand. The disadvantage is that the size of the number is limited to the size of the address field, which most instruction sets is small compared to word length. The simplest way for an instruction to specify an operand is for the address part of the instruction actually to contain the operand itself rather than an address or other information describing where the operand is. Such an operand is called an immediate operand because it is automatically fetched from memory at the same time the instruction itself is fetched; hence it is immediately available for use. A possible immediate instruction for loading register R1 with the constant 4 is shown in Fig. 5-17. The simplest form of addressing is immediate addressing, in which the operand is actually present in the instruction: Operand is part of instruction Operand = address field e.g. ADD 5 ;Add 5 to contents of accumulator ;5 is operand. op-code operand The advantage of immediate addressing is that no memory reference other than the instruction fetch is required to obtain the operand, thus saving one mem\u00adory or cache cycle in the instruction cycle. The disadvantage is that the size of the number is restricted to the size of the address field, which, in most instruction sets, is small compared with the word length. Relative addressing Link This is a combination of direct addressing and register indirect addressing. The value contained in one address field. A is used directly and the other address refers to a register whose contents are added to A to produce the effective address. Indexed addressing- It is also known as direct addressing mode. When you know the right offset of the address of the memory you need. For example if you have an array, then if you need the N-th element of the array, you just add N sizes of the variables to the starting address of the array. As an oposite it is the sequential addressing mode (or indirect) where you cant calculate the exact address by just offset of the beginning. If the size of each element in the array is not known (for example if you have N null terminated string which size is not known) you need to traverse all the N-1 elements until you find the one you need - the N-th one :) Register Addressing Link Register addressing is similar to direct addressing. The only difference is that the address field refers to a register rather than a main memory address. The advantages of register addressing are that : Only a small address field is needed in the instruction No memory 'references are required, faster instruction fetch The disadvantage of register addressing is that the address space is very limited. Register Indirect Addressing: Link Just as register addressing is analogous to direct addressing, register indirect ad\u00addressing is analogous to indirect addressing. In both cases, the only difference is whether the address field refers to a memory location or a register. Thus, for register indirect address: Operand is in memory cell pointed to by contents of register. Displacement Addressing: Link A very powerful mode of addressing combines the capabilities of direct addressing and register indirect addressing. It is known by a variety of names depending on the context of its use but the basic mechanism is the same. We will refer to this as displacement addressing, address field hold two values: A = base value R = register that holds displacement. Autoincrement /Autodecrement Mode Link A special case of indirect register mode. The register whose number is included in the instruction code, contains the address of the operand. Autoincrement Mode = after operand addressing , the contents of the register is incremented. Decrement Mode = before operand addressing, the contents of the register is decrement. Example: SPIM/SAL - - simulating autoincrement/autodecrement addressing mode (**MIPS **has no autoincrement/autodecrement mode) lw $3, array1($17) #load in reg. $3 word at address array1($17) addi $17,$17,4 #increment address (32-bit words) after accessing #operand this can be re-written in a \"autoincrement like mode\": lw+ $3,array1($17) # lw+ is not a real MIPS instruction subi $17,$17,4 # decrement address before accessing the operand lw $3,array1($17) NOTE: the above sequence can be re-rewritten proposing an \"autodecrement instruction\", not real in MIPS architecture. -lw $3, array1($17) Register Link Introduction Link A CPU contains a number of register to store data temporarily during the execution of a program. The number of registers differs from processor to processor. Register are classified as follows : General Purpose Registers Accumulator Special Purpose Register General Purpose Registers Link There registers store data & intermediate results during execution of a program. They are accessible to users through instructions if the users are working in assembly language. Store data (arguments and result of instructions.) can be assinged variety of user programmes. Accumulator Link Its the most important GPR having multiple functions. It\u201f s most efficient in data movement, arithmetic and logical operation. It has some special features that the other GPR do not have. After the execution of arithmetic and logical instruction the result is placed in the accumulator. Accumulators on a tabulating machine circa 1936. Each of the four registers can store a 10-digit decimal number. In a computer's central processing unit (CPU), an accumulator is a register in which intermediate arithmetic and logic results are stored. Without a register like an accumulator, it would be necessary to write the result of each calculation (addition, multiplication, shift, etc.) to main memory, perhaps only to be read right back again for use in the next operation. Access to main memory is slower than access to a register like the accumulator because the technology used for the large main memory is slower (but cheaper) than that used for a register. The canonical example for accumulator use is summing a list of numbers. The accumulator is initially set to zero, then each number in turn is read and added to the value in the accumulator. Only when all numbers have been added is the result held in the accumulator written to main memory or to another, non-accumulator, CPU register. An accumulator machine, also called a 1-operand machine, or a CPU with accumulator-based architecture, is a kind of CPU where, although it may have several registers, the CPU mostly stores the results of calculations in one special register, typically called \"the accumulator\". Historically almost all early computers were accumulator machines; and many microcontrollers still popular as of 2010 (such as the 68HC12, the PICmicro, the 8051 and several others) are basically accumulator Special Purpose Register Link A CPU contains a number of special purpose register for different purposes. Responsible for storing information that is essential for running DLX programs. Types are : Program Counter (PC) Stack Pointer (SP) Instruction Register (IR) Index Register Memory Address Register (MAR) Memory Buffer Register (MBR) Program Counter (PC) Link Stack Pointer (SP) Link A stack pointer is a small register that stores the address of the last program request in a stack. A stack is a specialized buffer which stores data from the top down. As new requests come in, they \"push down\" the older ones. The most recently entered request always resides at the top of the stack, and the program always takes requests from the top. A stack (also called a pushdown stack) operates in a last-in/first-out sense. When a new data item is entered or \"pushed\" onto the top of a stack, the stack pointer increments to the next physical memory address, and the new item is copied to that address. When a data item is \"pulled\" or \"popped\" from the top of a stack, the item is copied from the address of the stack pointer, and the stack pointer decrements to the next available item at the top of the stack. Instruction Register (IR) Link Index Register Link computer\u2019s cpu is a processor register used for modifying operand addresses during the run of a program, typically for doing vector/array oprations. Index register were first used in the British Manchester mark 1 computer,in 1949. Index register are used for a special kind of addressing where an immdiate constant (i.e., which is part of the instruction it self) is added to the content of a register to form the actual operands or data; architecture which allow more then one register to be used this way nuturally have an opcode field for specifiying which register to use. Memory Address Register (MAR) Link Memory Buffer Register (MBR) Link A Memory Buffer Register (MBR) is the register in a computer 's processor, or central processing unit , CPU, that stores the data being transferred to and from the immediate access store. It acts as a buffer allowing the processor and memory units to act independently without being affected by minor differences in operation. A data item will be copied to the MBR ready for use at the next clock cycle, when it can be either used by the processor or stored in main memory. This register holds the contents of the memory which are to be transferred from memory to other components or vice versa. A word to be stored must be transferred to the MBR, from where it goes to the specific memory location, and the arithmetic data to be processed in the ALU first goes to MBR and then to accumulated register, and then it is processed in the ALU. Overflow register Link that the signed result of an opretion is too large to fit in the register width using twos complement representation. Carry register Link store numbers large than a single word to be added /subtracted by carrying a binary digit from a less significant word to the large significent bit of a more significent word as needed.it is also used to extend bit shifts and rotates in a similar manner on many processor. Shift register Link the shift register is another type of sequential logic circuit that is used for the storage or transfer of data in the form of binary numbers and than \u201cshift\u201d the data out once every clock cycle, hence the name shift register.it basically consists of several single bit \u201cD-type data latches\u201d, one for each bit (0-1) connected together in a serial or daisy-chain arrangment so that the output from one data latch becomes the input of the next latch and so on. The data bits may be fed in or out of the register serially,i.e. one after the other from either the left or the right direction, or in parllel,i.e. all together. The number of individual data latches required to make up a singnal shift register is determinde by the number of bits to be stored with the most common being 8-bits wide. Stack register Link A stack can be orgnized as a collection of finite number of register that are used to store temporary information during the execution of a program. The stack pointer(sp)is a register that holds the address of top of element of the stack. Floating Point Register Link In computing , floating point describes a method of representing an approximation to real numbers in a way that can support a wide range of values. The numbers are, in general, represented approximately to a fixed number of significant digits (the mantissa) and scaled using an exponent . The base for the scaling is normally 2, 10 or 16. The typical number that can be represented exactly is of the form: Significant digits \u00d7 baseexponent The idea of floating-point representation over intrinsically integer fixed-point numbers, which consist purely of significand , is that expanding it with the exponent component achieves greater range. For instance, to represent large values, e.g. distances between galaxies, there is no need to keep all 39 decimal places down to femtometre -resolution, employed in particle physics. Assuming that the best resolution is in light years , only 9 most significant decimal digits matter whereas 30 others bear pure noise and, thus, can be safely dropped. This is 100-bit saving in storage. Instead of these 100 bits, much fewer are used to represent the scale (the exponent), e.g. 8 bits or 2 decimal digits. Now, one number can encode the astronomic and subatomic distances with the same 9 digits of accuracy. But, because 9 digits are 100 times less accurate than 9+2 digits reserved for scale, this is considered as precision -for-range trade-off . The example also explains that using scaling to extend the dynamic range results in another contrast with usual fixed-point numbers: their values are not uniformly spaced. Small values, the ones close to zero, can be represented with much higher resolution (1 femtometre) than distant ones because greater scale (light years) must be selected for encoding significantly larger values.[ 1] That is, floating-point cannot represent point coordinates with atomic accuracy in the other galaxy, only close to the origin. The term floating point refers to the fact that their radix point (decimal point, or, more commonly in computers, binary point) can \"float\"; that is, it can be placed anywhere relative to the significant digits of the number. This position is indicated as the exponent component in the internal representation, and floating-point can thus be thought of as a computer realization of scientific notation . Over the years, a variety of floating-point representations have been used in computers. However, since the 1990s, the most commonly encountered representation is that defined by the IEEE 754 Standard. The speed of floating-point operations, commonly referred to in performance measurements as FLOPS , is an important machine characteristic, especially in software that performs large-scale mathematical calculations. Status information and buffer registers Link A buffer register is the simplest kind of register; all it does is store a digital information temporarily. It holds the contents of the memory which are to be transferred from memory to other components. By acting as a buffer, it allows the central processor and memory units to operate independently without being affected by minor differences in operation. Integrated Circuit Link An integrated circuit (IC) can be the equivalent of dozens, hundreds, or thousands of separate electronic parts. Digital ICs, such as microprocessors, can equal millions of parts. Now, digital and mixed signal ICs are finding more applications in analog systems. The integrated circuit was introduced in 1958. It has been called the most significant technological development of the twentieth century. Integrated circuits have allowed electronics to expand at an amazing rate. Much of the growth has been in the area of digital electronics. Lately, analog ICs have received more attention, and the designation \u201cmixed-signal\u201d is now applied to ICs that combine digital and analog functions. Electronics is growing rapidly. One major reason is the advance in performance while costs remain stable and sometimes decrease. Circuits have become a lot smaller, more reliable, and more energy efficient. Witness the many portable devices available today. Integrated circuit technology is the major force behind the growth in the electronics industry. Consider that many systems and devices that we now enjoy were not practical or even possible a decade ago. Discrete circuits use individual resistors, capacitors, diodes, transistors, and other devices to achieve the circuit function. These individual or discrete parts must be interconnected. The usual approach is to use a circuit board. This method, however, increases the cost of the circuit. The board, assembly, soldering, and testing all make up a part of the cost. Integrated circuits do not eliminate the need for circuit boards, assembly, soldering, and testing. However, with ICs the number of discrete parts can be reduced. This means that the circuit boards can be smaller, often use less power, and that they will cost less to produce. It may also be possible to reduce the overall size of the equipment by using integrated circuits, which can reduce costs in the chassis and cabinet. Integrated circuits may lead to circuits that require fewer alignment steps at the factory. This is especially true with digital devices. Alignment is expensive, and fewer steps mean lower costs. Also, variable components are more expensive than fixed components, and if some components can be eliminated, savings are realized. Finally, variable components are not as reliable as fixed components. There are various style in packaging of Integrated circuits DIP (dual in-line package) SOJ (small outline J leads) TSOP (thin small outline package) QFJ (quad flat J leads) TQFP (thin quad flat package) TCP (tape carrier package) BGA (ball grid array) CSP (chip-size package) SOP(small outline package) SSOP(shrink small outline package) ZIP(zigzag in-line package) QFP(quad flat package) LQFP(low-profile quad flat package) PGA(pin grid array) LGA(land grid array) Small-Scale Integration (SSI) Link SSI devices contain several independent electronic components in a single package. The inputs and outputs are connected directly to the pins in the package. The number of components is less than 10 in every package. Logic Gates like inverters, AND gate, OR gate and etc. are products of SSI. Medium Scale Integration (MSI) Link MSI devices has a complexity of 10 to 100 electronic components in a single package. They usually perform basic and specific digital operations and includes decoders, adders, counters, multiplexers, and demultiplexers. Large Scale Integration (LSI) Link Products of LSI contain between 100 and 10,000 electronic components in a single package. They include memory modules, I/O controllers, and 4-bit microprocessor systems. Very Large Scale Integration (VLSI) Link Devices that are results of VLSI contain between 10,000 and 300,000 electronic components. VLSI produces large memory modules and 8bit, 16-bit, and 32-bit microprocessor systems. Super Large Scale Integration (SLSI) Link This kind is a new type of integration which produces ICs having more than 300,000 electronic components in one package. Examples of devices which use SLSI are 64-bit microprocessor systems and microcontrollers. Buses, Types of buses, Bus Interconnections Link Bus Interconnection Link A bus is a communication pathway connecting two or more devices. Bus is a shared transmission medium. Multiple devices connect to the bus, and a signal transmitted by any one device is available for reception by all other devices attached to the bus. If two devices transmit during the same time period, their signals will overlap and become garbled. Thus, only one device at a time can successfully transmit. Typically, a bus consists of multiple communication pathways, or lines. Each line is capable of transmitting signals representing binary 1 and binary 0. Over time, a sequence of binary digits can be transmitted across a single line. Taken together, several lines of a bus can be used to transmit binary digits simultaneously (in parallel). For example, an 8-bit unit of data can be transmitted over eight bus lines. Computer systems contain a number of different buses that provide pathways between components at various levels of the computer system hierarchy. The most common computer interconnection structures are based on the use of one or more system buses (Control buses, Address Buses, Data Lines). Bus Structure Link A system bus consists, typically, of from about 50 to hundreds of separate lines. Each line is assigned a particular meaning or function. Although there are many different bus designs, on any bus the lines can be classified into three functional groups data, address, and control lines. In addition, there may be power distribution lines that supply power to the attached modules. The data lines provide a path for moving data among system modules. These lines, collectively, are called the data bus. The data bus may consist of 32, 64, 128, or even more separate lines, the number of lines being referred to as the width of the data bus. Because each line can carry only 1 bit at a time, the number of lines determines how many bits can be transferred at a time. The width of the data bus is a key factor in determining overall system performance. For example, if the data bus is 32 bits wide and each instruction is 64 bits long, then the processor must access the memory module twice during each instruction cycle. The address lines are used to designate the source or destination of the data on the data bus. For example, if the processor wishes to read a word (8, 16, or 32 bits) of data from memory, it puts the address of the desired word on the address lines. Clearly, the width of the address bus determines the maximum possible memory capacity of the system. Furthermore, the address lines are generally also used to address I/O ports. Typically, the higher-order bits are used to select a particular module on the bus, and the lower-order bits select a memory location or I/O port within the module. For example, on an 8-bit address bus, address 01111111 and below might reference locations in a memory module (module 0) with 128 words of memory, and address 10000000 and above refer to devices attached to an I/O module (module 1). The control lines are used to control the access to and the use of the data and address lines. Because the data and address lines are shared by all components, there must be a means of controlling their use. Control signals transmit both command and timing information among system modules. Timing signals indicate the validity of data and address information. Command signals specify operations to be performed. Typical control lines include Memory write: Causes data on the bus to be written into the addressed location Memory read: Causes data from the addressed location to be placed on the bus I/O write: Causes data on the bus to be output to the addressed I/O port I/O read: Causes data from the addressed I/O port to be placed on the bus Transfer ACK: Indicates that data have been accepted from or placed on the bus Bus request: Indicates that a module needs to gain control of the bus Bus grant: Indicates that a requesting module has been granted control of the bus Interrupt request: Indicates that an interrupt is pending Interrupt ACK: Acknowledges that the pending interrupt has been recognized Clock: Is used to synchronize operations Reset: Initializes all modules The operation of the bus is as follows. If one module wishes to send data to another, it must do two things: Obtain the use of the bus, and transfer data via the bus. If one module wishes to request data from another module, it must Obtain the use of the bus, and transfer a request to the other module over the appropriate control and address lines. It must then wait for that second module to send the data. Physically, the system bus is actually a number of parallel electrical conductors. In the classic bus arrangement, these conductors are metal lines etched in a card or board (printed circuit board). The bus extends across all of the system components, each of which taps into some or all of the bus lines. \u202f METHOD OF ARBITRATION Link In all but the simplest systems, more than one module may need control of the bus. For example, an I/O module may need to read or write directly to memory, without sending the data to the processor. Because only one unit at a time can successfully transmit over the bus, some method of arbitration is needed. The various methods can be roughly classified as being either centralized or distributed. In a centralized scheme, a single hardware device, referred to as a bus controller or arbiter, is responsible for allocating time on the bus. The device may be a separate module or part of the processor. In a distributed scheme, there is no central controller. Rather, each module contains access control logic and the modules act together to share the bus. With both methods of arbitration, the purpose is to designate one device, either the processor or an I/O module, as master. The master may then initiate a data transfer (e.g., read or write) with some other device, which acts as slave for this particular exchange. I/O versus Memory Bus In addition to communicating with I/O, the processor must communicate with the memory unit. Like the I/O bus, the memory bus contains data, address, and read/write control lines. There are three ways that computer buses can be used to communicate with memory and I/O: Use two separate buses, one for memory and the other for I/O. Use one common bus for both memory and I/O but have separate control lines for each. Use one common bus for memory and I/O with common control lines. In the first method, the computer has independent sets of data, address, and control buses, one for accessing memory and the other for I/O. This is done in computers that provide a separate I/O processor (IOP) in addition to the central processing unit (CPU). \"The memory communicates with both the CPU and the IOP through a memory bus. The IOP communicates also with the input and output devices through a separate I/O bus with its own address, data and control lines. The purpose of the IOP is to provide an independent pathway for the transfer of information between external devices and internal memory. The I/O processor is sometimes called a data channel.","title":"UnitIV"},{"location":"de/UnitIV/#unit-iv","text":"Addressing techniques and registers: Addressing techniques-Direct, immediate addressing; paging, relative, Indirect and indexed addressing. Memory buffer register; accumulators; Registers-Indexed, General purpose, Special purpose; overflow, carry, shift, scratch registers; stack pointers; floating point; status information and buffer registers.","title":"Unit \u2013IV"},{"location":"de/UnitIV/#instruction","text":"An instruction is a command given to the computer to perform a specified operation on given data. Each instruction consists of 2 parts: an opcode and an operand. The first part of an instruction, which specifies the operation, to be performed is known as opcode. The second part of an instruction called operand is the data on which computer perform the specified operation. As a computer understands instructions only in the form of 0 & 1, instruction and data are fed into the computer is a binary form. They are written in binary codes known as machine codes. For the convenience of this user the codes can be written in hexical form. Instructions are classified into the following three types according to their word length: Single Byte Instruction Two Byte Instruction Three Byte Instruction","title":"Instruction"},{"location":"de/UnitIV/#addressing","text":"Addressing techniques: Addressing modes are the method used to determine which part of memory is being referred to by a machine instruction. There are various types of addressing modes. Which addressing mode is used is dependent on what type of is being used. Random access memory (RAM) is the primary area of memory for a computer. This is where any application must be loaded to if it is to be run. The central processing unit reads machine instructions from the RAM and acts on those instructions. This is what happens whenever any application is run on a computer. The machine instructions given to the CPU often must refer to specific portions of the RAM. In order to do this, the CPU must have a way of knowing which portion of RAM the machine instruction is referring to. This is where addressing modes come into play. Addressing modes are used to divide up the sections of RAM into individual portions that may be referenced individually. This is similar to how each house has an address. This address can then be used by a machine instruction to refer to a specific portion of memory. The CPU will then access that portion of memory and perform the action specified by the machine instruction. There are many different types of addressing modes. Different types of computer architecture feature different types of addressing modes. This results in an incompatibility of software. If an application is designed for one type of addressing mode, then it will not be able to run when used on a system that uses a different type of addressing mode. It will be much like speaking to someone in a language he does not understand. The specifics of each type of addressing mode are important for computer programmers using assembly language. This type of is a direct representation of the machine instructions sent to the CPU. This is what makes assembly language able to produce programs that can run several times faster than other programming languages. Assembly language is used in the development of operating systems. A computer programmer must know the type of addressing modes used on the specific computer architecture before he can write a functioning operating system or application in assembly. The differences between addressing modes are part of the reason that applications are unable to run on different computer architectures.","title":"Addressing"},{"location":"de/UnitIV/#direct-addressing","text":"In direct addressing mode, effective address of the operand is given in the address field of the instruction. It requires one memory reference to read the operand from the given location and provides only a limited address space. Length of the address field is usually less than the word length. Ex : Move P, Ro, Add Q, Ro P and Q are the address of operand. A very simple form of addressing is direct addressing, in which: Address field contains address of operand Effective address (EA) = address field (A) e.g. ADD A ;Add contents of cell A to accumulator. The technique was common in earlier generations of computers but is not common on contemporary architectures. It requires only one memory reference and no spe\u00adcial calculation. The obvious limitation is that it provides only a limited address space.","title":"Direct addressing"},{"location":"de/UnitIV/#indirect-addressing","text":"Indirect addressing mode, the address field of the instruction refers to the address of a word in memory, which in turn contains the full length address of the operand. The advantage of this mode is that for the word length of N, an address space of 2N can be addressed. He disadvantage is that instruction execution requires two memory reference to fetch the operand Multilevel or cascaded indirect addressing can also be used. With direct addressing, the length of the address field is usually less than the word length, thus limiting the address range. One solution is to have the address field refer to the address of a word in memory, which in turn contains a full-length address of the operand. This is known as indirect addressing.","title":"Indirect addressing"},{"location":"de/UnitIV/#immediate-addressing","text":"This is the simplest form of addressing. Here, the operand is given in the instruction itself. This mode is used to define a constant or set initial values of variables. The advantage of this mode is that no memory reference other than instruction fetch is required to obtain operand. The disadvantage is that the size of the number is limited to the size of the address field, which most instruction sets is small compared to word length. The simplest way for an instruction to specify an operand is for the address part of the instruction actually to contain the operand itself rather than an address or other information describing where the operand is. Such an operand is called an immediate operand because it is automatically fetched from memory at the same time the instruction itself is fetched; hence it is immediately available for use. A possible immediate instruction for loading register R1 with the constant 4 is shown in Fig. 5-17. The simplest form of addressing is immediate addressing, in which the operand is actually present in the instruction: Operand is part of instruction Operand = address field e.g. ADD 5 ;Add 5 to contents of accumulator ;5 is operand. op-code operand The advantage of immediate addressing is that no memory reference other than the instruction fetch is required to obtain the operand, thus saving one mem\u00adory or cache cycle in the instruction cycle. The disadvantage is that the size of the number is restricted to the size of the address field, which, in most instruction sets, is small compared with the word length.","title":"Immediate addressing"},{"location":"de/UnitIV/#relative-addressing","text":"This is a combination of direct addressing and register indirect addressing. The value contained in one address field. A is used directly and the other address refers to a register whose contents are added to A to produce the effective address. Indexed addressing- It is also known as direct addressing mode. When you know the right offset of the address of the memory you need. For example if you have an array, then if you need the N-th element of the array, you just add N sizes of the variables to the starting address of the array. As an oposite it is the sequential addressing mode (or indirect) where you cant calculate the exact address by just offset of the beginning. If the size of each element in the array is not known (for example if you have N null terminated string which size is not known) you need to traverse all the N-1 elements until you find the one you need - the N-th one :)","title":"Relative addressing"},{"location":"de/UnitIV/#register-addressing","text":"Register addressing is similar to direct addressing. The only difference is that the address field refers to a register rather than a main memory address. The advantages of register addressing are that : Only a small address field is needed in the instruction No memory 'references are required, faster instruction fetch The disadvantage of register addressing is that the address space is very limited.","title":"Register Addressing"},{"location":"de/UnitIV/#register-indirect-addressing","text":"Just as register addressing is analogous to direct addressing, register indirect ad\u00addressing is analogous to indirect addressing. In both cases, the only difference is whether the address field refers to a memory location or a register. Thus, for register indirect address: Operand is in memory cell pointed to by contents of register.","title":"Register Indirect Addressing:"},{"location":"de/UnitIV/#displacement-addressing","text":"A very powerful mode of addressing combines the capabilities of direct addressing and register indirect addressing. It is known by a variety of names depending on the context of its use but the basic mechanism is the same. We will refer to this as displacement addressing, address field hold two values: A = base value R = register that holds displacement.","title":"Displacement Addressing:"},{"location":"de/UnitIV/#autoincrement-autodecrement-mode","text":"A special case of indirect register mode. The register whose number is included in the instruction code, contains the address of the operand. Autoincrement Mode = after operand addressing , the contents of the register is incremented. Decrement Mode = before operand addressing, the contents of the register is decrement. Example: SPIM/SAL - - simulating autoincrement/autodecrement addressing mode (**MIPS **has no autoincrement/autodecrement mode) lw $3, array1($17) #load in reg. $3 word at address array1($17) addi $17,$17,4 #increment address (32-bit words) after accessing #operand this can be re-written in a \"autoincrement like mode\": lw+ $3,array1($17) # lw+ is not a real MIPS instruction subi $17,$17,4 # decrement address before accessing the operand lw $3,array1($17) NOTE: the above sequence can be re-rewritten proposing an \"autodecrement instruction\", not real in MIPS architecture. -lw $3, array1($17)","title":"Autoincrement /Autodecrement Mode"},{"location":"de/UnitIV/#register","text":"","title":"Register"},{"location":"de/UnitIV/#introduction","text":"A CPU contains a number of register to store data temporarily during the execution of a program. The number of registers differs from processor to processor. Register are classified as follows : General Purpose Registers Accumulator Special Purpose Register","title":"Introduction"},{"location":"de/UnitIV/#general-purpose-registers","text":"There registers store data & intermediate results during execution of a program. They are accessible to users through instructions if the users are working in assembly language. Store data (arguments and result of instructions.) can be assinged variety of user programmes.","title":"General Purpose Registers"},{"location":"de/UnitIV/#accumulator","text":"Its the most important GPR having multiple functions. It\u201f s most efficient in data movement, arithmetic and logical operation. It has some special features that the other GPR do not have. After the execution of arithmetic and logical instruction the result is placed in the accumulator. Accumulators on a tabulating machine circa 1936. Each of the four registers can store a 10-digit decimal number. In a computer's central processing unit (CPU), an accumulator is a register in which intermediate arithmetic and logic results are stored. Without a register like an accumulator, it would be necessary to write the result of each calculation (addition, multiplication, shift, etc.) to main memory, perhaps only to be read right back again for use in the next operation. Access to main memory is slower than access to a register like the accumulator because the technology used for the large main memory is slower (but cheaper) than that used for a register. The canonical example for accumulator use is summing a list of numbers. The accumulator is initially set to zero, then each number in turn is read and added to the value in the accumulator. Only when all numbers have been added is the result held in the accumulator written to main memory or to another, non-accumulator, CPU register. An accumulator machine, also called a 1-operand machine, or a CPU with accumulator-based architecture, is a kind of CPU where, although it may have several registers, the CPU mostly stores the results of calculations in one special register, typically called \"the accumulator\". Historically almost all early computers were accumulator machines; and many microcontrollers still popular as of 2010 (such as the 68HC12, the PICmicro, the 8051 and several others) are basically accumulator","title":"Accumulator"},{"location":"de/UnitIV/#special-purpose-register","text":"A CPU contains a number of special purpose register for different purposes. Responsible for storing information that is essential for running DLX programs. Types are : Program Counter (PC) Stack Pointer (SP) Instruction Register (IR) Index Register Memory Address Register (MAR) Memory Buffer Register (MBR)","title":"Special Purpose Register"},{"location":"de/UnitIV/#program-counter-pc","text":"","title":"Program Counter (PC)"},{"location":"de/UnitIV/#stack-pointer-sp","text":"A stack pointer is a small register that stores the address of the last program request in a stack. A stack is a specialized buffer which stores data from the top down. As new requests come in, they \"push down\" the older ones. The most recently entered request always resides at the top of the stack, and the program always takes requests from the top. A stack (also called a pushdown stack) operates in a last-in/first-out sense. When a new data item is entered or \"pushed\" onto the top of a stack, the stack pointer increments to the next physical memory address, and the new item is copied to that address. When a data item is \"pulled\" or \"popped\" from the top of a stack, the item is copied from the address of the stack pointer, and the stack pointer decrements to the next available item at the top of the stack.","title":"Stack Pointer (SP)"},{"location":"de/UnitIV/#instruction-register-ir","text":"","title":"Instruction Register (IR)"},{"location":"de/UnitIV/#index-register","text":"computer\u2019s cpu is a processor register used for modifying operand addresses during the run of a program, typically for doing vector/array oprations. Index register were first used in the British Manchester mark 1 computer,in 1949. Index register are used for a special kind of addressing where an immdiate constant (i.e., which is part of the instruction it self) is added to the content of a register to form the actual operands or data; architecture which allow more then one register to be used this way nuturally have an opcode field for specifiying which register to use.","title":"Index Register"},{"location":"de/UnitIV/#memory-address-register-mar","text":"","title":"Memory Address Register (MAR)"},{"location":"de/UnitIV/#memory-buffer-register-mbr","text":"A Memory Buffer Register (MBR) is the register in a computer 's processor, or central processing unit , CPU, that stores the data being transferred to and from the immediate access store. It acts as a buffer allowing the processor and memory units to act independently without being affected by minor differences in operation. A data item will be copied to the MBR ready for use at the next clock cycle, when it can be either used by the processor or stored in main memory. This register holds the contents of the memory which are to be transferred from memory to other components or vice versa. A word to be stored must be transferred to the MBR, from where it goes to the specific memory location, and the arithmetic data to be processed in the ALU first goes to MBR and then to accumulated register, and then it is processed in the ALU.","title":"Memory Buffer Register (MBR)"},{"location":"de/UnitIV/#overflow-register","text":"that the signed result of an opretion is too large to fit in the register width using twos complement representation.","title":"Overflow register"},{"location":"de/UnitIV/#carry-register","text":"store numbers large than a single word to be added /subtracted by carrying a binary digit from a less significant word to the large significent bit of a more significent word as needed.it is also used to extend bit shifts and rotates in a similar manner on many processor.","title":"Carry register"},{"location":"de/UnitIV/#shift-register","text":"the shift register is another type of sequential logic circuit that is used for the storage or transfer of data in the form of binary numbers and than \u201cshift\u201d the data out once every clock cycle, hence the name shift register.it basically consists of several single bit \u201cD-type data latches\u201d, one for each bit (0-1) connected together in a serial or daisy-chain arrangment so that the output from one data latch becomes the input of the next latch and so on. The data bits may be fed in or out of the register serially,i.e. one after the other from either the left or the right direction, or in parllel,i.e. all together. The number of individual data latches required to make up a singnal shift register is determinde by the number of bits to be stored with the most common being 8-bits wide.","title":"Shift register"},{"location":"de/UnitIV/#stack-register","text":"A stack can be orgnized as a collection of finite number of register that are used to store temporary information during the execution of a program. The stack pointer(sp)is a register that holds the address of top of element of the stack.","title":"Stack register"},{"location":"de/UnitIV/#floating-point-register","text":"In computing , floating point describes a method of representing an approximation to real numbers in a way that can support a wide range of values. The numbers are, in general, represented approximately to a fixed number of significant digits (the mantissa) and scaled using an exponent . The base for the scaling is normally 2, 10 or 16. The typical number that can be represented exactly is of the form: Significant digits \u00d7 baseexponent The idea of floating-point representation over intrinsically integer fixed-point numbers, which consist purely of significand , is that expanding it with the exponent component achieves greater range. For instance, to represent large values, e.g. distances between galaxies, there is no need to keep all 39 decimal places down to femtometre -resolution, employed in particle physics. Assuming that the best resolution is in light years , only 9 most significant decimal digits matter whereas 30 others bear pure noise and, thus, can be safely dropped. This is 100-bit saving in storage. Instead of these 100 bits, much fewer are used to represent the scale (the exponent), e.g. 8 bits or 2 decimal digits. Now, one number can encode the astronomic and subatomic distances with the same 9 digits of accuracy. But, because 9 digits are 100 times less accurate than 9+2 digits reserved for scale, this is considered as precision -for-range trade-off . The example also explains that using scaling to extend the dynamic range results in another contrast with usual fixed-point numbers: their values are not uniformly spaced. Small values, the ones close to zero, can be represented with much higher resolution (1 femtometre) than distant ones because greater scale (light years) must be selected for encoding significantly larger values.[ 1] That is, floating-point cannot represent point coordinates with atomic accuracy in the other galaxy, only close to the origin. The term floating point refers to the fact that their radix point (decimal point, or, more commonly in computers, binary point) can \"float\"; that is, it can be placed anywhere relative to the significant digits of the number. This position is indicated as the exponent component in the internal representation, and floating-point can thus be thought of as a computer realization of scientific notation . Over the years, a variety of floating-point representations have been used in computers. However, since the 1990s, the most commonly encountered representation is that defined by the IEEE 754 Standard. The speed of floating-point operations, commonly referred to in performance measurements as FLOPS , is an important machine characteristic, especially in software that performs large-scale mathematical calculations.","title":"Floating Point Register"},{"location":"de/UnitIV/#status-information-and-buffer-registers","text":"A buffer register is the simplest kind of register; all it does is store a digital information temporarily. It holds the contents of the memory which are to be transferred from memory to other components. By acting as a buffer, it allows the central processor and memory units to operate independently without being affected by minor differences in operation.","title":"Status information and buffer registers"},{"location":"de/UnitIV/#integrated-circuit","text":"An integrated circuit (IC) can be the equivalent of dozens, hundreds, or thousands of separate electronic parts. Digital ICs, such as microprocessors, can equal millions of parts. Now, digital and mixed signal ICs are finding more applications in analog systems. The integrated circuit was introduced in 1958. It has been called the most significant technological development of the twentieth century. Integrated circuits have allowed electronics to expand at an amazing rate. Much of the growth has been in the area of digital electronics. Lately, analog ICs have received more attention, and the designation \u201cmixed-signal\u201d is now applied to ICs that combine digital and analog functions. Electronics is growing rapidly. One major reason is the advance in performance while costs remain stable and sometimes decrease. Circuits have become a lot smaller, more reliable, and more energy efficient. Witness the many portable devices available today. Integrated circuit technology is the major force behind the growth in the electronics industry. Consider that many systems and devices that we now enjoy were not practical or even possible a decade ago. Discrete circuits use individual resistors, capacitors, diodes, transistors, and other devices to achieve the circuit function. These individual or discrete parts must be interconnected. The usual approach is to use a circuit board. This method, however, increases the cost of the circuit. The board, assembly, soldering, and testing all make up a part of the cost. Integrated circuits do not eliminate the need for circuit boards, assembly, soldering, and testing. However, with ICs the number of discrete parts can be reduced. This means that the circuit boards can be smaller, often use less power, and that they will cost less to produce. It may also be possible to reduce the overall size of the equipment by using integrated circuits, which can reduce costs in the chassis and cabinet. Integrated circuits may lead to circuits that require fewer alignment steps at the factory. This is especially true with digital devices. Alignment is expensive, and fewer steps mean lower costs. Also, variable components are more expensive than fixed components, and if some components can be eliminated, savings are realized. Finally, variable components are not as reliable as fixed components. There are various style in packaging of Integrated circuits DIP (dual in-line package) SOJ (small outline J leads) TSOP (thin small outline package) QFJ (quad flat J leads) TQFP (thin quad flat package) TCP (tape carrier package) BGA (ball grid array) CSP (chip-size package) SOP(small outline package) SSOP(shrink small outline package) ZIP(zigzag in-line package) QFP(quad flat package) LQFP(low-profile quad flat package) PGA(pin grid array) LGA(land grid array)","title":"Integrated Circuit"},{"location":"de/UnitIV/#small-scale-integration-ssi","text":"SSI devices contain several independent electronic components in a single package. The inputs and outputs are connected directly to the pins in the package. The number of components is less than 10 in every package. Logic Gates like inverters, AND gate, OR gate and etc. are products of SSI.","title":"Small-Scale Integration (SSI)"},{"location":"de/UnitIV/#medium-scale-integration-msi","text":"MSI devices has a complexity of 10 to 100 electronic components in a single package. They usually perform basic and specific digital operations and includes decoders, adders, counters, multiplexers, and demultiplexers.","title":"Medium Scale Integration (MSI)"},{"location":"de/UnitIV/#large-scale-integration-lsi","text":"Products of LSI contain between 100 and 10,000 electronic components in a single package. They include memory modules, I/O controllers, and 4-bit microprocessor systems.","title":"Large Scale Integration (LSI)"},{"location":"de/UnitIV/#very-large-scale-integration-vlsi","text":"Devices that are results of VLSI contain between 10,000 and 300,000 electronic components. VLSI produces large memory modules and 8bit, 16-bit, and 32-bit microprocessor systems.","title":"Very Large Scale Integration (VLSI)"},{"location":"de/UnitIV/#super-large-scale-integration-slsi","text":"This kind is a new type of integration which produces ICs having more than 300,000 electronic components in one package. Examples of devices which use SLSI are 64-bit microprocessor systems and microcontrollers.","title":"Super Large Scale Integration (SLSI)"},{"location":"de/UnitIV/#buses-types-of-buses-bus-interconnections","text":"","title":"Buses, Types of buses, Bus Interconnections"},{"location":"de/UnitIV/#bus-interconnection","text":"A bus is a communication pathway connecting two or more devices. Bus is a shared transmission medium. Multiple devices connect to the bus, and a signal transmitted by any one device is available for reception by all other devices attached to the bus. If two devices transmit during the same time period, their signals will overlap and become garbled. Thus, only one device at a time can successfully transmit. Typically, a bus consists of multiple communication pathways, or lines. Each line is capable of transmitting signals representing binary 1 and binary 0. Over time, a sequence of binary digits can be transmitted across a single line. Taken together, several lines of a bus can be used to transmit binary digits simultaneously (in parallel). For example, an 8-bit unit of data can be transmitted over eight bus lines. Computer systems contain a number of different buses that provide pathways between components at various levels of the computer system hierarchy. The most common computer interconnection structures are based on the use of one or more system buses (Control buses, Address Buses, Data Lines).","title":"Bus Interconnection"},{"location":"de/UnitIV/#bus-structure","text":"A system bus consists, typically, of from about 50 to hundreds of separate lines. Each line is assigned a particular meaning or function. Although there are many different bus designs, on any bus the lines can be classified into three functional groups data, address, and control lines. In addition, there may be power distribution lines that supply power to the attached modules. The data lines provide a path for moving data among system modules. These lines, collectively, are called the data bus. The data bus may consist of 32, 64, 128, or even more separate lines, the number of lines being referred to as the width of the data bus. Because each line can carry only 1 bit at a time, the number of lines determines how many bits can be transferred at a time. The width of the data bus is a key factor in determining overall system performance. For example, if the data bus is 32 bits wide and each instruction is 64 bits long, then the processor must access the memory module twice during each instruction cycle. The address lines are used to designate the source or destination of the data on the data bus. For example, if the processor wishes to read a word (8, 16, or 32 bits) of data from memory, it puts the address of the desired word on the address lines. Clearly, the width of the address bus determines the maximum possible memory capacity of the system. Furthermore, the address lines are generally also used to address I/O ports. Typically, the higher-order bits are used to select a particular module on the bus, and the lower-order bits select a memory location or I/O port within the module. For example, on an 8-bit address bus, address 01111111 and below might reference locations in a memory module (module 0) with 128 words of memory, and address 10000000 and above refer to devices attached to an I/O module (module 1). The control lines are used to control the access to and the use of the data and address lines. Because the data and address lines are shared by all components, there must be a means of controlling their use. Control signals transmit both command and timing information among system modules. Timing signals indicate the validity of data and address information. Command signals specify operations to be performed. Typical control lines include Memory write: Causes data on the bus to be written into the addressed location Memory read: Causes data from the addressed location to be placed on the bus I/O write: Causes data on the bus to be output to the addressed I/O port I/O read: Causes data from the addressed I/O port to be placed on the bus Transfer ACK: Indicates that data have been accepted from or placed on the bus Bus request: Indicates that a module needs to gain control of the bus Bus grant: Indicates that a requesting module has been granted control of the bus Interrupt request: Indicates that an interrupt is pending Interrupt ACK: Acknowledges that the pending interrupt has been recognized Clock: Is used to synchronize operations Reset: Initializes all modules The operation of the bus is as follows. If one module wishes to send data to another, it must do two things: Obtain the use of the bus, and transfer data via the bus. If one module wishes to request data from another module, it must Obtain the use of the bus, and transfer a request to the other module over the appropriate control and address lines. It must then wait for that second module to send the data. Physically, the system bus is actually a number of parallel electrical conductors. In the classic bus arrangement, these conductors are metal lines etched in a card or board (printed circuit board). The bus extends across all of the system components, each of which taps into some or all of the bus lines.","title":"Bus Structure"},{"location":"de/UnitIV/#method-of-arbitration","text":"In all but the simplest systems, more than one module may need control of the bus. For example, an I/O module may need to read or write directly to memory, without sending the data to the processor. Because only one unit at a time can successfully transmit over the bus, some method of arbitration is needed. The various methods can be roughly classified as being either centralized or distributed. In a centralized scheme, a single hardware device, referred to as a bus controller or arbiter, is responsible for allocating time on the bus. The device may be a separate module or part of the processor. In a distributed scheme, there is no central controller. Rather, each module contains access control logic and the modules act together to share the bus. With both methods of arbitration, the purpose is to designate one device, either the processor or an I/O module, as master. The master may then initiate a data transfer (e.g., read or write) with some other device, which acts as slave for this particular exchange. I/O versus Memory Bus In addition to communicating with I/O, the processor must communicate with the memory unit. Like the I/O bus, the memory bus contains data, address, and read/write control lines. There are three ways that computer buses can be used to communicate with memory and I/O: Use two separate buses, one for memory and the other for I/O. Use one common bus for both memory and I/O but have separate control lines for each. Use one common bus for memory and I/O with common control lines. In the first method, the computer has independent sets of data, address, and control buses, one for accessing memory and the other for I/O. This is done in computers that provide a separate I/O processor (IOP) in addition to the central processing unit (CPU). \"The memory communicates with both the CPU and the IOP through a memory bus. The IOP communicates also with the input and output devices through a separate I/O bus with its own address, data and control lines. The purpose of the IOP is to provide an independent pathway for the transfer of information between external devices and internal memory. The I/O processor is sometimes called a data channel.","title":"METHOD OF ARBITRATION"},{"location":"de/UnitV/","text":"Unit \u2013V Link Memory: Main, RAM, static and Dynamic, ROM, EPROM, EAROM, EEPROM, Cache and Virtual memory. Interconnecting System components: Buses, Interfacing buses, Bus formats-address, data and control, Interfacing keyboard, display, auxiliary storage devices, and printers. I/O cards in personal computers. Development of Indian Super Computer \u2018PARAM\u2019: History, Characteristics, Strengths, Weakness and basic Architecture. Supercomputer Link A supercomputer is a computer with a high level of computing performance compared to a general-purpose computer. Performance of a supercomputer is measured in floating-point operations per second (FLOPS) instead of million instructions per second (MIPS). As of 2017, there are supercomputers which can perform up to nearly a hundred quadrillions of FLOPS, measured in P(eta)FLOPS. As of November 2017, all of the world's fastest 500 supercomputers run Linux-based operating systems. Supercomputers play an important role in the field of computational science, and are used for a wide range of computationally intensive tasks in various fields, including quantum mechanics, weather forecasting, climate research, oil and gas exploration, molecular modeling (computing the structures and properties of chemical compounds, biological macromolecules, polymers, and crystals), and physical simulations (such as simulations of the early moments of the universe, airplane and spacecraft aerodynamics, the detonation of nuclear weapons, and nuclear fusion). Throughout their history, they have been essential in the field of cryptanalysis. Supercomputers were introduced in the 1960s, and for several decades the fastest were made by Seymour Cray at Control Data Corporation (CDC), Cray Research and subsequent companies bearing his name or monogram. The first such machines were highly tuned conventional designs that ran faster than their more general-purpose contemporaries. Through the 1960s, they began to add increasing amounts of parallelism with one to four processors being typical. From the 1970s, the vector computing concept with specialized math units operating on large arrays of data came to dominate. A notable example is the highly successful Cray-1 of 1976. Vector computers remained the dominant design into the 1990s. From then until today, massively parallel supercomputers with tens of thousands of off-the-shelf processors became the norm. Param Link PARAM is a series of supercomputers designed and assembled by the Centre for Development of Advanced Computing (C-DAC) in Pune, India. The latest machine in the series is the PARAM ISHAN. Param means supreme in Sanskrit Language. History Link After being denied Cray supercomputers[1], India has started a program to develop indigenous supercomputers and supercomputing technologies. These supercomputers were also capable of assisting in the development of Nuclear Weapons.[4] For the purpose of achieving self-sufficiency in the field, the Centre for Development of Advanced Computing (C-DAC) was set up in 1988 by the then Department of Electronics with Dr. Vijay Bhatkar as its Director.[1] The project was given an initial run of 3 years and an initial funding of \u20b9 300,000,000, the same amount of money and time that was usually expended to purchase a supercomputer from the US.[1] In 1990, a prototype was produced and was benchmarked at the 1990 Zurich Supercomputering Show. It surpassed most other systems, placing India second after US. The final result of the effort was the PARAM 8000, which was installed in 1991. Timeline Link Name Release Year CPUs Technology Speed Main Contributor PARAM 8000 1991 64 Inmos T800 Transputers, Distributed Memory MIMD PARAM 8600 256 Intel i860 5 GFLOPS PARAM 9900/SS 32 to 200 SuperSPARC II, clos network PARAM 9900/US 32 to 200 UltraSPARC , clos network PARAM 9900/AA 32 to 200 DEC Alpha , clos network PARAM 10000 1998 160 Sun Enterprise 250 , 400Mhz UltraSPARC UltraSPARC II processor 6.4 GFLOPS PARAM Padma 2003 - April 1TB storage, 248 IBM Power4 - 1GHz, IBM AIX 5.1L , PARAMNet 1024 GFLOPS PARAM Yuva 2008 - November 4608 cores, Intel 73XX - 2.9 GHz, 25 to 200 TB, PARAMnet 3 38.1 to 54 TFLOPS PARAM Yuva II 2013 - February - 08 524 TFLOPS CDAC PARAM Kanchenjunga[ 6] 2016 - April - 17 15 TFLOPS CDAC and NIT Sikkim PARAM SHAVAK 2016 3.8 TFLOPS C-DAC PARAM YUVA II 2017 532 TFLOPS PARAM ISHAN[ 7] 20 September 2016 300 Terabits capacity 250 TFLOPS C-DAC and IIT Guwahati PARAM Series Link PARAM 8000 Link Unveiled in 1991, PARAM 8000 used Inmos T800 transputers. Transputers were a fairly new and innovative microprocessor architecture designed for parallel processing at the time. It was a distributed memory MIMD architecture with a reconfigurable interconnection network.[8] It had 64 CPUs. Exported to Germany, UK and Russia.[9] PARAM 8600 Link PARAM 8600 was an improvement over PARAM 8000. It was a 256 CPU computer. For every four Inmos T800, it employed an Intel i860 coprocessor.[8] The result was over 5 GFLOPS at peak for vector processing. Several of these models were exported. PARAM 9900/SS Link PARAM 9900/SS was designed to be a MPP system. It used the SuperSPARC II processor. The design was changed to be modular so that newer processors could be easily accommodated. Typically, it used 32-40 processors. But, it could be scaled up to 200 CPUs using the clos network topology.[8] PARAM 9900/US was the UltraSPARC variant and PARAM 9900/AA was the DEC Alpha variant. PARAM 10000 Link In 1998, the PARAM 10000 was unveiled. PARAM 10000 used several independent nodes, each based on the Sun Enterprise 250 server and each such server contained two 400Mhz UltraSPARC II processors. The base configuration had three compute nodes and a server node. The peak speed of this base system was 6.4 GFLOPS.[10] A typical system would contain 160 CPUs and be capable of 100 GFLOPS[11] But, it was easily scalable to the TFLOP range. Exported to Russia and Singapore.[12] PARAM Padma Link PARAM Padma (Padma means Lotus in Sanskrit) was introduced in April 2003.[3] It had a peak speed of 1024 GFLOPS (about 1 TFLOP) and a peak storage of 1 TB. It used 248 IBM Power4 CPUs of 1 GHz each. The operating system was IBM AIX 5.1L. It used PARAMnet II as its primary interconnect.[11] It was the first Indian supercomputer to break the 1 TFLOP barrier.[13] PARAM Yuva Link PARAM Yuva (Yuva means Youth in Sanskrit) was unveiled in November 2008. It has a maximum sustainable speed (Rmax) of 38.1 TFLOPS and a peak speed (Rpeak) of 54 TFLOPS.[14] There are 4608 cores in it, based on Intel 73XX of 2.9 GHz each. It has a storage capacity of 25 TB up to 200 TB.[15] It uses PARAMnet 3 as its primary interconnect.[13] Further developments Link In July 2009, it was announced that C-DAC was developing a new high-speed PARAM. It was expected to be unveiled by 2012 and was expected to break the 1 PetaFLOPS barrier.[16] In November 2014 it was reported that India is working on the Fastest supercomputer ever which is set to work at 132 Exaflops per second.[17] Param Yuva II Link Param Yuva II was made by Centre for Development of Advanced Computing in a period of three months, at a cost of \u20b916 crore (US$3 million), and was unveiled on 8 February 2013. It performs at a peak of 524 teraflops and consumes 35% less energy as compared to Param Yuva. It delivers sustained performance of 360.8 teraflops on the community standard Linpack benchmark, and would have been ranked 62 in the November 2012 ranking list of Top500. In terms of power efficiency, it would have been ranked 33 rd in the November 2012 List of Top Green500 supercomputers of the world.[18][19] It is the first Indian supercomputer achieving more than 500 teraflops.[20][21] Param Yuva II will be used for research in space, bioinformatics, weather forecasting, seismic data analysis, aeronautical engineering, scientific data processing and pharmaceutical development. Educational institutes like the Indian Institutes of Technology and National Institutes of Technology can be linked to the computer through the national knowledge network. This computer is a stepping stone towards building the future petaflop-range supercomputers in India. PARAMNet Link PARAMNet is a high speed high bandwidth low latency network developed for the PARAM series. The original PARAMNet used an 8 port cascadable non-blocking switch developed by C-DAC. Each port provided 400 Mb/s in both directions (thus 2x400 Mbit/s) as it was a full-duplex network. It was first used in PARAM 10000.[5] PARAMNet II Link PARAMNet II, introduced with PARAM Padma, is capable of 2.5 Gb/s while working full-duplex. It supports interfaces like Virtual Interface Architecture and Active messages. It uses 8 or 16 port SAN switches. The grid computing network GARUDA is also based on it. Operators Link PARAM supercomputers are used by both public and private operators for various purposes. As of 2008, 52 PARAMs have been deployed. Of these, 8 are located in Russia, Singapore, Germany and Canada.[13] PARAMs have also been sold to Tanzania, Armenia, Saudi Arabia, Singapore, Ghana, Myanmar, Nepal, Kazakhstan, Uzbekistan, and Vietnam. Param Machine Architecture Link Cluster Personality Data Link Provider Interface (DLPI)driver allows mapping ofcommon network protocols to the underlying network MPP(Massively Parallel Processor) Personality Architecture allows micro kernel to be loaded on compute nodes implements custom designed ConcurrentRuntime Environment (CORE) Standard message passing interface Parallel Virtual Machine (PVM) Message Passing Interface (MPI) Storage Architecture Link Storage is provided by Storage array and Tape library Storage Area Network PARAM Padma has a network centric storage architecture Storage capacity of 5 TB scalable to 22TB Use of Fiber Channel Arbitration Loop(FC-AL) technology to interconnect storage subsystems Applications of PARAM Link Bioinformatics stimulations of large bio molecules analysis of large databases for studying functions of genes Computational Structural Mechanics fracture analysis stress analysis visualization for structural and fluid mechanics study of thin walled structures Seismic Data Processing for oil and natural gas exploration Computational Chemistry calculation of electronic structure and properties of molecules molecular dynamics simulation Computational Fluid Dynamics simulation of external and internal flows simulation of hypersonic flows Advantage and Disadvantage Link Advantages: Solve bigger problems Run more problems in shorter time May save money Allows for virtual testing Can be used for R&D Disadvantages: Can be expensive Takes up a lot of space May only be good for specific applications Does not replace physical testing Requires trained staff","title":"UnitV"},{"location":"de/UnitV/#unit-v","text":"Memory: Main, RAM, static and Dynamic, ROM, EPROM, EAROM, EEPROM, Cache and Virtual memory. Interconnecting System components: Buses, Interfacing buses, Bus formats-address, data and control, Interfacing keyboard, display, auxiliary storage devices, and printers. I/O cards in personal computers. Development of Indian Super Computer \u2018PARAM\u2019: History, Characteristics, Strengths, Weakness and basic Architecture.","title":"Unit \u2013V"},{"location":"de/UnitV/#supercomputer","text":"A supercomputer is a computer with a high level of computing performance compared to a general-purpose computer. Performance of a supercomputer is measured in floating-point operations per second (FLOPS) instead of million instructions per second (MIPS). As of 2017, there are supercomputers which can perform up to nearly a hundred quadrillions of FLOPS, measured in P(eta)FLOPS. As of November 2017, all of the world's fastest 500 supercomputers run Linux-based operating systems. Supercomputers play an important role in the field of computational science, and are used for a wide range of computationally intensive tasks in various fields, including quantum mechanics, weather forecasting, climate research, oil and gas exploration, molecular modeling (computing the structures and properties of chemical compounds, biological macromolecules, polymers, and crystals), and physical simulations (such as simulations of the early moments of the universe, airplane and spacecraft aerodynamics, the detonation of nuclear weapons, and nuclear fusion). Throughout their history, they have been essential in the field of cryptanalysis. Supercomputers were introduced in the 1960s, and for several decades the fastest were made by Seymour Cray at Control Data Corporation (CDC), Cray Research and subsequent companies bearing his name or monogram. The first such machines were highly tuned conventional designs that ran faster than their more general-purpose contemporaries. Through the 1960s, they began to add increasing amounts of parallelism with one to four processors being typical. From the 1970s, the vector computing concept with specialized math units operating on large arrays of data came to dominate. A notable example is the highly successful Cray-1 of 1976. Vector computers remained the dominant design into the 1990s. From then until today, massively parallel supercomputers with tens of thousands of off-the-shelf processors became the norm.","title":"Supercomputer"},{"location":"de/UnitV/#param","text":"PARAM is a series of supercomputers designed and assembled by the Centre for Development of Advanced Computing (C-DAC) in Pune, India. The latest machine in the series is the PARAM ISHAN. Param means supreme in Sanskrit Language.","title":"Param"},{"location":"de/UnitV/#history","text":"After being denied Cray supercomputers[1], India has started a program to develop indigenous supercomputers and supercomputing technologies. These supercomputers were also capable of assisting in the development of Nuclear Weapons.[4] For the purpose of achieving self-sufficiency in the field, the Centre for Development of Advanced Computing (C-DAC) was set up in 1988 by the then Department of Electronics with Dr. Vijay Bhatkar as its Director.[1] The project was given an initial run of 3 years and an initial funding of \u20b9 300,000,000, the same amount of money and time that was usually expended to purchase a supercomputer from the US.[1] In 1990, a prototype was produced and was benchmarked at the 1990 Zurich Supercomputering Show. It surpassed most other systems, placing India second after US. The final result of the effort was the PARAM 8000, which was installed in 1991.","title":"History"},{"location":"de/UnitV/#timeline","text":"Name Release Year CPUs Technology Speed Main Contributor PARAM 8000 1991 64 Inmos T800 Transputers, Distributed Memory MIMD PARAM 8600 256 Intel i860 5 GFLOPS PARAM 9900/SS 32 to 200 SuperSPARC II, clos network PARAM 9900/US 32 to 200 UltraSPARC , clos network PARAM 9900/AA 32 to 200 DEC Alpha , clos network PARAM 10000 1998 160 Sun Enterprise 250 , 400Mhz UltraSPARC UltraSPARC II processor 6.4 GFLOPS PARAM Padma 2003 - April 1TB storage, 248 IBM Power4 - 1GHz, IBM AIX 5.1L , PARAMNet 1024 GFLOPS PARAM Yuva 2008 - November 4608 cores, Intel 73XX - 2.9 GHz, 25 to 200 TB, PARAMnet 3 38.1 to 54 TFLOPS PARAM Yuva II 2013 - February - 08 524 TFLOPS CDAC PARAM Kanchenjunga[ 6] 2016 - April - 17 15 TFLOPS CDAC and NIT Sikkim PARAM SHAVAK 2016 3.8 TFLOPS C-DAC PARAM YUVA II 2017 532 TFLOPS PARAM ISHAN[ 7] 20 September 2016 300 Terabits capacity 250 TFLOPS C-DAC and IIT Guwahati","title":"Timeline"},{"location":"de/UnitV/#param-series","text":"","title":"PARAM Series"},{"location":"de/UnitV/#param-8000","text":"Unveiled in 1991, PARAM 8000 used Inmos T800 transputers. Transputers were a fairly new and innovative microprocessor architecture designed for parallel processing at the time. It was a distributed memory MIMD architecture with a reconfigurable interconnection network.[8] It had 64 CPUs. Exported to Germany, UK and Russia.[9]","title":"PARAM 8000"},{"location":"de/UnitV/#param-8600","text":"PARAM 8600 was an improvement over PARAM 8000. It was a 256 CPU computer. For every four Inmos T800, it employed an Intel i860 coprocessor.[8] The result was over 5 GFLOPS at peak for vector processing. Several of these models were exported.","title":"PARAM 8600"},{"location":"de/UnitV/#param-9900ss","text":"PARAM 9900/SS was designed to be a MPP system. It used the SuperSPARC II processor. The design was changed to be modular so that newer processors could be easily accommodated. Typically, it used 32-40 processors. But, it could be scaled up to 200 CPUs using the clos network topology.[8] PARAM 9900/US was the UltraSPARC variant and PARAM 9900/AA was the DEC Alpha variant.","title":"PARAM 9900/SS"},{"location":"de/UnitV/#param-10000","text":"In 1998, the PARAM 10000 was unveiled. PARAM 10000 used several independent nodes, each based on the Sun Enterprise 250 server and each such server contained two 400Mhz UltraSPARC II processors. The base configuration had three compute nodes and a server node. The peak speed of this base system was 6.4 GFLOPS.[10] A typical system would contain 160 CPUs and be capable of 100 GFLOPS[11] But, it was easily scalable to the TFLOP range. Exported to Russia and Singapore.[12]","title":"PARAM 10000"},{"location":"de/UnitV/#param-padma","text":"PARAM Padma (Padma means Lotus in Sanskrit) was introduced in April 2003.[3] It had a peak speed of 1024 GFLOPS (about 1 TFLOP) and a peak storage of 1 TB. It used 248 IBM Power4 CPUs of 1 GHz each. The operating system was IBM AIX 5.1L. It used PARAMnet II as its primary interconnect.[11] It was the first Indian supercomputer to break the 1 TFLOP barrier.[13]","title":"PARAM Padma"},{"location":"de/UnitV/#param-yuva","text":"PARAM Yuva (Yuva means Youth in Sanskrit) was unveiled in November 2008. It has a maximum sustainable speed (Rmax) of 38.1 TFLOPS and a peak speed (Rpeak) of 54 TFLOPS.[14] There are 4608 cores in it, based on Intel 73XX of 2.9 GHz each. It has a storage capacity of 25 TB up to 200 TB.[15] It uses PARAMnet 3 as its primary interconnect.[13]","title":"PARAM Yuva"},{"location":"de/UnitV/#further-developments","text":"In July 2009, it was announced that C-DAC was developing a new high-speed PARAM. It was expected to be unveiled by 2012 and was expected to break the 1 PetaFLOPS barrier.[16] In November 2014 it was reported that India is working on the Fastest supercomputer ever which is set to work at 132 Exaflops per second.[17]","title":"Further developments"},{"location":"de/UnitV/#param-yuva-ii","text":"Param Yuva II was made by Centre for Development of Advanced Computing in a period of three months, at a cost of \u20b916 crore (US$3 million), and was unveiled on 8 February 2013. It performs at a peak of 524 teraflops and consumes 35% less energy as compared to Param Yuva. It delivers sustained performance of 360.8 teraflops on the community standard Linpack benchmark, and would have been ranked 62 in the November 2012 ranking list of Top500. In terms of power efficiency, it would have been ranked 33 rd in the November 2012 List of Top Green500 supercomputers of the world.[18][19] It is the first Indian supercomputer achieving more than 500 teraflops.[20][21] Param Yuva II will be used for research in space, bioinformatics, weather forecasting, seismic data analysis, aeronautical engineering, scientific data processing and pharmaceutical development. Educational institutes like the Indian Institutes of Technology and National Institutes of Technology can be linked to the computer through the national knowledge network. This computer is a stepping stone towards building the future petaflop-range supercomputers in India.","title":"Param Yuva II"},{"location":"de/UnitV/#paramnet","text":"PARAMNet is a high speed high bandwidth low latency network developed for the PARAM series. The original PARAMNet used an 8 port cascadable non-blocking switch developed by C-DAC. Each port provided 400 Mb/s in both directions (thus 2x400 Mbit/s) as it was a full-duplex network. It was first used in PARAM 10000.[5]","title":"PARAMNet"},{"location":"de/UnitV/#paramnet-ii","text":"PARAMNet II, introduced with PARAM Padma, is capable of 2.5 Gb/s while working full-duplex. It supports interfaces like Virtual Interface Architecture and Active messages. It uses 8 or 16 port SAN switches. The grid computing network GARUDA is also based on it.","title":"PARAMNet II"},{"location":"de/UnitV/#operators","text":"PARAM supercomputers are used by both public and private operators for various purposes. As of 2008, 52 PARAMs have been deployed. Of these, 8 are located in Russia, Singapore, Germany and Canada.[13] PARAMs have also been sold to Tanzania, Armenia, Saudi Arabia, Singapore, Ghana, Myanmar, Nepal, Kazakhstan, Uzbekistan, and Vietnam.","title":"Operators"},{"location":"de/UnitV/#param-machine-architecture","text":"Cluster Personality Data Link Provider Interface (DLPI)driver allows mapping ofcommon network protocols to the underlying network MPP(Massively Parallel Processor) Personality Architecture allows micro kernel to be loaded on compute nodes implements custom designed ConcurrentRuntime Environment (CORE) Standard message passing interface Parallel Virtual Machine (PVM) Message Passing Interface (MPI)","title":"Param Machine Architecture"},{"location":"de/UnitV/#storage-architecture","text":"Storage is provided by Storage array and Tape library Storage Area Network PARAM Padma has a network centric storage architecture Storage capacity of 5 TB scalable to 22TB Use of Fiber Channel Arbitration Loop(FC-AL) technology to interconnect storage subsystems","title":"Storage Architecture"},{"location":"de/UnitV/#applications-of-param","text":"Bioinformatics stimulations of large bio molecules analysis of large databases for studying functions of genes Computational Structural Mechanics fracture analysis stress analysis visualization for structural and fluid mechanics study of thin walled structures Seismic Data Processing for oil and natural gas exploration Computational Chemistry calculation of electronic structure and properties of molecules molecular dynamics simulation Computational Fluid Dynamics simulation of external and internal flows simulation of hypersonic flows","title":"Applications of PARAM"},{"location":"de/UnitV/#advantage-and-disadvantage","text":"Advantages: Solve bigger problems Run more problems in shorter time May save money Allows for virtual testing Can be used for R&D Disadvantages: Can be expensive Takes up a lot of space May only be good for specific applications Does not replace physical testing Requires trained staff","title":"Advantage and Disadvantage"},{"location":"dsa/","text":"BCA 204 : Data Structure Time: 3 Hrs Max. Marks: 100 Link Old Paper Unit I Link Introduction: structure and problem solving, algorithmic notation, Data Structure, Algorithms and sub algorithms, introduction to algorithm analysis for time and space Unit II Link Primitive and non-primitive data structure concept, representation and manipulation of strings, concept and terminology for non-primitive data structure, concept of arrays, stacks, queues. Basic operations on arrays, stacks & queues. Unit III Link Linear data structures and their linked storage representation: pointers and linked allocation, linked linear list, singly linked list, application of linked linear lists. Unit IV Link Non Linear data structure: Trees, types of trees, Graphs and their representations, applications of graph. Unit V Link Sorting and searching: concept of sorting and searching, selection sort, bubble sort, merge sort, binary search Text / Reference Books An Introduction to Data Structures with Applications, Tremblay & Sorenson's, Tata Mcgraw hills publications. Data structure and algorithms, Aho., Alfred V., Pearson Education. Fundamentals of Data structure in C, Horowitz, Ellis, Galgotia publication. Introduction to Data Structure and algorithms with C++ , Rowe, Glenn W., Prentice , Hall Data structures using C and C++ , Langsun , Augenstein , Tenenbaum Aaron M, Prentice Hall","title":"BCA 204 : Data Structure  Time: 3 Hrs Max. Marks: 100"},{"location":"dsa/#bca-204-data-structure-time-3-hrs-max-marks-100","text":"Old Paper","title":"BCA 204 : Data Structure  Time: 3 Hrs Max. Marks: 100"},{"location":"dsa/#unit-i","text":"Introduction: structure and problem solving, algorithmic notation, Data Structure, Algorithms and sub algorithms, introduction to algorithm analysis for time and space","title":"Unit I"},{"location":"dsa/#unit-ii","text":"Primitive and non-primitive data structure concept, representation and manipulation of strings, concept and terminology for non-primitive data structure, concept of arrays, stacks, queues. Basic operations on arrays, stacks & queues.","title":"Unit II"},{"location":"dsa/#unit-iii","text":"Linear data structures and their linked storage representation: pointers and linked allocation, linked linear list, singly linked list, application of linked linear lists.","title":"Unit III"},{"location":"dsa/#unit-iv","text":"Non Linear data structure: Trees, types of trees, Graphs and their representations, applications of graph.","title":"Unit IV"},{"location":"dsa/#unit-v","text":"Sorting and searching: concept of sorting and searching, selection sort, bubble sort, merge sort, binary search Text / Reference Books An Introduction to Data Structures with Applications, Tremblay & Sorenson's, Tata Mcgraw hills publications. Data structure and algorithms, Aho., Alfred V., Pearson Education. Fundamentals of Data structure in C, Horowitz, Ellis, Galgotia publication. Introduction to Data Structure and algorithms with C++ , Rowe, Glenn W., Prentice , Hall Data structures using C and C++ , Langsun , Augenstein , Tenenbaum Aaron M, Prentice Hall","title":"Unit V"},{"location":"dsa/Paper/","text":"2017 Link Unit-1 Solve Following Define the following: Data Structure Algorithm Program Space Complexity Discuss various algorithmic notation. Also explain what do you mean by problem solving ? 4\u00d72=8 Solve Write a short note on time complexity and space complexity of an algorithm. 8 Explain the use of data structure. How is it helpful ? 7 Unit II Solve what do you mean by one-dimensional array ? Explain with example. 3 How can you access the elements of 1-D array and store them ? 4 Explain how the insertion and deletion operations are performed on an 1-D array ? 6 What do you mean by string ? 2 Solve Write short notes on: 8 (i) Stack (ii) Queue Explain the operations that can be performed on stack as well as queue. 7 Unit - III Solve Define the following: 4 (i) Linear data structure (ii) Non-linear data structure (iii) Pointer (iv) Linked list Write a program and explain it that how an element can be inserted and deleted in a singly linked list. 11 Solve (a) What do you mean by linked storage representation ? 2 (b) What are the applications of a linked list ? 6 \u00a9 Write a program segment to traverse the least element of a singly linked list. 7 Unit - IV Link Solve Define with example the following data structures: 4 Tree Any one type of tree What do you mean by height balanced tree ? Explain with an example. 4 Insert the following numbers in an AVL tree : 15, 22, 8, 63, 28, 72, 82, 89, 95. Solve What do you mean by Graph in data structure ? Give examples. 2 Differentiate between graph and tree. 2 Explain the two types of graph traversal with example. 8 What is the use of graph in data structure ? Give an example. 2 What is an edge and vertex in graph ? 1 Unit -V Link Solve Following What do you mean by sorting ? 1 Write short notes on any two with example : 2\u00d75=10 Quick sort Bubble sort Merge sort Write an algorithm for merge sort. 4 Solve Explain the concept of binary search with an example. 8 Write an algorithm to search an element in an array using linear search algorithm. 5 Differentiate between linear search and library search. 2 2016 Link Unit-I Solve Following What do you understand by data structure? What are the types of data structure? List out the areas in which data structure are applied extensively. Explain the various aspects of problem solving in detail. Also, discuss pros and cons of each. 8+7 Solve Following What is an algorithm? Explain briefly about the sequence of steps involve in designing and analysis of algorithm. Explain time and space complexity of an algorithm. 10+5 Unit-II Solve Following What is meant by one-dimensional array? Discuss how the elements Of 1-D array are stored and access. Write an algorithm to find maximum and minimum values of number stored in 2-D array. 8+7 Solve Following What do you mean by stack? Differentiate between array and stack. Write down the procedure for implementing various stack operation. What is a Queue? What are the drawbacks of linear queue? 10+5 Unit-III Solve Following What is a linked list? What are its applications? Explain with an example cursor implementation of linked list. Write an algorithm to insert an element into a linked list. 10+5 Explain with suitable program segments any four operations of linked list. 15 Unit-IV Solve Following What do you mean by tree? Define types of tree in detail. Insert the following data types in an AVL tree: 16, 23, 9, 64, 29, 73, 83, 90, 96. [8+7] Solve Following What do you mean by graph data structure? Explain sequential and linked list implementation of graph data structure. Define the graph traversal in better ? Explain depth first search traversal . [8+7] Unit-V Write short notes on: selection sort Quick sort Merge sort Solve Following Write algorithm for bubble sort. Sort the following list 73, 49, 53, 12, 48, 10, 70, 20. Explain binary search tree with an example. [8+7] 2016(BCA) Link Unit-I Solve Following What do you understand by data structure? What are the types of data structure? List out the areas in which data structure are applied extensively. [8] Answer : A data structure is basically a group of data elements that are put together under one name, and which defines a particular way of storing and organizing data in a computer so that it can be used efficiently. Data structures are used in almost every program or software system. Some common examples of data structures are arrays, linked lists, queues, stacks, binary trees, and hash tables. Data structures are building blocks of a program. A program built using improper data structures may not work as expected. So as a programmer it is mandatory to choose most appropriate data structures for a program. The term data means a value or set of values. It specifies either the value of a variable or a constant (e.g., marks of students, name of an employee, address of a customer, value of pi, etc.). A record is a collection of data items. For example, the name, address, course, and marks obtained are individual data items. But all these data items can be grouped together to form a record. Data structures are generally categorized into two classes: primitive and non-primitive data structures. Primitive and Non-primitive Data Structures Primitive data structures are the fundamental data types which are supported by a programming language. Some basic data types are integer, real, character, and boolean. The terms \u2018data type\u2019, \u2018basic data type\u2019, and \u2018primitive data type\u2019 are often used interchangeably. Non-primitive data structures are those data structures which are created using primitive data structures. Examples of such data structures include linked lists, stacks, trees, and graphs. Non-primitive data structures can further be classified into two categories: linear and non-linear data structures. Linear Data Structure: If the elements of a data structure are stored in a linear or sequential order, then it is a linear data structure. Examples include arrays, linked lists, stacks, and queues. Linear data structures can be represented in memory in two different ways. One way is to have to a linear relationship between elements by means of sequential memory locations. The other way is to have a linear relationship between elements by means of links. Non Linear Data Structure: if the elements of a data structure are not stored in a sequential order, then it is a non-linear data structure. The relationship of adjacency is not maintained between elements of a non-linear data structure. Examples include trees and graphs. Data structures are widely applied in the following areas: Compiler design , Operating system, Statistical analysis, package, DBMS, Numerical analysis, Simulation, Artificial intelligence, Graphics. 1. Explain the various aspects of problem solving in detail. Also, discuss pros and cons of each. [7] Answer: Solve Following What is an algorithm? Explain briefly about the sequence of steps involve in designing and analysis of algorithm. Explain time and space complexity of an algorithm. 10+5 Unit-II Solve Following What is meant by one-dimensional array? Discuss how the elements Of 1-D array are stored and access. Write an algorithm to find maximum and minimum values of number stored in 2-D array. 8+7 Solve Following What do you mean by stack? Differentiate between array and stack. Write down the procedure for implementing various stack operation. What is a Queue? What are the drawbacks of linear queue? 10+5 Unit-III Solve Following What is a linked list? What are its applications? Explain with an example cursor implementation of linked list. Write an algorithm to insert an element into a linked list. 10+5 Explain with suitable program segments any four operations of linked list. 15 Unit-IV Solve Following What do you mean by tree? Define types of tree in detail. Insert the following data types in an AVL tree: 16, 23, 9, 64, 29, 73, 83, 90, 96. [8+7] Solve Following What do you mean by graph data structure? Explain sequential and linked list implementation of graph data structure. Define the graph traversal in better ? Explain depth first search traversal . [8+7] Unit-V Write short notes on: selection sort Quick sort Merge sort Solve Following Write algorithm for bubble sort. Sort the following list 73, 49, 53, 12, 48, 10, 70, 20. Explain binary search tree with an example. [8+7] Unit-I Solve Following what do you understand by data structure? What are the types of data structure? List out the areas in which data structure are applied extensively. Explain the various aspects of problem solving in detail. Also discuss pros and cons of each. Solve Following What is an algorithm? Explain briefly about the sequence of steps involve in designing and analysis of algorithm. Explain time and space complexity of an algorithm. Unit-II Solve Following what is meant by 1-D array? Discuss how the elements of 1-D array are stored and access. Write an algorithm to find maximum and Minimum values of number stored in 2-D array. Write a program to find maximum and Minimum no. for following cases: - for two variable for three variable for an array Unit-III Write a program that perform swapping in following case: - using Three variable using two variable without any arithmetic operator Describe the location of the array for 1-D, 2-D, 3-D. Unit-IV Describe asymptotic analysis of the algorithm and analysis behaviour. Describe following: - modular programming approach top-to -down approach Unit-V Describe pointers at least (150 words) Describe matrix using array data structure and perform addition of two matrices. (MCA) UOK DSA Link Unit \u2013 I Link Solve Following What are different types of data types available in C? What is a good programming language? Define a function? What are different types of functions available in C language? Solve Following Define structured programming? What is a variable and its types? Define a structure and a union. Write a program in C/C++ showing use of structure? Solve Following Explain the characteristics of an efficient program with examples? What is Abstract data type? Describe its implementation and applications? Solve Following Write a C program to multiply two matrices? Explain address arithmetic with reference to array and pointers? Solve Following Define Big-oh. What is usually a size measure of the input? What is the difference between best case and worst case running time? How will you compute the running time of a recursive function? Explain with example? Explain the justification behind the assumption that growth rate can be used to compare two programs? Solve Following Determine the frequency counts (i.e. the number of times a statement is executed) for all the statements in the following program fragment and hence express its time complexity using big-oh. For i = 1 to n do For j = 1 to i do For k = 1 to j do x = x + 1 Describe the time and space complexity for the development of an algorithm. Give four properties of Big-O notation. What is asymptotic analysis of the algorithm? Solve Following What do you understand by abstract data type? Explain row major ordering and column major ordering of multidimensional arrays. Differential between structure and union. Give suitable example. Solve Following What do you understand by structured programming? Explain big oh notation of an algorithm\u2019s time complexity measure. write a program to arrange a list of names. Use array of pointers. 9.Solve Following How pointers are used in C. Explain? Write a program in C to add N numbers using pointers? Solve Following How the execution of a program is calculated? Explain through an example. Write a program in \u2018C\u2019 to create a file. How structure differs from union. Explain? Solve Following What is meant by Data Structures? Differentiate between Linear and non-linear data structures with examples. Write a note on structured programming. Solve Following Write a C program to explain the concept of structure within a structure. Write a C program using pointers to find the length of a character string. Unit \u2013 II Solve Following Differentiate between arrays and linked lists with examples. Also explain the different types of linked lists? Write a program using recursive function to calculate factorial of a number. Perform a dry run of the recursive function and track the stack for the function? Solve Following What do you understand by Data Structure? Explain different types of operation that can be performed on Data Structures? What is stack? Write PUSH and POP Operation for a stack. Convert the following affix Arithmetic expression to postfix notation using stack. A * (B+D)/E - F *(G+H/K) Solve Following Given circular queue with F (Front)=6 and R (Rear)=2 (Where F and R are the Front and Rear Pointers). Then give the values of R and F after each operation in the sequence- Insert, Delete, Delete, Insert, Delete, Insert and Delete. Assume that 4 bytes of storage are required to hold each element of the array begins at bytes 2000 in memory. Give the actual address of elements value [4][2]. Implement a sequential queue that can perform insert and delete functions. Compare overflow and underflow condition for sequential queue with circular queue. Solve Following Write an algorithm to insert an element in a circular queue. What do you understand by generalized list? Implement stack using linked list. Solve Following Consider the following arithmetic infix expression \u2018Q\u2019 : Q : A + (B * C \u2013 (D / \ud835\udc38\ud835\udc39 ) * G) * H By implementing the algorithm, convert the expression into its equivalent postfix expression. What is doubly linked list. How is it differs from single linked list. Explain? Solve Following Write an algorithm to create a linked list of twenty elements. A stack contains the following items S : 10 15 20 30 \u2191 TOP Write an algorithm to insert a new item 100 in the stack? Solve Following What is meant by doubly linked list? Write function or procedure to insert and delete a node from a doubly linked list. Briefly explain the applications of a stack. Solve Following What is the difference between the stack and queue? How the queue is implemented? Explain. Differentiate between recursive and non-recursive procedures with examples. Solve Following What are different types of data structures available in C/C++? Define and draw link list Define an array. What are their types? Write a note on pointers? Solve Following What is recursion? Write a program in C/C++ using recursive function. What is circular linked list? Write an algorithm for insertion of an element in a link list. Solve Following Explain deletion of an element in a doubly linked list. Write algorithm also. Explain the use of stack in a recursive program. Unit \u2013 III Illustrate the different techniques of tree traversal with appropriate examples and diagrams? Describe at least three applications each of tree and graph? Solve Following Discuss the Doubly linked list. Give and explain the algorithm for operations to perform the insertion and removal of a node to and from the Doubly linked list? How will you represent a polynomial using a linked list in memory? Explain. Also represent the following polynomial using linked list in memory :- P(x,y,z) = 8x2y2\ud835\udc67 + 6\ud835\udc66\ud835\udc672 + 3\ud835\udc653\ud835\udc66\ud835\udc67 + 2\ud835\udc65\ud835\udc663\ud835\udc67 \u2212 5x2\ud835\udc663 \u22124\ud835\udc65y2\ud835\udc673 Solve Following Given a linked list whose typical node consist of an INFO and LINK field. Formulate an algorithm which will count the number of nodes in the list. Also formulate an algorithm that will change the INFO field of the Kth node to the value given by \u2019y\u2019? What do you understand with circular linked list? Write functions to insert nodes and delete from circular linked list? Demonstrate the functions through suitable examples? Solve Following What is breadth first search. How is it differs from depth first search. Explain in brief. From the following tree :- Perform : In -order traversal Pre-order traversal Post-order traversal Solve Following What is graph? What are the different representations techniques used by the graph in the computer\u2019s memory. Explain each? Describe binary search tree? Explain the following in brief: Null graph. Pendant graph. Isolated vertex. Directed graph. Solve Following What is meant by Graph? How the graph is traversed? Explain any one method of graph traversing with examples? Write a note on binary search tree. What is meant by tree traversal? Explain the various method of tree traversal using examples? Solve Following What is a binary tree? How is it drawn? Draw a binary tree for the following expression: (A + C) \u2013 C * (D/P). What do you understand by Polish Notations? Write a note on graphs in C++. Solve Following What are tree traversal techniques? Write a note on files in C/C++. What is a set and set theory? Write an algorithm/program for entering an element in doubly linked list. Solve Following Is there any difference between tree and graph? Explain BFS method traversal of suitable graph. What are different operations possible in sets? Explain strictly binary tree and almost complete binary tree. Insert following data in a binary search tree; 23, 0, -11, 100, 215, 25, 6, 9, -27, 92 Traverse the tree in in-order traversal and in pre-order traversal techniques. Unit \u2013 IV Solve Following Apply selection sort to a list of 10 numbers entered by the user to the C program? Differentiate between merge sort and radix sort? What is hashing? Describe the techniques of hashing with examples? Solve Following What do you understand with binary tree? Write functions to formulate the recursive algorithm for traversing a binary tree in order. Also consider the following binary tree: - Determine the order in which the nodes will be visited if the tree traversed in following order: - Pre order Post order In order Obtain the adjacency matrix A of the following diagraph. Find the elementary paths of length 1 and 2 from \ud835\udc491 and \ud835\udc494.Verify the results for calculating, \ud835\udc342, \ud835\udc343 and \ud835\udc344. Explain the linked representation of a Binary tree with an example Construct the Binary Tree for the following traversal. In order L R F E A C D G H B I Post order L E F C D H I B G A Explain the following with examples: - Connected Graph Strongly Connected Graph Unilaterally Graph Complete Graph Construct the Minimum Spanning tree for the following graph - Solve Following Sort the following numbers by using quick sort (explain each step through the algorithm) 33 11 55 77 90 40 60 22 What is searching? Explain linear search. Solve Following Sort the following tables by using merge sort. Table 1 : 15 35 65 90 99 Table 2 : 30 45 75 Explain through the algorithm. Write an algorithm for the binary search. Solve Folowing What is meant by searching ? Discuss the working of binary searching technique? How the efficiency of different sorting algorithms is measured? Make a comparative study of different sorting techniques? Write short note on: Bubble sort Linear searching. Solve Folllowing How the binary search is implemented? Explain with examples? What is meant by hashing? How is it implemented? Explain. Write an algorithm for selection sort. What is hashing? What is external sorting? Write a program in C/C++ for sorting elements of an array. Write short notes on the following: Heap sort; Merger sort; Command line arguments. Apply bubble sort to the following list: 23, 104, 95, 45, 64, 77, 84, 98, 123 Write the algorithm to arrange a list using heap sort. State the difference between merge sort and radix sort. Explain hashing with examples. \u200b Unit \u2013 V Solve Following What is dynamic memory management? Write an algorithm for first fit search? What is garbage collection? How can it be optimized? Solve Following Write an algorithm for best fit memory allocation? What is a stack and a queue? Write a note on buddy system for memory management? Solve Following Explain the differences among first fit, best fit, and worst fit algorithms? Explain garbage creation and removal? Solve Following Explain buddy systems with suitable example? What do you understand by bit map method? Where it is applicable? What do you understand by Dynamic Memory Allocation? Explain with examples? Solve Following What is data compaction? How is it carried out? Explain the concepts of garbage collection? What are its advantages? Solve Following What is Binary search? Apply Binary Search to search the ITEM = 40 and ITEM = 85 in the following array and determine whether search is successful or not- 11, 22, 30, 33, 40, 44, 55, 60, 66, 77, 80, 88, 99. Explain the algorithm of insertion sort. Arrange the elements of following array in ascending order using insertion sort 77, 33,44,11, 88, 22, 66, 55. Compare the Execution of following sorting methods for the given array: 60, 30, 20, 15, 75, 80,5,25, 2,100 Quick sort Radix sort Bubble sort Selection sort Tree sort Explain the concept of dynamic memory management? Write short note on: - Buddy systems Data Compactions Fixed Block storage. write short notes: Data Compaction Garbage collection and buddy system. Explain the following: First -fit Worst \u2013 fit Best \u2013 fit. What is meant by Dynamic Memory Management? Discuss the various techniques of Dynamic Memory Management? == ![Roll No. .................\u201e. 24032 B. Tech. 3 rd Sem. Electronics & Communication Engg (Branch-111) Examination \u2014 December, 2013 DATA STRUCTURE USING C 'F Scheme Paper : CSE-201-F Time : T}tree hours J Maximum Marks : 100 Before ansz\u00e6ring the quBtions, candidates should ensure that they have been supplied the correct and complete question paper. No complain in this regard, will be entertained after examination. Note: Attempt five questions with at least one question from each section. Question No. 1 is compulsory. All questions carry equal marks. 1. Explain the following briefly: (a) Big-Oh Notation (b) Pointer to an Array \u00a9 Dequeues (d) Types of Data Structures (e) Array of Structures (13) ![Roll No.. 24032 B. Tech. 3 rd Sem. (Elec. & Comm. Engg.) Examination \u2014 December, 2012 DATA STRUCTURE USING \u2022C Paper : CSE-201-F Time : Three hours J Maximum Marks : 100 Before answering the questions, candidates should ensure that they have been supplied the correct and complete question paper. No complain in this regard, will be entertained after examination. Note : Attempt any five questions by selecting at least one question from each Unit and Q. No. 1 is compulsory. All questions carry equal marks. 1. Write Short Notes on : (a) Priority Queues (b) Dynamic Allocation \u00a9 Tree Reversal (d) File organization (12) 20 ![Roll No. ..... ... .... 2006 B. E. 3 rd Semester (ECE) Examination = December, 2012 DATA STRUCTURE & ALGORITH\" Paper : CSE-201-E Time : Three hours J Maximum Marks : 100 Before answering the questions, candidates s}vuld ensure Out they have been supplied the,correct and compleie question paper. No complain in this regard, will be entertained after examination. Note : Attempt any five questions. All questions carry equal marks. 1. (a) What do you mean by the term Data Structure? Discuss the basic operation of data structures 10 With examples. (b) What is a stack ? How do you-represent a stack in computer memory ? Also discuss basic operations 10 performed on a stack. 2. (a) Differentiate between prefix, pcstfix -and infix expression. Also discuss significance of postfix expression. (12) 10 ![Roll No. ............... 67061 MCA Regular 2 nd Semester Examination \u2014 May, 2012 DATA STRUCTURES Paper : MCA-201 Time : Ihree hours J Maximum Marks : 80 Bdore artsuering the questions, amdi\u00e5ites should ensure that they supplied the Correct and complete question NO complaint in this regard, will be entertained after examination. Note : Attempt five questions in all, selecting at least one from each Unit. All questions carry equal marks. UNIT -1 1. (a) What is the importance of an algorithm in solving problems ? What characteristics are necessary for a sequence Of Steps to qualify as an algorithm ? (b) Trace out the steps of an algorithm to find the sum of following series : \u2154 ! + \u2158 ! + 6/7 ! (upton terms) 2. (a) Describe how an algorithm is analyzed in order to identify its efficiency. 67061-1 ![Roll No. ............. .... 24032 B. Tech. 3 rd Sem. Electronics & Communication Engg. (Branch \u2014 Ill) Examination \u2014 December, 2011 DATA STRUCTURE USING \u2022C\u2022 Paper : CSE-201-F Time : Three hours J Maximum Marks : 100 Before answering the qu\u00dftions, candidates should ensure that they have been supplied the correct and complete question paper. No complaint in this regard, will be entertained after examination. Note : Attempt any five questions. 1. (a) What do you mean by sparse matrices? Give a suitable data structure uses minimum storage to efficiently store a Sparse matrix in memory. 10 (b) What is an array ? Discuss the various operations eut are allowed on array data structure. I>scribe the formula for calculating the address of any element of a two dimensional array. 10 ![2. (a) Write a non recursive algorithm for reversal of a string of integers. 10 (b) Write a program that takes two linked lists pointed by List-I and List-2. Write a program that concatenates the two lists in such a manner that the final list is pointed by the pointer called LIST-I 10 3. (a) Describe bubble sort algorithm and trace the steps of bubble sort for sorting the list - 12, 19, 33, 26, 29, 35, 22. Find the total number of comparison made. 10 (b) What is a deque ? Write a program that implements a deque ? 10 4. (a) Write an algorithm of complexity O(n) to find the kth smallest element in an array num nl, where n and k are given as input. 10 (b) Explain Binary search algorithm and compare it with linear search algorithm. (2) 10 ![Roll No. . 2006 B. E. 3 rd Semester (ECE) Examination \u2014 December, 2011 DATA STRUCTURE & ALGORITHM Paper : CSE-201-E Time : Three hours J Maximum Marks : 100 Before answering the question, candidates should ensure that they have been supplied the correct and complete question paper. No complain in this regard, will be entertained after examination. Note : Attempt any five questions. All questions carry equal marks. 1. (a) What is a data structure ? Explain the different operations to be performed on data structures. (b) What is stack ? Describe its linked list based implementation. 2. (a) V%at are priority queues ? Discuss different implementation schemes for priority queues. Also write its different application. ![Roll No. .. 67051 MCA (Regular) 2 nd Semester (New) Examination \u2014 May, 2011 DATA STRUCTURES Paper : MCA-201 Time : Three hours I Maximum Marks : 75 Before ansu,ering the questions, candidates should ensure that they have been supplied the correct and complete question paper. No complaint in this regard, will be after examination. Note : Attempt five questions in all selecting at least one question' from each Unit. All questions carry equal marks. UNIT -l 1. What do you understand by time and space complexity Of algorithrns ? Write a detailed note. 2. Differentiate between top-down and bottom-up approach to algorithm design. Use suitable examples. UNIT - Il 3. Define, queue, circular queue, priority queue, and D- queue. For a circular queue with an implementation in array, write functions for: ![Ron No.. 2006 B. E. 3 rd Semester (ECE) Examination \u2014 December, 2009 DATA STRUCTURE & ALGORITHM Paper : CSE-201-E Time : I\"ree hours I Maximum Marks : 100 Before answering the question, candidates should ensure that they have been supplied the correct and complete question paper. No complaint in this regard, will be entertained after examination. Note : Attempt five questions. All questions carry equal marks. 1. (a) What do you mean by the term Data Structure? Discuss the basic operations of data structures with examples. 10 (b) What is a two dimensional array ? Describe the formula for calculating the address of any element of a two dimensional array. 10 2. (a) What is circular queue ? Discuss its advantages over linear queue ? 10 (b) What do you understand by Dynamic memory management ? Create a circular link list using 2006-17, ![24032 R. Tech. 3 rd Semester (IT) F. Scheme Examination, December\u20142014 DATA STRUCTURE USING 'C ' Paper-CSE-201-F Time allowed : 3 hours 1 Maximum marks ; 100 Note : e. No. 1 is compulsory. Attempt four questions by selecting one question from each section. All questions carry equal marks. 1. 2. (a) (b) \u00a9 (d) (e) (D (a) (b) What do you mean by balanced trees ? 3 What are the difference between arrays and linked lists ? 4 What is the algorithm to find out the height of a binary tree ? 4 What are binary search trees and what is it mainly used for ? What are main three properties of heaps ? How do you define O-notation ? Section\u2014A 3 3 3 What is mean by time and space complexity of an algorithm ? Illustrate with suitable examples. 10 Define a 'Stack' ? Explain its typical three applications. Also write code in C for PUSH and POP operation on a stack. 24032-P-3-Q-9-(14) 10 PT.O. 04","title":"Paper"},{"location":"dsa/Paper/#2017","text":"Unit-1 Solve Following Define the following: Data Structure Algorithm Program Space Complexity Discuss various algorithmic notation. Also explain what do you mean by problem solving ? 4\u00d72=8 Solve Write a short note on time complexity and space complexity of an algorithm. 8 Explain the use of data structure. How is it helpful ? 7 Unit II Solve what do you mean by one-dimensional array ? Explain with example. 3 How can you access the elements of 1-D array and store them ? 4 Explain how the insertion and deletion operations are performed on an 1-D array ? 6 What do you mean by string ? 2 Solve Write short notes on: 8 (i) Stack (ii) Queue Explain the operations that can be performed on stack as well as queue. 7 Unit - III Solve Define the following: 4 (i) Linear data structure (ii) Non-linear data structure (iii) Pointer (iv) Linked list Write a program and explain it that how an element can be inserted and deleted in a singly linked list. 11 Solve (a) What do you mean by linked storage representation ? 2 (b) What are the applications of a linked list ? 6 \u00a9 Write a program segment to traverse the least element of a singly linked list. 7","title":"2017"},{"location":"dsa/Paper/#unit-iv","text":"Solve Define with example the following data structures: 4 Tree Any one type of tree What do you mean by height balanced tree ? Explain with an example. 4 Insert the following numbers in an AVL tree : 15, 22, 8, 63, 28, 72, 82, 89, 95. Solve What do you mean by Graph in data structure ? Give examples. 2 Differentiate between graph and tree. 2 Explain the two types of graph traversal with example. 8 What is the use of graph in data structure ? Give an example. 2 What is an edge and vertex in graph ? 1","title":"Unit - IV"},{"location":"dsa/Paper/#unit-v","text":"Solve Following What do you mean by sorting ? 1 Write short notes on any two with example : 2\u00d75=10 Quick sort Bubble sort Merge sort Write an algorithm for merge sort. 4 Solve Explain the concept of binary search with an example. 8 Write an algorithm to search an element in an array using linear search algorithm. 5 Differentiate between linear search and library search. 2","title":"Unit -V"},{"location":"dsa/Paper/#2016","text":"Unit-I Solve Following What do you understand by data structure? What are the types of data structure? List out the areas in which data structure are applied extensively. Explain the various aspects of problem solving in detail. Also, discuss pros and cons of each. 8+7 Solve Following What is an algorithm? Explain briefly about the sequence of steps involve in designing and analysis of algorithm. Explain time and space complexity of an algorithm. 10+5 Unit-II Solve Following What is meant by one-dimensional array? Discuss how the elements Of 1-D array are stored and access. Write an algorithm to find maximum and minimum values of number stored in 2-D array. 8+7 Solve Following What do you mean by stack? Differentiate between array and stack. Write down the procedure for implementing various stack operation. What is a Queue? What are the drawbacks of linear queue? 10+5 Unit-III Solve Following What is a linked list? What are its applications? Explain with an example cursor implementation of linked list. Write an algorithm to insert an element into a linked list. 10+5 Explain with suitable program segments any four operations of linked list. 15 Unit-IV Solve Following What do you mean by tree? Define types of tree in detail. Insert the following data types in an AVL tree: 16, 23, 9, 64, 29, 73, 83, 90, 96. [8+7] Solve Following What do you mean by graph data structure? Explain sequential and linked list implementation of graph data structure. Define the graph traversal in better ? Explain depth first search traversal . [8+7] Unit-V Write short notes on: selection sort Quick sort Merge sort Solve Following Write algorithm for bubble sort. Sort the following list 73, 49, 53, 12, 48, 10, 70, 20. Explain binary search tree with an example. [8+7]","title":"2016"},{"location":"dsa/Paper/#2016bca","text":"Unit-I Solve Following What do you understand by data structure? What are the types of data structure? List out the areas in which data structure are applied extensively. [8] Answer : A data structure is basically a group of data elements that are put together under one name, and which defines a particular way of storing and organizing data in a computer so that it can be used efficiently. Data structures are used in almost every program or software system. Some common examples of data structures are arrays, linked lists, queues, stacks, binary trees, and hash tables. Data structures are building blocks of a program. A program built using improper data structures may not work as expected. So as a programmer it is mandatory to choose most appropriate data structures for a program. The term data means a value or set of values. It specifies either the value of a variable or a constant (e.g., marks of students, name of an employee, address of a customer, value of pi, etc.). A record is a collection of data items. For example, the name, address, course, and marks obtained are individual data items. But all these data items can be grouped together to form a record. Data structures are generally categorized into two classes: primitive and non-primitive data structures. Primitive and Non-primitive Data Structures Primitive data structures are the fundamental data types which are supported by a programming language. Some basic data types are integer, real, character, and boolean. The terms \u2018data type\u2019, \u2018basic data type\u2019, and \u2018primitive data type\u2019 are often used interchangeably. Non-primitive data structures are those data structures which are created using primitive data structures. Examples of such data structures include linked lists, stacks, trees, and graphs. Non-primitive data structures can further be classified into two categories: linear and non-linear data structures. Linear Data Structure: If the elements of a data structure are stored in a linear or sequential order, then it is a linear data structure. Examples include arrays, linked lists, stacks, and queues. Linear data structures can be represented in memory in two different ways. One way is to have to a linear relationship between elements by means of sequential memory locations. The other way is to have a linear relationship between elements by means of links. Non Linear Data Structure: if the elements of a data structure are not stored in a sequential order, then it is a non-linear data structure. The relationship of adjacency is not maintained between elements of a non-linear data structure. Examples include trees and graphs. Data structures are widely applied in the following areas: Compiler design , Operating system, Statistical analysis, package, DBMS, Numerical analysis, Simulation, Artificial intelligence, Graphics. 1. Explain the various aspects of problem solving in detail. Also, discuss pros and cons of each. [7] Answer: Solve Following What is an algorithm? Explain briefly about the sequence of steps involve in designing and analysis of algorithm. Explain time and space complexity of an algorithm. 10+5 Unit-II Solve Following What is meant by one-dimensional array? Discuss how the elements Of 1-D array are stored and access. Write an algorithm to find maximum and minimum values of number stored in 2-D array. 8+7 Solve Following What do you mean by stack? Differentiate between array and stack. Write down the procedure for implementing various stack operation. What is a Queue? What are the drawbacks of linear queue? 10+5 Unit-III Solve Following What is a linked list? What are its applications? Explain with an example cursor implementation of linked list. Write an algorithm to insert an element into a linked list. 10+5 Explain with suitable program segments any four operations of linked list. 15 Unit-IV Solve Following What do you mean by tree? Define types of tree in detail. Insert the following data types in an AVL tree: 16, 23, 9, 64, 29, 73, 83, 90, 96. [8+7] Solve Following What do you mean by graph data structure? Explain sequential and linked list implementation of graph data structure. Define the graph traversal in better ? Explain depth first search traversal . [8+7] Unit-V Write short notes on: selection sort Quick sort Merge sort Solve Following Write algorithm for bubble sort. Sort the following list 73, 49, 53, 12, 48, 10, 70, 20. Explain binary search tree with an example. [8+7] Unit-I Solve Following what do you understand by data structure? What are the types of data structure? List out the areas in which data structure are applied extensively. Explain the various aspects of problem solving in detail. Also discuss pros and cons of each. Solve Following What is an algorithm? Explain briefly about the sequence of steps involve in designing and analysis of algorithm. Explain time and space complexity of an algorithm. Unit-II Solve Following what is meant by 1-D array? Discuss how the elements of 1-D array are stored and access. Write an algorithm to find maximum and Minimum values of number stored in 2-D array. Write a program to find maximum and Minimum no. for following cases: - for two variable for three variable for an array Unit-III Write a program that perform swapping in following case: - using Three variable using two variable without any arithmetic operator Describe the location of the array for 1-D, 2-D, 3-D. Unit-IV Describe asymptotic analysis of the algorithm and analysis behaviour. Describe following: - modular programming approach top-to -down approach Unit-V Describe pointers at least (150 words) Describe matrix using array data structure and perform addition of two matrices.","title":"2016(BCA)"},{"location":"dsa/Paper/#mca-uok-dsa","text":"","title":"(MCA) UOK DSA"},{"location":"dsa/Paper/#unit-i","text":"Solve Following What are different types of data types available in C? What is a good programming language? Define a function? What are different types of functions available in C language? Solve Following Define structured programming? What is a variable and its types? Define a structure and a union. Write a program in C/C++ showing use of structure? Solve Following Explain the characteristics of an efficient program with examples? What is Abstract data type? Describe its implementation and applications? Solve Following Write a C program to multiply two matrices? Explain address arithmetic with reference to array and pointers? Solve Following Define Big-oh. What is usually a size measure of the input? What is the difference between best case and worst case running time? How will you compute the running time of a recursive function? Explain with example? Explain the justification behind the assumption that growth rate can be used to compare two programs? Solve Following Determine the frequency counts (i.e. the number of times a statement is executed) for all the statements in the following program fragment and hence express its time complexity using big-oh. For i = 1 to n do For j = 1 to i do For k = 1 to j do x = x + 1 Describe the time and space complexity for the development of an algorithm. Give four properties of Big-O notation. What is asymptotic analysis of the algorithm? Solve Following What do you understand by abstract data type? Explain row major ordering and column major ordering of multidimensional arrays. Differential between structure and union. Give suitable example. Solve Following What do you understand by structured programming? Explain big oh notation of an algorithm\u2019s time complexity measure. write a program to arrange a list of names. Use array of pointers. 9.Solve Following How pointers are used in C. Explain? Write a program in C to add N numbers using pointers? Solve Following How the execution of a program is calculated? Explain through an example. Write a program in \u2018C\u2019 to create a file. How structure differs from union. Explain? Solve Following What is meant by Data Structures? Differentiate between Linear and non-linear data structures with examples. Write a note on structured programming. Solve Following Write a C program to explain the concept of structure within a structure. Write a C program using pointers to find the length of a character string. Unit \u2013 II Solve Following Differentiate between arrays and linked lists with examples. Also explain the different types of linked lists? Write a program using recursive function to calculate factorial of a number. Perform a dry run of the recursive function and track the stack for the function? Solve Following What do you understand by Data Structure? Explain different types of operation that can be performed on Data Structures? What is stack? Write PUSH and POP Operation for a stack. Convert the following affix Arithmetic expression to postfix notation using stack. A * (B+D)/E - F *(G+H/K) Solve Following Given circular queue with F (Front)=6 and R (Rear)=2 (Where F and R are the Front and Rear Pointers). Then give the values of R and F after each operation in the sequence- Insert, Delete, Delete, Insert, Delete, Insert and Delete. Assume that 4 bytes of storage are required to hold each element of the array begins at bytes 2000 in memory. Give the actual address of elements value [4][2]. Implement a sequential queue that can perform insert and delete functions. Compare overflow and underflow condition for sequential queue with circular queue. Solve Following Write an algorithm to insert an element in a circular queue. What do you understand by generalized list? Implement stack using linked list. Solve Following Consider the following arithmetic infix expression \u2018Q\u2019 : Q : A + (B * C \u2013 (D / \ud835\udc38\ud835\udc39 ) * G) * H By implementing the algorithm, convert the expression into its equivalent postfix expression. What is doubly linked list. How is it differs from single linked list. Explain? Solve Following Write an algorithm to create a linked list of twenty elements. A stack contains the following items S : 10 15 20 30 \u2191 TOP Write an algorithm to insert a new item 100 in the stack? Solve Following What is meant by doubly linked list? Write function or procedure to insert and delete a node from a doubly linked list. Briefly explain the applications of a stack. Solve Following What is the difference between the stack and queue? How the queue is implemented? Explain. Differentiate between recursive and non-recursive procedures with examples. Solve Following What are different types of data structures available in C/C++? Define and draw link list Define an array. What are their types? Write a note on pointers? Solve Following What is recursion? Write a program in C/C++ using recursive function. What is circular linked list? Write an algorithm for insertion of an element in a link list. Solve Following Explain deletion of an element in a doubly linked list. Write algorithm also. Explain the use of stack in a recursive program. Unit \u2013 III Illustrate the different techniques of tree traversal with appropriate examples and diagrams? Describe at least three applications each of tree and graph? Solve Following Discuss the Doubly linked list. Give and explain the algorithm for operations to perform the insertion and removal of a node to and from the Doubly linked list? How will you represent a polynomial using a linked list in memory? Explain. Also represent the following polynomial using linked list in memory :- P(x,y,z) = 8x2y2\ud835\udc67 + 6\ud835\udc66\ud835\udc672 + 3\ud835\udc653\ud835\udc66\ud835\udc67 + 2\ud835\udc65\ud835\udc663\ud835\udc67 \u2212 5x2\ud835\udc663 \u22124\ud835\udc65y2\ud835\udc673 Solve Following Given a linked list whose typical node consist of an INFO and LINK field. Formulate an algorithm which will count the number of nodes in the list. Also formulate an algorithm that will change the INFO field of the Kth node to the value given by \u2019y\u2019? What do you understand with circular linked list? Write functions to insert nodes and delete from circular linked list? Demonstrate the functions through suitable examples? Solve Following What is breadth first search. How is it differs from depth first search. Explain in brief. From the following tree :- Perform : In -order traversal Pre-order traversal Post-order traversal Solve Following What is graph? What are the different representations techniques used by the graph in the computer\u2019s memory. Explain each? Describe binary search tree? Explain the following in brief: Null graph. Pendant graph. Isolated vertex. Directed graph. Solve Following What is meant by Graph? How the graph is traversed? Explain any one method of graph traversing with examples? Write a note on binary search tree. What is meant by tree traversal? Explain the various method of tree traversal using examples? Solve Following What is a binary tree? How is it drawn? Draw a binary tree for the following expression: (A + C) \u2013 C * (D/P). What do you understand by Polish Notations? Write a note on graphs in C++. Solve Following What are tree traversal techniques? Write a note on files in C/C++. What is a set and set theory? Write an algorithm/program for entering an element in doubly linked list. Solve Following Is there any difference between tree and graph? Explain BFS method traversal of suitable graph. What are different operations possible in sets? Explain strictly binary tree and almost complete binary tree. Insert following data in a binary search tree; 23, 0, -11, 100, 215, 25, 6, 9, -27, 92 Traverse the tree in in-order traversal and in pre-order traversal techniques. Unit \u2013 IV Solve Following Apply selection sort to a list of 10 numbers entered by the user to the C program? Differentiate between merge sort and radix sort? What is hashing? Describe the techniques of hashing with examples? Solve Following What do you understand with binary tree? Write functions to formulate the recursive algorithm for traversing a binary tree in order. Also consider the following binary tree: - Determine the order in which the nodes will be visited if the tree traversed in following order: - Pre order Post order In order Obtain the adjacency matrix A of the following diagraph. Find the elementary paths of length 1 and 2 from \ud835\udc491 and \ud835\udc494.Verify the results for calculating, \ud835\udc342, \ud835\udc343 and \ud835\udc344. Explain the linked representation of a Binary tree with an example Construct the Binary Tree for the following traversal. In order L R F E A C D G H B I Post order L E F C D H I B G A Explain the following with examples: - Connected Graph Strongly Connected Graph Unilaterally Graph Complete Graph Construct the Minimum Spanning tree for the following graph - Solve Following Sort the following numbers by using quick sort (explain each step through the algorithm) 33 11 55 77 90 40 60 22 What is searching? Explain linear search. Solve Following Sort the following tables by using merge sort. Table 1 : 15 35 65 90 99 Table 2 : 30 45 75 Explain through the algorithm. Write an algorithm for the binary search. Solve Folowing What is meant by searching ? Discuss the working of binary searching technique? How the efficiency of different sorting algorithms is measured? Make a comparative study of different sorting techniques? Write short note on: Bubble sort Linear searching. Solve Folllowing How the binary search is implemented? Explain with examples? What is meant by hashing? How is it implemented? Explain. Write an algorithm for selection sort. What is hashing? What is external sorting? Write a program in C/C++ for sorting elements of an array. Write short notes on the following: Heap sort; Merger sort; Command line arguments. Apply bubble sort to the following list: 23, 104, 95, 45, 64, 77, 84, 98, 123 Write the algorithm to arrange a list using heap sort. State the difference between merge sort and radix sort. Explain hashing with examples. \u200b Unit \u2013 V Solve Following What is dynamic memory management? Write an algorithm for first fit search? What is garbage collection? How can it be optimized? Solve Following Write an algorithm for best fit memory allocation? What is a stack and a queue? Write a note on buddy system for memory management? Solve Following Explain the differences among first fit, best fit, and worst fit algorithms? Explain garbage creation and removal? Solve Following Explain buddy systems with suitable example? What do you understand by bit map method? Where it is applicable? What do you understand by Dynamic Memory Allocation? Explain with examples? Solve Following What is data compaction? How is it carried out? Explain the concepts of garbage collection? What are its advantages? Solve Following What is Binary search? Apply Binary Search to search the ITEM = 40 and ITEM = 85 in the following array and determine whether search is successful or not- 11, 22, 30, 33, 40, 44, 55, 60, 66, 77, 80, 88, 99. Explain the algorithm of insertion sort. Arrange the elements of following array in ascending order using insertion sort 77, 33,44,11, 88, 22, 66, 55. Compare the Execution of following sorting methods for the given array: 60, 30, 20, 15, 75, 80,5,25, 2,100 Quick sort Radix sort Bubble sort Selection sort Tree sort Explain the concept of dynamic memory management? Write short note on: - Buddy systems Data Compactions Fixed Block storage. write short notes: Data Compaction Garbage collection and buddy system. Explain the following: First -fit Worst \u2013 fit Best \u2013 fit. What is meant by Dynamic Memory Management? Discuss the various techniques of Dynamic Memory Management? == ![Roll No. .................\u201e. 24032 B. Tech. 3 rd Sem. Electronics & Communication Engg (Branch-111) Examination \u2014 December, 2013 DATA STRUCTURE USING C 'F Scheme Paper : CSE-201-F Time : T}tree hours J Maximum Marks : 100 Before ansz\u00e6ring the quBtions, candidates should ensure that they have been supplied the correct and complete question paper. No complain in this regard, will be entertained after examination. Note: Attempt five questions with at least one question from each section. Question No. 1 is compulsory. All questions carry equal marks. 1. Explain the following briefly: (a) Big-Oh Notation (b) Pointer to an Array \u00a9 Dequeues (d) Types of Data Structures (e) Array of Structures (13) ![Roll No.. 24032 B. Tech. 3 rd Sem. (Elec. & Comm. Engg.) Examination \u2014 December, 2012 DATA STRUCTURE USING \u2022C Paper : CSE-201-F Time : Three hours J Maximum Marks : 100 Before answering the questions, candidates should ensure that they have been supplied the correct and complete question paper. No complain in this regard, will be entertained after examination. Note : Attempt any five questions by selecting at least one question from each Unit and Q. No. 1 is compulsory. All questions carry equal marks. 1. Write Short Notes on : (a) Priority Queues (b) Dynamic Allocation \u00a9 Tree Reversal (d) File organization (12) 20 ![Roll No. ..... ... .... 2006 B. E. 3 rd Semester (ECE) Examination = December, 2012 DATA STRUCTURE & ALGORITH\" Paper : CSE-201-E Time : Three hours J Maximum Marks : 100 Before answering the questions, candidates s}vuld ensure Out they have been supplied the,correct and compleie question paper. No complain in this regard, will be entertained after examination. Note : Attempt any five questions. All questions carry equal marks. 1. (a) What do you mean by the term Data Structure? Discuss the basic operation of data structures 10 With examples. (b) What is a stack ? How do you-represent a stack in computer memory ? Also discuss basic operations 10 performed on a stack. 2. (a) Differentiate between prefix, pcstfix -and infix expression. Also discuss significance of postfix expression. (12) 10 ![Roll No. ............... 67061 MCA Regular 2 nd Semester Examination \u2014 May, 2012 DATA STRUCTURES Paper : MCA-201 Time : Ihree hours J Maximum Marks : 80 Bdore artsuering the questions, amdi\u00e5ites should ensure that they supplied the Correct and complete question NO complaint in this regard, will be entertained after examination. Note : Attempt five questions in all, selecting at least one from each Unit. All questions carry equal marks. UNIT -1 1. (a) What is the importance of an algorithm in solving problems ? What characteristics are necessary for a sequence Of Steps to qualify as an algorithm ? (b) Trace out the steps of an algorithm to find the sum of following series : \u2154 ! + \u2158 ! + 6/7 ! (upton terms) 2. (a) Describe how an algorithm is analyzed in order to identify its efficiency. 67061-1 ![Roll No. ............. .... 24032 B. Tech. 3 rd Sem. Electronics & Communication Engg. (Branch \u2014 Ill) Examination \u2014 December, 2011 DATA STRUCTURE USING \u2022C\u2022 Paper : CSE-201-F Time : Three hours J Maximum Marks : 100 Before answering the qu\u00dftions, candidates should ensure that they have been supplied the correct and complete question paper. No complaint in this regard, will be entertained after examination. Note : Attempt any five questions. 1. (a) What do you mean by sparse matrices? Give a suitable data structure uses minimum storage to efficiently store a Sparse matrix in memory. 10 (b) What is an array ? Discuss the various operations eut are allowed on array data structure. I>scribe the formula for calculating the address of any element of a two dimensional array. 10 ![2. (a) Write a non recursive algorithm for reversal of a string of integers. 10 (b) Write a program that takes two linked lists pointed by List-I and List-2. Write a program that concatenates the two lists in such a manner that the final list is pointed by the pointer called LIST-I 10 3. (a) Describe bubble sort algorithm and trace the steps of bubble sort for sorting the list - 12, 19, 33, 26, 29, 35, 22. Find the total number of comparison made. 10 (b) What is a deque ? Write a program that implements a deque ? 10 4. (a) Write an algorithm of complexity O(n) to find the kth smallest element in an array num nl, where n and k are given as input. 10 (b) Explain Binary search algorithm and compare it with linear search algorithm. (2) 10 ![Roll No. . 2006 B. E. 3 rd Semester (ECE) Examination \u2014 December, 2011 DATA STRUCTURE & ALGORITHM Paper : CSE-201-E Time : Three hours J Maximum Marks : 100 Before answering the question, candidates should ensure that they have been supplied the correct and complete question paper. No complain in this regard, will be entertained after examination. Note : Attempt any five questions. All questions carry equal marks. 1. (a) What is a data structure ? Explain the different operations to be performed on data structures. (b) What is stack ? Describe its linked list based implementation. 2. (a) V%at are priority queues ? Discuss different implementation schemes for priority queues. Also write its different application. ![Roll No. .. 67051 MCA (Regular) 2 nd Semester (New) Examination \u2014 May, 2011 DATA STRUCTURES Paper : MCA-201 Time : Three hours I Maximum Marks : 75 Before ansu,ering the questions, candidates should ensure that they have been supplied the correct and complete question paper. No complaint in this regard, will be after examination. Note : Attempt five questions in all selecting at least one question' from each Unit. All questions carry equal marks. UNIT -l 1. What do you understand by time and space complexity Of algorithrns ? Write a detailed note. 2. Differentiate between top-down and bottom-up approach to algorithm design. Use suitable examples. UNIT - Il 3. Define, queue, circular queue, priority queue, and D- queue. For a circular queue with an implementation in array, write functions for: ![Ron No.. 2006 B. E. 3 rd Semester (ECE) Examination \u2014 December, 2009 DATA STRUCTURE & ALGORITHM Paper : CSE-201-E Time : I\"ree hours I Maximum Marks : 100 Before answering the question, candidates should ensure that they have been supplied the correct and complete question paper. No complaint in this regard, will be entertained after examination. Note : Attempt five questions. All questions carry equal marks. 1. (a) What do you mean by the term Data Structure? Discuss the basic operations of data structures with examples. 10 (b) What is a two dimensional array ? Describe the formula for calculating the address of any element of a two dimensional array. 10 2. (a) What is circular queue ? Discuss its advantages over linear queue ? 10 (b) What do you understand by Dynamic memory management ? Create a circular link list using 2006-17, ![24032 R. Tech. 3 rd Semester (IT) F. Scheme Examination, December\u20142014 DATA STRUCTURE USING 'C ' Paper-CSE-201-F Time allowed : 3 hours 1 Maximum marks ; 100 Note : e. No. 1 is compulsory. Attempt four questions by selecting one question from each section. All questions carry equal marks. 1. 2. (a) (b) \u00a9 (d) (e) (D (a) (b) What do you mean by balanced trees ? 3 What are the difference between arrays and linked lists ? 4 What is the algorithm to find out the height of a binary tree ? 4 What are binary search trees and what is it mainly used for ? What are main three properties of heaps ? How do you define O-notation ? Section\u2014A 3 3 3 What is mean by time and space complexity of an algorithm ? Illustrate with suitable examples. 10 Define a 'Stack' ? Explain its typical three applications. Also write code in C for PUSH and POP operation on a stack. 24032-P-3-Q-9-(14) 10 PT.O. 04","title":"Unit \u2013 I"},{"location":"dsa/Unit%20I/","text":"Unit I : Introduction to Data Structure and Algorithm Link Introduction: structure and problem solving, algorithmic notation, Data Structure, Algorithms and sub algorithms, introduction to algorithm analysis for time and space Introduction Link Computer Science is the study of data, its representation and transformation by Computer. For every data object, we consider the class of operations to be performed and then the way to represent the object so that these operations may be efficiently carried out. We require two techniques for this: Devise alternative forms of data representation Analyze the algorithm which operates on the structure. Variable Link Data Link Program Link Programming Language Link Interactions involving humans are most effectively carried out through the medium of language. Language permits the expression of thoughts and ideas, and without it, communication as we know it would be very difficult indeed. In computer programming, a programming language serves as a means of communication between the person with a problem and the computer used to help solve it. An effective programming language enhances both the development and the expression of computer programs. It must bridge the gap between the often unstructured nature of human thought and the precision required for computer execution. A hierarchy of programming languages based on increasing machine independence includes the following: Machine-level languages Assembly languages Higher-level or user-oriented languages Problem-oriented languages A machine-level language is the lowest form of computer language. Each instruction in a program is represented by a numeric code, and numerical addresses are used throughout the program to refer to memory locations in the computer's memory. All bookkeeping aspects of the program are the sole responsibility of the machine-language programmer. Finally, all diagnostics and programming aids must be supplied by the programmer. Also included as machine-level programs are programs written in microcode (i.e., microprograms). Microcode allows for the expression of some of the more powerful machine-level instructions in terms of a set of basic machine instructions. Assembly language is essentially a symbolic version of a machine-level language. Each operation code is given a symbolic code such as ADD for addition and MUL for multiplication. Moreover, memory locations are given symbolic names such as PAY and RATE. Some assembly languages contain macroinstructions which are at a higher level than assembly-languages instructions. Assembly- language systems offer certain diagnostic and debugging assistance that is normally not available at the machine level. A high-level language such as FORTRAN, PASCAL, or PL/I offers most of the features of an assembly language. While some facilities for accessing system- level features may not be provided, a high-level language offers a more enriched set of language features such as structured control constructs, nested statements, blocks, and procedures. A problem-oriented language provides for the expression of problems in a specific application or problem area. Examples of such languages are SEQUEL for database retrieval applications and COGO for civil engineering applications. Advantages of high-level languages over low-level languages such as machine and assembly languages include the following: High-level languages are easier to learn than their lower-level counterparts. The learning of many high-level languages requires little or no computer hardware background because such languages are relatively machine-independent. Furthermore, these languages are closer to their problem areas than lower-level languages. The programmer does not have to be concerned with clerical tasks involving numerical or symbolic references to instructions, memory locations, constants, etc. Such tasks are handled by a system which translates the high-level language program into machine language. A programmer is not required to know how to convert data from external forms to various internal forms within the memory of a computer. The ability of a programmer to convert, say, numeric data into internal forms such as floating-point numbers and packed-decimal numbers should be irrelevant. Most high-level languages offer a programmer a variety of control structures which are not available in low-level languages. High-level languages offer several of the following language constructs: Conditional statements (such as IF-THEN-ELSE and CASE statements) Looping statements (for both counted and conditional loops) Nested statements Block structures These control structures improve programming style and facilitate certain programming approaches such as structured programming. Resulting programs are easier to read, understand, and alter. This results in reduced programming costs because programs are less complicated. Programs written in a high-level language are usually more easily debugged than their machine- or assembly-language equivalents. High-level languages offer constructs that eliminate or reduce certain kinds of programming errors that occur in low-level languages. For example, the declaration of variables in a program adds a certain degree of redundancy which is useful in detecting errors in the improper use of variables. Languages often enforce a disciplined use of pointers. Moreover, a structured program is much more easily debugged than its unstructured counterpart. Since most high-level languages offer more powerful control and data-structuring capabilities than low-level languages, the former class of languages facilitates the expression of a solution to a particular problem. Because of the availability of certain language features such as procedures, high-level languages permit a modular and hierarchical description of programming tasks. These tasks can then be assigned to a team of programmers, thus facilitating a division of labor with a minimum of disruption and effort. Such an approach permits better documentation of a problem. Also, increased compatibility among programs and programmers can be realized. Finally, high-level languages are relatively machine-independent. Consequently, certain programs such as FORTRAN and COBOL programs are portable. These programs can be executed on different computers with little, if any, change even though these computers have different internal architectures and machine-language instruction sets. Program portability reduces costs and, in general, protects an installation against computer obsolescence. Often when a computer is replaced, all associated assembly- and machine-language programs become obsolete. structure and problem solving Link Data Structure Link Introduction to Data Structure Link The way information is organized in the memory of a computer is called a data structure A data structure is a way of organizing data that considers not only the items stored, but also their relationship to each other. Advance knowledge about the relationship between data items allows designing of efficient algorithms for the manipulation of data. Many algorithms require that we use a proper representation of data to achieve efficiency. This representation and the operations that are allowed for it are called data structures. Each data structure allows insertion, access, deletion etc. Why do we need data structures? Data structures allow us to achieve an important goal: component reuse Once each data structure has been implemented once, it can be used over and over again in various applications. Common data structures are Stacks, Queues, Lists, Trees, Graphs, Tables etc. Types of Data Structure/Classification of Data Structure Link Based on how the data items or operated it will classified into Primitive Data Structure : is one the data items are operated closest to the machine level instruction. Eg : int, char and double. Non-Primitive Data Structure : is one that data items are not operated closest to machine level instruction. Linear Data Structure : In which the data items are stored in sequence order. Eg: Arrays, Lists, Stacks and Queues. Linear Data Structures List Array One Dimensional Multi-Dimensional Dynamic Array Matrix Sparse Matrix Linked List Single Linked List Double Linked List Circular Linked List Ordered List Stack Queue Circular Queue Priority Queue Deque Dictionary (Associative Array) Hash Table Operations performed on any linear structure: Traversal \u2013 Processing each element in the list Search \u2013 Finding the location of the element with a given value. Insertion \u2013 Adding a new element to the list. Deletion \u2013 Removing an element from the list. Sorting \u2013 Arranging the elements in some type of order. Merging \u2013 Combining two lists into a single list. Non Linear Data Structure : In which the order of data items is not presence. Eg : Trees, Graphs. Non\u2010Linear Data Structures Graph Adjacency List Adjacency Matrix Spanning Tree Tree M\u2010Way Tree B\u2010Tree 1. 2\u20103\u20104 Tree 2. B+ Tree Binary Tree 1. Binary Search Tree 2. Self\u2010Balancing Binary Search Tree 1. AVL Tree 2. Red\u2010Black Tree 3. Splay Tree 3. Heap 1. Min Heap 2. Max Heap 3. Binary Heap 4. Parse Tree Algorithms Link Introduction to Algorithm Link Sub Algorithms Link A sub algorithm is an independent component of an algorithm often broken down into smaller chunks and for this reason is defined separately from the main algorithm. The purpose of a sub algorithm is to perform some computation when required, under control of the main algorithm. This computation may be performed on zero or more parameters passed by the calling routine. So that they are easy to read, reuse in another algorithm When the problem is very complex, it is divided into several independent sub-problems. Each sub-problem is called sub-algorithm and can be developed independently. These sub-problems can be combined together to form the solution for the entire problem. Thus by using sub-algorithms the complex problems can be solved easily. A sub-algorithm is a block of instructions that is executed when it is called from some other point of the algorithm. Sub-algorithms are of two type: Sub-algorithms that do not return a value Sub-algorithms that return a value The sub-algorithm is called function in C++. Definition of a sub-algorithm that does not return a value Sub-algorithm without arguments: SUBALGORITHM subalgorithm-name ( ) Statements END subalgorithm-name where, ( ) is the empty list. Sub-algorithm with arguments: SUBALGORITHM subalgorithm-name (parameter-list) Statements END subalgorithm-name where, Parameter-list is a list that contains one or more parameters that are passed to the sub-algorithm. Note: The call to a sub-algorithm that does not return a value is given in the CALL statement which has the following syntax: subalgorithm-name (Actual parameters) e.g. sum(4,7) or sum(x,y) Definition of a sub-algorithm that returns a value: Sub-algorithm without arguments: ftype SUBALGORITHM subalgorithm-name ( ) Statements END subalgorithm-name Notes: ftype: is any data type that the result of a subalgortihm can have. If the subalgorithm does not return any result, then no type is specified. ( ) empty list. If the subalgorithm has a type, then the Statements in the body of the subalgorithm should have return statement, usually it is the last statement. Sub-algorithm without arguments: ftype SUBALGORITHM subalgorithm-name (parameter-list) Statements END subalgorithm-name Notes: ftype: is any data type that the result of a Subalgorithm can have. If the Subalgorithm does not return any result, then no type is specified. parameter-list: includes one or more arguments. If the Subalgorithm has a type, then the Statements in the body of the Subalgorithm should have return statement, usually it is the last statement. DIFFERENT APPROACHES TO DESIGNING AN ALGORITHM Link Algorithms are used to manipulate the data contained in data structures. When working with data structures, algorithms are used to perform operations on the stored data. A complex algorithm is often divided into smaller units called modules. This process of dividing an algorithm into modules is called modularization. The key advantages of modularization are as follows: complex algorithm simpler to design and implement. Each module can be designed independently. While designing one module, the details of other modules can be ignored, thereby enhancing clarity in design which in turn simplifies implementation, debugging, testing, documenting, and maintenance of the overall algorithm. There are two main approaches to design an algorithm\u2014top-down approach and bottom-up approach, as shown in Fig. Top-down approach Link A top-down design approach starts by dividing the complex algorithm into one or more modules. These modules can further be decomposed into one or more sub-modules, and this process of decomposition is iterated until the desired level of module complexity is achieved. Top-down design method is a form of stepwise refinement where we begin with the topmost module and incrementally add modules that it calls. Therefore, in a top-down approach, we start from an abstract design and then at each step, this design is refined into more concrete levels until a level is reached that requires no further refinement. Bottom-up approach Link A bottom-up approach is just the reverse of top-down approach. In the bottom-up design, we start with designing the most basic or concrete modules and then proceed towards designing higher level modules. The higher level modules are implemented by using the operations performed by lower level modules. Thus, in this approach sub-modules are grouped together to form a higher level module. All the higher level modules are clubbed together to form even higher level modules. This process is repeated until the design of the complete algorithm is obtained. STRUCTURED PROGRAMMING Link It is a programming style; and this style of programming is known by several names: Procedural decomposition, Structured programming, etc. Structured programming is not programming with structures but by using following types of code structures to write programs: Sequence of sequentially executed statements Conditional execution of statements (i.e., \u201cif\u201d statements) Looping or iteration (i.e., \u201cfor, do...while, and while\u201d statements) Structured subroutine calls (i.e., functions) In particular, the following language usage is forbidden: \u201cGoTo\u201d statements \u201cBreak\u201d or \u201ccontinue\u201d out of the middle of loops Multiple exit points to a function/ procedure/ subroutine (i.e., multiple \u201creturn\u201d statements) Multiple entry points to a function/ procedure/ subroutine/ method In this style of programming there is a great risk that implementation details of many data structures have to be shared between functions, and thus globally exposed. This in turn tempts other functions to use these implementation details; thereby creating unwanted dependencies between different parts of the program. The main disadvantage is that all decisions made from the start of the project depends directly or indirectly on the high-level specification of the application. It is a well- known fact that this specification tends to change over a time. When that happens, there is a great risk that large parts of the application need to be rewritten. Top-down vs bottom-up approach Link Whether the top-down strategy should be followed or a bottom-up is a question that can be answered depending on the application at hand. While top-down approach follows a stepwise refinement by decomposing the algorithm into manageable modules, the bottom-up approach on the other hand defines a module and then groups together several modules to form a new higher level module. Top-down approach is highly appreciated for ease in documenting the modules, generation of test cases, implementation of code, and debugging. However, it is also criticized because the sub-modules are analysed in isolation without concentrating on their communication with other modules or on reusability of components and little attention is paid to data, thereby ignoring the concept of information hiding. Although the bottom-up approach allows information hiding as it first identifies what has to be encapsulated within a module and then provides an abstract interface to define the module\u2019s boundaries as seen from the clients. But all this is difficult to be done in a strict bottom-up strategy. Some top-down activities need to be performed for this. All in all, design of complex algorithms must not be constrained to proceed according to a fixed pattern but should be a blend of top-down and bottom-up approaches. Algorithmic Notation Link Big Oh Link Big Omega Link Big Theta Link Algorithm Analysis Link introduction to algorithm analysis Link After designing an algorithm, it has to be checked and its correctness needs to be predicted; this is done by analyzing the algorithm. The algorithm can be analyzed by tracing all step-by-step instructions, reading the algorithm for logical correctness, and testing it on some data using mathematical techniques to prove it correct. Another type of analysis is to analyze the simplicity of the algorithm. That is, design the algorithm in a simple way so that it becomes easier to be implemented. However, the simplest and most straightforward way of solving a problem may not be sometimes the best one. Moreover there may be more than one algorithm to solve a problem. The choice of a particular algorithm depends on following performance analysis and measurements : Space complexity Time complexity Complexity Link Time Complexity Link The time complexity of an algorithm or a program is the amount of time it needs to run to completion. The exact time will depend on the implementation of the algorithm, programming language, optimizing the capabilities of the compiler used, the CPU speed, other hardware characteristics/ specifications and so on. To measure the time complexity accurately, we have to count all sorts of operations performed in an algorithm. If we know the time for each one of the primitive operations performed in a given computer, we can easily compute the time taken by an algorithm to complete its execution. This time will vary from machine to machine. By analyzing an algorithm, it is hard to come out with an exact time required. To find out exact time complexity, we need to know the exact instruc- tions executed by the hardware and the time required for the instruction. The time com- plexity also depends on the amount of data inputted to an algorithm. But we can calculate the order of magnitude for the time required. That is, our intention is to estimate the execution time of an algorithm irrespective of the computer machine on which it will be used. Here, the more sophisticated method is to identify the key operations and count such operations performed till the program com- pletes its execution. A key operation in our algorithm is an operation that takes maximum time among all possible operations in the algorithm. Such an abstract, theoretical ap- proach is not only useful for discussing and comparing algorithms, but also it is useful to improve solutions to practical problems. The time complexity can now be expressed as function of number of key operations performed. Before we go ahead with our discussions, it is important to understand the rate growth analysis of an algorithm, as shown in Fig Space complexity Link Analysis of space complexity of an algorithm or program is the amount of memory it needs to run to completion. Some of the reasons for studying space complexity are: If the program is to run on multi user system, it may be required to specify the amount of memory to be allocated to the program. We may be interested to know in advance that whether sufficient memory is available to run the program. There may be several possible solutions with different space requirements. Can be used to estimate the size of the largest problem that a program can solve. The space needed by a program consists of following components. Instruction space : Space needed to store the executable version of the program and it is fixed. Data space : Space needed to store all constants, variable values and has further two components : Space needed by constants and simple variables. This space is fixed. Space needed by fixed sized structural variables, such as arrays and structures. Dynamically allocated space. This space usually varies. Environment stack space: This space is needed to store the information to resume the suspended (partially completed) functions. Each time a function is invoked the following data is saved on the environment stack : Return address : i.e., from where it has to resume after completion of the called function. Values of all lead variables and the values of formal parameters in the function being invoked . The amount of space needed by recursive function is called the recursion stack space. For each recursive function, this space depends on the space needed by the local variables and the formal parameter. In addition, this space depends on the maximum depth of the recursion i.e., maximum number of nested recursive calls. Goals And Design Philosophies of Programming Language Link When a programming language is designed, particular attention must be given to the goals of the language. A number of important goals, such as human communication, the prevention and detection of errors, usability, program effectiveness, compatibility, efficiency, machine independence, and simplicity, are described in turn. This section is also concerned with design philosophies. Philosophies such as uniformity, orthogonality, generality, language modularity, minimality, and level of abstraction are discussed. Human Communication While it is important to communicate efficiently with the computer, detect errors well, and so on, the most basic goal of a programming language is communication between human beings. If a program cannot be understood by humans, it is difficult to verify and it cannot be maintained or modified. Even if the program is still clear to its author, this is a strictly temporary condition. It has been suggested by Kernighan and Plauger (1976) that readability is the best single index of good programming. Certainly, one of the crucial factors in achieving readable programs is an understandable programming language. It is important to realize that the problems of human communication cannot be left entirely to comments or external documentation. Programmers dislike writing excessive comments and tend to avoid them. External documentation is all too often out-of-date and incomplete. Also, this can sometimes apply to internal documentation. A good and very reliable form of documentation is the program itself\u2014if it is readable. Programming languages must be designed with constant attention to clarity and understandability. It is vital to distinguish between readability and writability. It is important to be able to write programs easily. It is necessary to be able to read programs easily. The readability of programs is far more important in the long run than their writability (Hoare, 1973). This is of particular significance because many \"powerful\" and \"convenient\" features tend to produce monumentally obscure programs (e.g., APL \"one-liners\"). The most basic implication of the readability problem for the design of programming languages is that the syntax must reflect the semantics. If the syntax of the programming language does not accurately and completely reflect the manipulations being carried out, there is little hope for understanding the program. Making the syntax match the semantics implies several things. The syntax must clearly state what is happening in sufficient detail to be understandable but not in such unnecessary detail as to be overwhelming. Care should be taken to ensure that a construct performing a particular operation does not read as if it were doing something similar but not quite the same. Furthermore, it is most undesirable for significant actions to be undertaken without any indication in the syntax whatsoever. This rule may seem obvious, but a considerable number of languages violate it (notably PL/I with its conversions and ON-units, and ALGOL 68 with its coercions). A most unfortunate choice of terminology in the field of computer science is the term syntactic sugar because it implies that making language constructs understandable is an unnecessary frill. It is vital that the syntax of a programming language should reflect human thought patterns, rather than the more \"elegant\" but much more obscure patterns of, for example, the lambda calculus (Church, 1941) (or, still worse, the peculiarities of a particular computer's instruction set). A final facet that must be mentioned with regard to human communication through programming languages is that programmers are not computers. Just because a compiler can understand a given construct there is no guarantee that a programmer can. The limitations of the human mind make it quite easy for a complicated structure to become unmanageable, while the compiler has no problem. For example, a simple stack algorithm handles nested constructs for a compiler. Human beings, however, probably do not function in a stacklike manner, and deeply nested constructs can very easily become completely incomprehensible. Humans are ill-equipped to cope with situations where the effect of a construct depends in a complex way on context (as can arise through the use of PL/I ON units). It is also quite possible for a construct to be ambiguous to a human while it is clear and obvious to a compiler (Weinberg, 1971). A good example of this is the simple arithmetic expression \"a/b/c\". In general, a parser will not consider this ambiguous, but how many human programmers would write it without using parentheses? Although it may be more time consuming for a compiler to disallow such a construct, the protection can be worth it. **Prevention and Detection of Errors ** It is a recognized fact that programmers make errors. Although much current work in the field of software engineering is directed toward stopping errors at the source (the programmer), there is no foreseeable chance that errors will be eliminated entirely. It is therefore necessary to assist the programmer in the task of not only preventing but also detecting, identifying, and correcting errors. A good programming language can be a major factor in this. In fact, the efforts of Lampson et al. (1977) in the design of EUCLID, a PASCAL-based language intended for the expression of system programs which are to be verified, indicates that a programming language can significantly affect the ease with which a Unit-II Primitive and non-primitive data structure concept, representation and manipulation of strings, concept and terminology for non-primitive data structure, concept of arrays, stacks, and queues. Basic operations on arrays, stacks & queues. By Vinod: Data Data Type Data Structure Types of Data Structure Linear and Non Linear Primitive and Non-Primitive Concepts Terminology Arrays and its Operations Stack and its Operations Queue and its Operations Strings Representation Manipulation These are several terms involved above which we need to know carefully before we proceed. These include data structure, data type and data representation. Data Type: A data type is a classification of data, which can store a specific type of information. Data types are primarily used in computer programming, in which variables are created to store data. Each variable is assigned a data type that determines what type of data the variable may contain. A data type is a term which refers to the kinds of data that variables may hold. With every programming language there is a set of built-in data types. This means that the language allows variables to name data of that type and provides a set of operations which meaningfully manipulates these variables. Some data types are easy to provide because they are built-in into the computer\u2019s machine language instruction set, such as integer, character etc. Other data types require considerably more efficient to implement. In some languages, these are features which allow one to construct combinations of the built-in types ( like structures in \u2018C\u2019). However, it is necessary to have such mechanism to create the new complex data types which are not provided by the programming language. The new type also must be meaningful for manipulations. Such meaningful data types are referred as abstract data type. Definition of Data Structure Primitive data type: The data structures, typically those data structure that are directly operated upon by machine level instructions i.e. the fundamental data types such as int, float, double in case of \u2018c\u2019 are known as primitive data structures. The term \"data type\" and \"primitive data type\" are often used interchangeably. Primitive data types are predefined types of data, which are supported by the programming language. For example, integer, character, and string are all primitive data types. Programmers can use these data types when creating variables in their programs. For example, a programmer may create a variable called \"lastname\" and define it as a string data type. The variable will then store data as a string of characters. Integer: This is used to represent a number without decimal point. Eg: 12, 90 Float and Double: This is used to represent a number with decimal point. Eg: 45.1, 67.3 Character : This is used to represent single character Eg: \u2018C\u2019, \u2018a\u2019 String: This is used to represent group of characters. Eg: \"M.S.P.V.L Polytechnic College\" Boolean: This is used represent logical values either true or false. Non-primitive data types are not defined by the programming language, but are instead created by the programmer. They are sometimes called \"reference variables,\" or \"object references,\" since they reference a memory location, which stores the data. In the Java programming language, non-primitive data types are simply called \"objects\" because they are created, rather than predefined. While an object may contain any type of data, the information referenced by the object may still be stored as a primitive data type. The data structures, which are not primitive are called non-primitive data structures. There are two types of non-primitive data structures. Linear Data Structures:- A list, which shows the relationship of adjacency between elements, is said to be linear data structure. The most, simplest linear data structure is a 1-D array, but because of its deficiency, list is frequently used for different kinds of data. Non-linear data structure:-A list, which doesn\u2019t show the relationship of adjacency between elements, is said to be non-linear data structure. Type of Data Structures Data Structure Primitive Or Built in Data Structures Integer Character Double Float String Non Primitive Or User Defined Data Structure Linear Array Linked List Singly Doubly Circular Stack Queue Non-Linear Graph Tree Hash Forest Files","title":"Unit I : Introduction to Data Structure and Algorithm"},{"location":"dsa/Unit%20I/#unit-i-introduction-to-data-structure-and-algorithm","text":"Introduction: structure and problem solving, algorithmic notation, Data Structure, Algorithms and sub algorithms, introduction to algorithm analysis for time and space","title":"Unit I : Introduction to Data Structure and Algorithm"},{"location":"dsa/Unit%20I/#introduction","text":"Computer Science is the study of data, its representation and transformation by Computer. For every data object, we consider the class of operations to be performed and then the way to represent the object so that these operations may be efficiently carried out. We require two techniques for this: Devise alternative forms of data representation Analyze the algorithm which operates on the structure.","title":"Introduction"},{"location":"dsa/Unit%20I/#variable","text":"","title":"Variable"},{"location":"dsa/Unit%20I/#data","text":"","title":"Data"},{"location":"dsa/Unit%20I/#program","text":"","title":"Program"},{"location":"dsa/Unit%20I/#programming-language","text":"Interactions involving humans are most effectively carried out through the medium of language. Language permits the expression of thoughts and ideas, and without it, communication as we know it would be very difficult indeed. In computer programming, a programming language serves as a means of communication between the person with a problem and the computer used to help solve it. An effective programming language enhances both the development and the expression of computer programs. It must bridge the gap between the often unstructured nature of human thought and the precision required for computer execution. A hierarchy of programming languages based on increasing machine independence includes the following: Machine-level languages Assembly languages Higher-level or user-oriented languages Problem-oriented languages A machine-level language is the lowest form of computer language. Each instruction in a program is represented by a numeric code, and numerical addresses are used throughout the program to refer to memory locations in the computer's memory. All bookkeeping aspects of the program are the sole responsibility of the machine-language programmer. Finally, all diagnostics and programming aids must be supplied by the programmer. Also included as machine-level programs are programs written in microcode (i.e., microprograms). Microcode allows for the expression of some of the more powerful machine-level instructions in terms of a set of basic machine instructions. Assembly language is essentially a symbolic version of a machine-level language. Each operation code is given a symbolic code such as ADD for addition and MUL for multiplication. Moreover, memory locations are given symbolic names such as PAY and RATE. Some assembly languages contain macroinstructions which are at a higher level than assembly-languages instructions. Assembly- language systems offer certain diagnostic and debugging assistance that is normally not available at the machine level. A high-level language such as FORTRAN, PASCAL, or PL/I offers most of the features of an assembly language. While some facilities for accessing system- level features may not be provided, a high-level language offers a more enriched set of language features such as structured control constructs, nested statements, blocks, and procedures. A problem-oriented language provides for the expression of problems in a specific application or problem area. Examples of such languages are SEQUEL for database retrieval applications and COGO for civil engineering applications. Advantages of high-level languages over low-level languages such as machine and assembly languages include the following: High-level languages are easier to learn than their lower-level counterparts. The learning of many high-level languages requires little or no computer hardware background because such languages are relatively machine-independent. Furthermore, these languages are closer to their problem areas than lower-level languages. The programmer does not have to be concerned with clerical tasks involving numerical or symbolic references to instructions, memory locations, constants, etc. Such tasks are handled by a system which translates the high-level language program into machine language. A programmer is not required to know how to convert data from external forms to various internal forms within the memory of a computer. The ability of a programmer to convert, say, numeric data into internal forms such as floating-point numbers and packed-decimal numbers should be irrelevant. Most high-level languages offer a programmer a variety of control structures which are not available in low-level languages. High-level languages offer several of the following language constructs: Conditional statements (such as IF-THEN-ELSE and CASE statements) Looping statements (for both counted and conditional loops) Nested statements Block structures These control structures improve programming style and facilitate certain programming approaches such as structured programming. Resulting programs are easier to read, understand, and alter. This results in reduced programming costs because programs are less complicated. Programs written in a high-level language are usually more easily debugged than their machine- or assembly-language equivalents. High-level languages offer constructs that eliminate or reduce certain kinds of programming errors that occur in low-level languages. For example, the declaration of variables in a program adds a certain degree of redundancy which is useful in detecting errors in the improper use of variables. Languages often enforce a disciplined use of pointers. Moreover, a structured program is much more easily debugged than its unstructured counterpart. Since most high-level languages offer more powerful control and data-structuring capabilities than low-level languages, the former class of languages facilitates the expression of a solution to a particular problem. Because of the availability of certain language features such as procedures, high-level languages permit a modular and hierarchical description of programming tasks. These tasks can then be assigned to a team of programmers, thus facilitating a division of labor with a minimum of disruption and effort. Such an approach permits better documentation of a problem. Also, increased compatibility among programs and programmers can be realized. Finally, high-level languages are relatively machine-independent. Consequently, certain programs such as FORTRAN and COBOL programs are portable. These programs can be executed on different computers with little, if any, change even though these computers have different internal architectures and machine-language instruction sets. Program portability reduces costs and, in general, protects an installation against computer obsolescence. Often when a computer is replaced, all associated assembly- and machine-language programs become obsolete.","title":"Programming Language"},{"location":"dsa/Unit%20I/#structure-and-problem-solving","text":"","title":"structure and problem solving"},{"location":"dsa/Unit%20I/#data-structure","text":"","title":"Data Structure"},{"location":"dsa/Unit%20I/#introduction-to-data-structure","text":"The way information is organized in the memory of a computer is called a data structure A data structure is a way of organizing data that considers not only the items stored, but also their relationship to each other. Advance knowledge about the relationship between data items allows designing of efficient algorithms for the manipulation of data. Many algorithms require that we use a proper representation of data to achieve efficiency. This representation and the operations that are allowed for it are called data structures. Each data structure allows insertion, access, deletion etc. Why do we need data structures? Data structures allow us to achieve an important goal: component reuse Once each data structure has been implemented once, it can be used over and over again in various applications. Common data structures are Stacks, Queues, Lists, Trees, Graphs, Tables etc.","title":"Introduction to Data Structure"},{"location":"dsa/Unit%20I/#types-of-data-structureclassification-of-data-structure","text":"Based on how the data items or operated it will classified into Primitive Data Structure : is one the data items are operated closest to the machine level instruction. Eg : int, char and double. Non-Primitive Data Structure : is one that data items are not operated closest to machine level instruction. Linear Data Structure : In which the data items are stored in sequence order. Eg: Arrays, Lists, Stacks and Queues. Linear Data Structures List Array One Dimensional Multi-Dimensional Dynamic Array Matrix Sparse Matrix Linked List Single Linked List Double Linked List Circular Linked List Ordered List Stack Queue Circular Queue Priority Queue Deque Dictionary (Associative Array) Hash Table Operations performed on any linear structure: Traversal \u2013 Processing each element in the list Search \u2013 Finding the location of the element with a given value. Insertion \u2013 Adding a new element to the list. Deletion \u2013 Removing an element from the list. Sorting \u2013 Arranging the elements in some type of order. Merging \u2013 Combining two lists into a single list. Non Linear Data Structure : In which the order of data items is not presence. Eg : Trees, Graphs. Non\u2010Linear Data Structures Graph Adjacency List Adjacency Matrix Spanning Tree Tree M\u2010Way Tree B\u2010Tree 1. 2\u20103\u20104 Tree 2. B+ Tree Binary Tree 1. Binary Search Tree 2. Self\u2010Balancing Binary Search Tree 1. AVL Tree 2. Red\u2010Black Tree 3. Splay Tree 3. Heap 1. Min Heap 2. Max Heap 3. Binary Heap 4. Parse Tree","title":"Types of Data Structure/Classification of Data Structure"},{"location":"dsa/Unit%20I/#algorithms","text":"","title":"Algorithms"},{"location":"dsa/Unit%20I/#introduction-to-algorithm","text":"","title":"Introduction to Algorithm"},{"location":"dsa/Unit%20I/#sub-algorithms","text":"A sub algorithm is an independent component of an algorithm often broken down into smaller chunks and for this reason is defined separately from the main algorithm. The purpose of a sub algorithm is to perform some computation when required, under control of the main algorithm. This computation may be performed on zero or more parameters passed by the calling routine. So that they are easy to read, reuse in another algorithm When the problem is very complex, it is divided into several independent sub-problems. Each sub-problem is called sub-algorithm and can be developed independently. These sub-problems can be combined together to form the solution for the entire problem. Thus by using sub-algorithms the complex problems can be solved easily. A sub-algorithm is a block of instructions that is executed when it is called from some other point of the algorithm. Sub-algorithms are of two type: Sub-algorithms that do not return a value Sub-algorithms that return a value The sub-algorithm is called function in C++. Definition of a sub-algorithm that does not return a value Sub-algorithm without arguments: SUBALGORITHM subalgorithm-name ( ) Statements END subalgorithm-name where, ( ) is the empty list. Sub-algorithm with arguments: SUBALGORITHM subalgorithm-name (parameter-list) Statements END subalgorithm-name where, Parameter-list is a list that contains one or more parameters that are passed to the sub-algorithm. Note: The call to a sub-algorithm that does not return a value is given in the CALL statement which has the following syntax: subalgorithm-name (Actual parameters) e.g. sum(4,7) or sum(x,y) Definition of a sub-algorithm that returns a value: Sub-algorithm without arguments: ftype SUBALGORITHM subalgorithm-name ( ) Statements END subalgorithm-name Notes: ftype: is any data type that the result of a subalgortihm can have. If the subalgorithm does not return any result, then no type is specified. ( ) empty list. If the subalgorithm has a type, then the Statements in the body of the subalgorithm should have return statement, usually it is the last statement. Sub-algorithm without arguments: ftype SUBALGORITHM subalgorithm-name (parameter-list) Statements END subalgorithm-name Notes: ftype: is any data type that the result of a Subalgorithm can have. If the Subalgorithm does not return any result, then no type is specified. parameter-list: includes one or more arguments. If the Subalgorithm has a type, then the Statements in the body of the Subalgorithm should have return statement, usually it is the last statement.","title":"Sub Algorithms"},{"location":"dsa/Unit%20I/#different-approaches-to-designing-an-algorithm","text":"Algorithms are used to manipulate the data contained in data structures. When working with data structures, algorithms are used to perform operations on the stored data. A complex algorithm is often divided into smaller units called modules. This process of dividing an algorithm into modules is called modularization. The key advantages of modularization are as follows: complex algorithm simpler to design and implement. Each module can be designed independently. While designing one module, the details of other modules can be ignored, thereby enhancing clarity in design which in turn simplifies implementation, debugging, testing, documenting, and maintenance of the overall algorithm. There are two main approaches to design an algorithm\u2014top-down approach and bottom-up approach, as shown in Fig.","title":"DIFFERENT APPROACHES TO DESIGNING AN ALGORITHM"},{"location":"dsa/Unit%20I/#top-down-approach","text":"A top-down design approach starts by dividing the complex algorithm into one or more modules. These modules can further be decomposed into one or more sub-modules, and this process of decomposition is iterated until the desired level of module complexity is achieved. Top-down design method is a form of stepwise refinement where we begin with the topmost module and incrementally add modules that it calls. Therefore, in a top-down approach, we start from an abstract design and then at each step, this design is refined into more concrete levels until a level is reached that requires no further refinement.","title":"Top-down approach"},{"location":"dsa/Unit%20I/#bottom-up-approach","text":"A bottom-up approach is just the reverse of top-down approach. In the bottom-up design, we start with designing the most basic or concrete modules and then proceed towards designing higher level modules. The higher level modules are implemented by using the operations performed by lower level modules. Thus, in this approach sub-modules are grouped together to form a higher level module. All the higher level modules are clubbed together to form even higher level modules. This process is repeated until the design of the complete algorithm is obtained.","title":"Bottom-up approach"},{"location":"dsa/Unit%20I/#structured-programming","text":"It is a programming style; and this style of programming is known by several names: Procedural decomposition, Structured programming, etc. Structured programming is not programming with structures but by using following types of code structures to write programs: Sequence of sequentially executed statements Conditional execution of statements (i.e., \u201cif\u201d statements) Looping or iteration (i.e., \u201cfor, do...while, and while\u201d statements) Structured subroutine calls (i.e., functions) In particular, the following language usage is forbidden: \u201cGoTo\u201d statements \u201cBreak\u201d or \u201ccontinue\u201d out of the middle of loops Multiple exit points to a function/ procedure/ subroutine (i.e., multiple \u201creturn\u201d statements) Multiple entry points to a function/ procedure/ subroutine/ method In this style of programming there is a great risk that implementation details of many data structures have to be shared between functions, and thus globally exposed. This in turn tempts other functions to use these implementation details; thereby creating unwanted dependencies between different parts of the program. The main disadvantage is that all decisions made from the start of the project depends directly or indirectly on the high-level specification of the application. It is a well- known fact that this specification tends to change over a time. When that happens, there is a great risk that large parts of the application need to be rewritten.","title":"STRUCTURED PROGRAMMING"},{"location":"dsa/Unit%20I/#top-down-vs-bottom-up-approach","text":"Whether the top-down strategy should be followed or a bottom-up is a question that can be answered depending on the application at hand. While top-down approach follows a stepwise refinement by decomposing the algorithm into manageable modules, the bottom-up approach on the other hand defines a module and then groups together several modules to form a new higher level module. Top-down approach is highly appreciated for ease in documenting the modules, generation of test cases, implementation of code, and debugging. However, it is also criticized because the sub-modules are analysed in isolation without concentrating on their communication with other modules or on reusability of components and little attention is paid to data, thereby ignoring the concept of information hiding. Although the bottom-up approach allows information hiding as it first identifies what has to be encapsulated within a module and then provides an abstract interface to define the module\u2019s boundaries as seen from the clients. But all this is difficult to be done in a strict bottom-up strategy. Some top-down activities need to be performed for this. All in all, design of complex algorithms must not be constrained to proceed according to a fixed pattern but should be a blend of top-down and bottom-up approaches.","title":"Top-down vs bottom-up approach"},{"location":"dsa/Unit%20I/#algorithmic-notation","text":"","title":"Algorithmic Notation"},{"location":"dsa/Unit%20I/#big-oh","text":"","title":"Big Oh"},{"location":"dsa/Unit%20I/#big-omega","text":"","title":"Big Omega"},{"location":"dsa/Unit%20I/#big-theta","text":"","title":"Big Theta"},{"location":"dsa/Unit%20I/#algorithm-analysis","text":"","title":"Algorithm Analysis"},{"location":"dsa/Unit%20I/#introduction-to-algorithm-analysis","text":"After designing an algorithm, it has to be checked and its correctness needs to be predicted; this is done by analyzing the algorithm. The algorithm can be analyzed by tracing all step-by-step instructions, reading the algorithm for logical correctness, and testing it on some data using mathematical techniques to prove it correct. Another type of analysis is to analyze the simplicity of the algorithm. That is, design the algorithm in a simple way so that it becomes easier to be implemented. However, the simplest and most straightforward way of solving a problem may not be sometimes the best one. Moreover there may be more than one algorithm to solve a problem. The choice of a particular algorithm depends on following performance analysis and measurements : Space complexity Time complexity","title":"introduction to algorithm analysis"},{"location":"dsa/Unit%20I/#complexity","text":"","title":"Complexity"},{"location":"dsa/Unit%20I/#time-complexity","text":"The time complexity of an algorithm or a program is the amount of time it needs to run to completion. The exact time will depend on the implementation of the algorithm, programming language, optimizing the capabilities of the compiler used, the CPU speed, other hardware characteristics/ specifications and so on. To measure the time complexity accurately, we have to count all sorts of operations performed in an algorithm. If we know the time for each one of the primitive operations performed in a given computer, we can easily compute the time taken by an algorithm to complete its execution. This time will vary from machine to machine. By analyzing an algorithm, it is hard to come out with an exact time required. To find out exact time complexity, we need to know the exact instruc- tions executed by the hardware and the time required for the instruction. The time com- plexity also depends on the amount of data inputted to an algorithm. But we can calculate the order of magnitude for the time required. That is, our intention is to estimate the execution time of an algorithm irrespective of the computer machine on which it will be used. Here, the more sophisticated method is to identify the key operations and count such operations performed till the program com- pletes its execution. A key operation in our algorithm is an operation that takes maximum time among all possible operations in the algorithm. Such an abstract, theoretical ap- proach is not only useful for discussing and comparing algorithms, but also it is useful to improve solutions to practical problems. The time complexity can now be expressed as function of number of key operations performed. Before we go ahead with our discussions, it is important to understand the rate growth analysis of an algorithm, as shown in Fig","title":"Time Complexity"},{"location":"dsa/Unit%20I/#space-complexity","text":"Analysis of space complexity of an algorithm or program is the amount of memory it needs to run to completion. Some of the reasons for studying space complexity are: If the program is to run on multi user system, it may be required to specify the amount of memory to be allocated to the program. We may be interested to know in advance that whether sufficient memory is available to run the program. There may be several possible solutions with different space requirements. Can be used to estimate the size of the largest problem that a program can solve. The space needed by a program consists of following components. Instruction space : Space needed to store the executable version of the program and it is fixed. Data space : Space needed to store all constants, variable values and has further two components : Space needed by constants and simple variables. This space is fixed. Space needed by fixed sized structural variables, such as arrays and structures. Dynamically allocated space. This space usually varies. Environment stack space: This space is needed to store the information to resume the suspended (partially completed) functions. Each time a function is invoked the following data is saved on the environment stack : Return address : i.e., from where it has to resume after completion of the called function. Values of all lead variables and the values of formal parameters in the function being invoked . The amount of space needed by recursive function is called the recursion stack space. For each recursive function, this space depends on the space needed by the local variables and the formal parameter. In addition, this space depends on the maximum depth of the recursion i.e., maximum number of nested recursive calls.","title":"Space complexity"},{"location":"dsa/Unit%20I/#goals-and-design-philosophies-of-programming-language","text":"When a programming language is designed, particular attention must be given to the goals of the language. A number of important goals, such as human communication, the prevention and detection of errors, usability, program effectiveness, compatibility, efficiency, machine independence, and simplicity, are described in turn. This section is also concerned with design philosophies. Philosophies such as uniformity, orthogonality, generality, language modularity, minimality, and level of abstraction are discussed. Human Communication While it is important to communicate efficiently with the computer, detect errors well, and so on, the most basic goal of a programming language is communication between human beings. If a program cannot be understood by humans, it is difficult to verify and it cannot be maintained or modified. Even if the program is still clear to its author, this is a strictly temporary condition. It has been suggested by Kernighan and Plauger (1976) that readability is the best single index of good programming. Certainly, one of the crucial factors in achieving readable programs is an understandable programming language. It is important to realize that the problems of human communication cannot be left entirely to comments or external documentation. Programmers dislike writing excessive comments and tend to avoid them. External documentation is all too often out-of-date and incomplete. Also, this can sometimes apply to internal documentation. A good and very reliable form of documentation is the program itself\u2014if it is readable. Programming languages must be designed with constant attention to clarity and understandability. It is vital to distinguish between readability and writability. It is important to be able to write programs easily. It is necessary to be able to read programs easily. The readability of programs is far more important in the long run than their writability (Hoare, 1973). This is of particular significance because many \"powerful\" and \"convenient\" features tend to produce monumentally obscure programs (e.g., APL \"one-liners\"). The most basic implication of the readability problem for the design of programming languages is that the syntax must reflect the semantics. If the syntax of the programming language does not accurately and completely reflect the manipulations being carried out, there is little hope for understanding the program. Making the syntax match the semantics implies several things. The syntax must clearly state what is happening in sufficient detail to be understandable but not in such unnecessary detail as to be overwhelming. Care should be taken to ensure that a construct performing a particular operation does not read as if it were doing something similar but not quite the same. Furthermore, it is most undesirable for significant actions to be undertaken without any indication in the syntax whatsoever. This rule may seem obvious, but a considerable number of languages violate it (notably PL/I with its conversions and ON-units, and ALGOL 68 with its coercions). A most unfortunate choice of terminology in the field of computer science is the term syntactic sugar because it implies that making language constructs understandable is an unnecessary frill. It is vital that the syntax of a programming language should reflect human thought patterns, rather than the more \"elegant\" but much more obscure patterns of, for example, the lambda calculus (Church, 1941) (or, still worse, the peculiarities of a particular computer's instruction set). A final facet that must be mentioned with regard to human communication through programming languages is that programmers are not computers. Just because a compiler can understand a given construct there is no guarantee that a programmer can. The limitations of the human mind make it quite easy for a complicated structure to become unmanageable, while the compiler has no problem. For example, a simple stack algorithm handles nested constructs for a compiler. Human beings, however, probably do not function in a stacklike manner, and deeply nested constructs can very easily become completely incomprehensible. Humans are ill-equipped to cope with situations where the effect of a construct depends in a complex way on context (as can arise through the use of PL/I ON units). It is also quite possible for a construct to be ambiguous to a human while it is clear and obvious to a compiler (Weinberg, 1971). A good example of this is the simple arithmetic expression \"a/b/c\". In general, a parser will not consider this ambiguous, but how many human programmers would write it without using parentheses? Although it may be more time consuming for a compiler to disallow such a construct, the protection can be worth it. **Prevention and Detection of Errors ** It is a recognized fact that programmers make errors. Although much current work in the field of software engineering is directed toward stopping errors at the source (the programmer), there is no foreseeable chance that errors will be eliminated entirely. It is therefore necessary to assist the programmer in the task of not only preventing but also detecting, identifying, and correcting errors. A good programming language can be a major factor in this. In fact, the efforts of Lampson et al. (1977) in the design of EUCLID, a PASCAL-based language intended for the expression of system programs which are to be verified, indicates that a programming language can significantly affect the ease with which a Unit-II Primitive and non-primitive data structure concept, representation and manipulation of strings, concept and terminology for non-primitive data structure, concept of arrays, stacks, and queues. Basic operations on arrays, stacks & queues. By Vinod: Data Data Type Data Structure Types of Data Structure Linear and Non Linear Primitive and Non-Primitive Concepts Terminology Arrays and its Operations Stack and its Operations Queue and its Operations Strings Representation Manipulation These are several terms involved above which we need to know carefully before we proceed. These include data structure, data type and data representation. Data Type: A data type is a classification of data, which can store a specific type of information. Data types are primarily used in computer programming, in which variables are created to store data. Each variable is assigned a data type that determines what type of data the variable may contain. A data type is a term which refers to the kinds of data that variables may hold. With every programming language there is a set of built-in data types. This means that the language allows variables to name data of that type and provides a set of operations which meaningfully manipulates these variables. Some data types are easy to provide because they are built-in into the computer\u2019s machine language instruction set, such as integer, character etc. Other data types require considerably more efficient to implement. In some languages, these are features which allow one to construct combinations of the built-in types ( like structures in \u2018C\u2019). However, it is necessary to have such mechanism to create the new complex data types which are not provided by the programming language. The new type also must be meaningful for manipulations. Such meaningful data types are referred as abstract data type. Definition of Data Structure Primitive data type: The data structures, typically those data structure that are directly operated upon by machine level instructions i.e. the fundamental data types such as int, float, double in case of \u2018c\u2019 are known as primitive data structures. The term \"data type\" and \"primitive data type\" are often used interchangeably. Primitive data types are predefined types of data, which are supported by the programming language. For example, integer, character, and string are all primitive data types. Programmers can use these data types when creating variables in their programs. For example, a programmer may create a variable called \"lastname\" and define it as a string data type. The variable will then store data as a string of characters. Integer: This is used to represent a number without decimal point. Eg: 12, 90 Float and Double: This is used to represent a number with decimal point. Eg: 45.1, 67.3 Character : This is used to represent single character Eg: \u2018C\u2019, \u2018a\u2019 String: This is used to represent group of characters. Eg: \"M.S.P.V.L Polytechnic College\" Boolean: This is used represent logical values either true or false. Non-primitive data types are not defined by the programming language, but are instead created by the programmer. They are sometimes called \"reference variables,\" or \"object references,\" since they reference a memory location, which stores the data. In the Java programming language, non-primitive data types are simply called \"objects\" because they are created, rather than predefined. While an object may contain any type of data, the information referenced by the object may still be stored as a primitive data type. The data structures, which are not primitive are called non-primitive data structures. There are two types of non-primitive data structures. Linear Data Structures:- A list, which shows the relationship of adjacency between elements, is said to be linear data structure. The most, simplest linear data structure is a 1-D array, but because of its deficiency, list is frequently used for different kinds of data. Non-linear data structure:-A list, which doesn\u2019t show the relationship of adjacency between elements, is said to be non-linear data structure. Type of Data Structures Data Structure Primitive Or Built in Data Structures Integer Character Double Float String Non Primitive Or User Defined Data Structure Linear Array Linked List Singly Doubly Circular Stack Queue Non-Linear Graph Tree Hash Forest Files","title":"Goals And Design Philosophies of Programming Language"},{"location":"dsa/UnitV/","text":"Searching Linear Search Binary search Sorting selection sort bubble sort merge sort Introduction to Searching Searching means to find whether a particular value is present in an array/List or not. If the value is present in the array, then searching is said to be successful and the searching process gives the location of that value in the array. However, if the value is not present in the array, the searching process displays an appropriate message and in this case searching is said to be unsuccessful. There are two popular methods for searching the array elements: linear search binary search Interpolation search Jump Search Fibonacci Search The algorithm that should be used depends entirely on how the values are organized in the array. For example, if the elements of the array are arranged in ascending order, then binary search should be used, as it is more efficient for sorted lists in terms of complexity. Linear Search Linear search, also called as sequential search, is a very simple method used for searching an array for a particular value. It works by comparing the value to be searched with every element of the array one by one in a sequence until a match is found. Linear search is mostly used to search an unordered list of elements (array in which data elements are not sorted). For example, if an array A[] is declared and initialized as, int A[] = {10, 8, 2, 7, 3, 4, 9, 1, 6, 5}; and the value to be searched is VAL = 7, then searching means to find whether the value \u20187\u2019 is present in the array or not. If yes, then it returns the position of its occurrence. Here, POS = 3 (index starting from 0). ALGORITHM : LINEAR_SEARCH(A, N, VAL) Step 1: [INITIALIZE] SET POS = -1 Step 2: [INITIALIZE] SET I = 1 Step 3: Repeat Step 4 while I<=N Step 4: IF A[I] = VAL SET POS = I PRINT POS Go to Step 6 [END OF IF] SET I = I + 1 [END OF LOOP] Step 5: IF POS = \u20131 PRINT VALUE IS NOT PRESENT IN THE ARRAY [END OF IF] Step 6: Exit Algorithm shows the algorithm for linear search. In Steps 1 and 2 of the algorithm, we initialize the value of POS and I. In Step 3, a while loop is executed that would be executed till I is less than N (total number of elements in the array). In Step 4, a check is made to see if a match is found between the current array element and VAL. If a match is found, then the position of the array element is printed, else the value of I is incremented to match the next element with VAL. However, if all the array elements have been compared with VAL and no match is found, then it means that VAL is not present in the array. Complexity of Linear Search Algorithm Linear search executes in O(n) time where n is the number of elements in the array. Obviously, the best case of linear search is when VAL is equal to the first element of the array. In this case, only one comparison will be made. Likewise, the worst case will happen when either VAL is not present in the array or it is equal to the last element of the array. In both the cases, n comparisons will have to be made. However, the performance of the linear search algorithm can be improved by using a sorted array. Binary Search Binary search is a searching algorithm that works efficiently with a sorted list. The mechanism of binary search can be better understood by an analogy of a telephone directory. When we are searching for a particular name in a directory, we first open the directory from the middle and then decide whether to look for the name in the first part of the directory or in the second part of the directory. Again, we open some page in the middle and the whole process is repeated until we finally find the right name. Take another analogy. How do we find words in a dictionary? We first open the dictionary somewhere in the middle. Then, we compare the first word on that page with the desired word whose meaning we are looking for. If the desired word comes before the word on the page, we look in the first half of the dictionary, else we look in the second half. Again, we open a page in the first half of the dictionary and compare the first word on that page with the desired word and repeat the same procedure until we finally get the word. The same mechanism is applied in the binary search. Now, let us consider how this mechanism is applied to search for a value in a sorted array. Consider an array A[] that is declared and initialized as int A[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; and the value to be searched is VAL = 9. The algorithm will proceed in the following manner. BEG = 0, END = 10, MID = (0 + 10)/2 = 5 Now, VAL = 9 and A[MID] = A[5] = 5 A[5] is less than VAL, therefore, we now search for the value in the second half of the array. So, we change the values of BEG and MID. Now, BEG = MID + 1 = 6, END = 10, MID = (6 + 10)/2 =16/2 = 8 VAL = 9 and A[MID] = A[8] = 8 A[8] is less than VAL, therefore, we now search for the value in the second half of the segment. So, again we change the values of BEG and MID. Now, BEG = MID + 1 = 9, END = 10, MID = (9 + 10)/2 = 9 Now, VAL = 9 and A[MID] = 9. In this algorithm, we see that BEG and END are the beginning and ending positions of the segment that we are looking to search for the element. MID is calculated as (BEG + END)/2. Initially, BEG = lower_bound and END = upper_bound. The algorithm will terminate when A[MID] = VAL. When the algorithm ends, we will set POS = MID. POS is the position at which the value is present in the array. However, if VAL is not equal to A[MID], then the values of BEG, END, and MID will be changed depending on whether VAL is smaller or greater than A[MID]. (a) If VAL < A[MID], then VAL will be present in the left segment of the array. So, the value of END will be changed as END = MID \u2013 1. (b) If VAL > A[MID], then VAL will be present in the right segment of the array. So, the value of BEG will be changed as BEG = MID + 1. Finally, if VAL is not present in the array, then eventually, END will be less than BEG. When this happens, the algorithm will terminate and the search will be unsuccessful. Figure 14.2 shows the algorithm for binary search. In Step 1, we initialize the value of variables, BEG, END, and POS. In Step 2, a while loop is executed until BEG is less than or equal to END. In Step 3, the value of MID is calculated. In Step 4, we check if the array value at MID is equal to VAL (item to be searched in the array). If a match is found, then the value of POS is printed and the algorithm exits. However, if a match is not found, and if the value of A[MID] is greater than VAL, the value of END is modified, otherwise if A[MID] is greater than VAL, then the value of BEG is altered. In Step 5, if the value of POS = \u20131, then VAL is not present in the array and an appropriate message is printed on the screen before the algorithm exits. ALGORITHM : BINARY_SEARCH(A, lower_bound, upper_bound, VAL) Step 1: [INITIALIZE] SET BEG = lower_bound END = upper_bound, POS = - 1 Step 2: Repeat Steps 3 and 4 while BEG <= END Step 3: SET MID = (BEG + END)/2 Step 4: IF A[MID] = VAL SET POS = MID PRINT POS Go to Step 6 ELSE IF A[MID] > VAL SET END = MID - 1 ELSE SET BEG = MID + 1 [END OF IF] [END OF LOOP] Step 5: IF POS = -1 PRINT \u201cVALUE IS NOT PRESENT IN THE ARRAY\u201d [END OF IF] Step 6: EXIT Fibonacci Search We are all well aware of the Fibonacci series in which the first two terms are 0 and 1 and then each successive term is the sum of previous two terms. In the Fibonacci series given below, each number is called a Fibonacci number. 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... The same series and concept can be used to search for a given value in a list of numbers. Such a search algorithm which is based on Fibonacci numbers is called Fibonacci search and was developed by Kiefer in 1953. The search follows a divide-and-conquer technique and narrows down possible locations with the help of Fibonacci numbers. Fibonacci search is similar to binary search. It also works on a sorted list and has a run time complexity of O(log n). However, unlike the binary search algorithm, Fibonacci search does not divide the list into two equal halves rather it subtracts a Fibonacci number from the index to reduce the size of the list to be searched. So, the key advantage of Fibonacci search over binary search is that comparison dispersion is low.","title":"UnitV"},{"location":"ec/","text":"E-COMMERCE Link Unit-I E-commerce : Objectives, advantages and disadvantages, Forces driving E-Commerce, Traditional commerce and E-commerce, E-Commerce opportunities for industries. Unit-II E-Commerce Models : Business to consumer, Business to Business, Consumer to Consumer, other models \u2013Brokerage Model, Advertising mode, Aggregator Model, Info-mediary Model, Community Model and value chain Model. Unit-III Electronic Payment Systems : Special features required in payment systems, Types of E-pyment systems, Smart Card, Electronic wallet, E-Cash, E-cheque, credit card. Unit-IV Digital Marketing, E-Customer Relationship Management, E-Supply Chain Management. E-Commerce: An Indian perspective, Digilocker, attendance.gov.in, mygov.in, Swachh Bharat Mission, E-Hospital, National Scholarship portal, E-Sampark, UID, various modes of Digital payment of govt. of India. Unit-V Security Issues in E-Commerce : Security risk of E-Commerce, Types of threats, Security tools and risk management approach, Overview of Cyber law, Business Ethics, EDI Application in business. Text/Reference Books E - Commerce An Indian Perspective by P.T. Joseph, S.J., PHI Doing Business on the Internet E \u2013 Commerce (Electronic Commerce for business) by S. Jaiswal, Galgotia Publications. E-Commerce by Schneider, Thomson Publication. E-commerce: Strategy \u2013 Technologies and Application by Whitley David, TMH, India. Electronic Commerce by Greenstein, TMH. Electronic Commerce: A managerial perspective \u2013 E.Turban \u2013 Prentice Hall of India Electronic Commerce: Frontiers of Electronic Commerce \u2013 Kalarsta & Whinston, Addison-Wesley.","title":"E-COMMERCE"},{"location":"ec/#e-commerce","text":"Unit-I E-commerce : Objectives, advantages and disadvantages, Forces driving E-Commerce, Traditional commerce and E-commerce, E-Commerce opportunities for industries. Unit-II E-Commerce Models : Business to consumer, Business to Business, Consumer to Consumer, other models \u2013Brokerage Model, Advertising mode, Aggregator Model, Info-mediary Model, Community Model and value chain Model. Unit-III Electronic Payment Systems : Special features required in payment systems, Types of E-pyment systems, Smart Card, Electronic wallet, E-Cash, E-cheque, credit card. Unit-IV Digital Marketing, E-Customer Relationship Management, E-Supply Chain Management. E-Commerce: An Indian perspective, Digilocker, attendance.gov.in, mygov.in, Swachh Bharat Mission, E-Hospital, National Scholarship portal, E-Sampark, UID, various modes of Digital payment of govt. of India. Unit-V Security Issues in E-Commerce : Security risk of E-Commerce, Types of threats, Security tools and risk management approach, Overview of Cyber law, Business Ethics, EDI Application in business. Text/Reference Books E - Commerce An Indian Perspective by P.T. Joseph, S.J., PHI Doing Business on the Internet E \u2013 Commerce (Electronic Commerce for business) by S. Jaiswal, Galgotia Publications. E-Commerce by Schneider, Thomson Publication. E-commerce: Strategy \u2013 Technologies and Application by Whitley David, TMH, India. Electronic Commerce by Greenstein, TMH. Electronic Commerce: A managerial perspective \u2013 E.Turban \u2013 Prentice Hall of India Electronic Commerce: Frontiers of Electronic Commerce \u2013 Kalarsta & Whinston, Addison-Wesley.","title":"E-COMMERCE"},{"location":"ec/UnitI/","text":"E-commerce : Objectives, advantages and disadvantages, Forces driving E-Commerce, Traditional commerce and E-commerce, E-Commerce opportunities for industries.","title":"UnitI"},{"location":"ec/UnitII/","text":"E-Commerce Models : Business to consumer, Business to Business, Consumer to Consumer, other models \u2013Brokerage Model, Advertising mode, Aggregator Model, Info-mediary Model, Community Model and value chain Model.","title":"UnitII"},{"location":"ec/UnitIII/","text":"Electronic Payment Systems : Special features required in payment systems, Types of E-payment systems, Smart Card, Electronic wallet, E-Cash, E-cheque, credit card.","title":"UnitIII"},{"location":"ec/UnitIV/","text":"Digital Marketing, E-Customer Relationship Management, E-Supply Chain Management. E-Commerce: An Indian perspective, Digilocker, attendance.gov.in, mygov.in, Swachh Bharat Mission, E-Hospital, National Scholarship portal, E-Sampark, UID, various modes of Digital payment of govt. of India.","title":"UnitIV"},{"location":"ec/UnitV/","text":"Security Issues in E-Commerce : Security risk of E-Commerce, Types of threats, Security tools and risk management approach, Overview of Cyber law, Business Ethics, EDI Application in business.","title":"UnitV"},{"location":"java/","text":"BCA-305: Programming with JAVA Link Time: 3 Hrs. Max. Marks: 75 Unit I An overview of Java: Object oriented programming, Two paradigms, abstraction, the, OOP principles, Java class libraries, variables, arrays, Data types and casting, Operators, operator precedence, Control statements. Unit II Classes & Objects: Class fundamentals, declaring object reference variable, Introducing methods, constructors, the key word, garbage collection, Overloading methods. Inheritance and polymorphism: super class and subclass, protected members, Relationship between super and sub class. Inheritance hierarchy, abstract classes and methods, final methods and classes, nested classes, Type wrappers. Unit-III String handling: The string constructor, string length, special string operator character extraction, string comparison, searching string, modifying string, data conversion, changing the case of characters, string buffer. Unit IV Multi threaded Programming: The Java thread model, the main thread, creating thread, creating multiple thread, using is alive () and join (). Thread priorities, synchronization, Inter thread communications, suspending resuming and stopping thread using multi threading. Exception handling: Exception handling fundamentals Unit-V Introduction to Applets : Applet Fundamentals, using paint method, basic of AWT Recommended Books: Herbert Schildt: JAVA 2 The Complete Reference, TMH, Delhi Deitel: How to Program JAVA, PHI U.K. Chakraborty and D.G. Dastidar: Software and Systems An Introduction, Wheeler Publishing, Delhi. Joseph O\u2019Neil and Herb Schildt: Teach Yourself JAVA, TMH, Delhi Old Paper Practicals Complete Syllabus","title":"BCA-305: Programming with JAVA"},{"location":"java/#bca-305-programming-with-java","text":"Time: 3 Hrs. Max. Marks: 75 Unit I An overview of Java: Object oriented programming, Two paradigms, abstraction, the, OOP principles, Java class libraries, variables, arrays, Data types and casting, Operators, operator precedence, Control statements. Unit II Classes & Objects: Class fundamentals, declaring object reference variable, Introducing methods, constructors, the key word, garbage collection, Overloading methods. Inheritance and polymorphism: super class and subclass, protected members, Relationship between super and sub class. Inheritance hierarchy, abstract classes and methods, final methods and classes, nested classes, Type wrappers. Unit-III String handling: The string constructor, string length, special string operator character extraction, string comparison, searching string, modifying string, data conversion, changing the case of characters, string buffer. Unit IV Multi threaded Programming: The Java thread model, the main thread, creating thread, creating multiple thread, using is alive () and join (). Thread priorities, synchronization, Inter thread communications, suspending resuming and stopping thread using multi threading. Exception handling: Exception handling fundamentals Unit-V Introduction to Applets : Applet Fundamentals, using paint method, basic of AWT Recommended Books: Herbert Schildt: JAVA 2 The Complete Reference, TMH, Delhi Deitel: How to Program JAVA, PHI U.K. Chakraborty and D.G. Dastidar: Software and Systems An Introduction, Wheeler Publishing, Delhi. Joseph O\u2019Neil and Herb Schildt: Teach Yourself JAVA, TMH, Delhi Old Paper Practicals Complete Syllabus","title":"BCA-305: Programming with JAVA"},{"location":"java/Abstract%20and%20Interface/","text":"Abstract Class in JAVA Link Java Abstract classes are used to declare common characteristics of subclasses. An abstract class cannot beinstantiated. It can only be used as a superclass for other classes that extendthe abstract class. Abstract classes are declared with the abstract keyword.Abstract classes are used to provide a template or design for concretesubclasses down the inheritance tree. Like any other class, an abstract class can contain fields thatdescribe the characteristics and methods that describe the actions that a classcan perform. An abstract class can include methods that contain noimplementation. These are called abstract methods. The abstract methoddeclaration must then end with a semicolon rather than a block. If a class hasany abstract methods, whether declared or inherited, the entire class must bedeclared abstract. Abstract methods are used to provide a template for theclasses that inherit the abstract methods. Abstract classes cannot be instantiated; they must be subclassed,and actual implementations must be provided for the abstract methods. Anyimplementation specified can, of course, be overridden by additionalsubclasses. An object must have an implementation for all of its methods. Youneed to create a subclass that provides an implementation for the abstractmethod. A class abstract Vehicle might be specified as abstract torepresent the general abstraction of a vehicle, as creating instances of theclass would not be meaningful. abstract class Vehicle { int numofGears ; String color ; abstract boolean hasDiskBrake (); abstract int getNoofGears (); } Example of a shape class as an abstract class abstract class Shape { public String color ; public Shape () { } public void setColor ( String c ) { color = c ; } public String getColor () { return color ; } abstract public double area (); } We can also implement the generic shapes class as an abstractclass so that we can draw lines, circles, triangles etc. All shapes have somecommon fields and methods, but each can, of course, add more fields andmethods. The abstract class guarantees that each shape will have the same setof basic properties. We declare this class abstract because there is no suchthing as a generic shape. There can only be concrete shapes such as squares,circles, triangles etc. public class Point extends Shape { static int x , y ; public Point () { x = 0 ; y = 0 ; } public double area () { return 0 ; } public double perimeter () { return 0 ; } public static void print () { System . out . println ( \"point: \" + x + \",\" + y ); } public static void main ( String args []) { Point p = new Point (); p . print (); } } Output point: 0 , 0 Notice that, in order to create a Point object, its class cannotbe abstract. This means that all of the abstract methods of the Shape classmust be implemented by the Point class. The subclass must define an implementation for every abstractmethod of the abstract superclass, or the subclass itself will also beabstract. Similarly other shape objects can be created using the generic ShapeAbstract class. A big Disadvantage ofusing abstract classes is not able to use multiple inheritance. In the sense,when a class extends an abstract class, it can\u2019t extend any other class. Java Interface Link In Java, this multiple inheritance problem is solved with apowerful construct called interfaces .Interface can be used to define a generic template and then one or moreabstract classes to define partial implementations of the interface. Interfacesjust specify the method declaration (implicitly public and abstract) and canonly contain fields (which are implicitly public static final). Interfacedefinition begins with a keyword interface. An interface like that of anabstract class cannot be instantiated. Multiple Inheritance is allowed when extending interfaces i.e. oneinterface can extend none, one or more interfaces. Java does not supportmultiple inheritance, but it allows you to extend one class and implement manyinterfaces. If a class that implements an interface does not define all themethods of the interface, then it must be declared abstract and the methoddefinitions must be provided by the subclass that extends the abstract class. Example 1 : Below is an example of a Shapeinterface interface Shape { public double area (); public double volume (); } Below is a Point class that implements theShape interface. public class Point implements Shape { static int x , y ; public Point () { x = 0 ; y = 0 ; } public double area () { return 0 ; } public double volume () { return 0 ; } public static void print () { System . out . println ( \"point: \" + x + \",\" + y ); } public static void main ( String args []) { Point p = new Point (); p . print (); } } Similarly, other shape objects can be created by interfaceprogramming by implementing generic Shape Interface. Example 2 : Belowis a java interfaces program showing the power of interface programming in java Listing below shows 2 interfaces and 4 classes one being an abstract class. Note : The method toString in class A1 is an overridden version of the method defined in the class named Object . The classes B1 and C1 satisfy the interface contract. But since the class** D1** does not define all the methods of the implemented interface I2 , the class D1 is declared abstract. Also, i1.methodI2() produces a compilation error as the method is not declared in I1 or any of its super interfaces if present. Hence a downcast of interface reference I1 solves the problem as shown in the program. The same problem applies to i1.methodA1(), which is again resolved by a downcast. When we invoke the toString() method which is a method of anObject, there does not seem to be any problem as every interface or classextends Object and any class can override the default toString() to suit yourapplication needs. ((C1)o1).methodI1() compiles successfully, but produces aClassCastException at runtime. This is because B1 does not have anyrelationship with C1 except they are \u201csiblings\u201d. You can\u2019t cast siblings intoone another. When a given interface method is invoked on a given reference, thebehavior that results will be appropriate to the class from which thatparticular object was instantiated. This is runtime polymorphism based oninterfaces and overridden methods. interface I1 { void methodI1 (); // public static by default } interface I2 extends I1 { void methodI2 (); // public static by default } class A1 { public String methodA1 () { String strA1 = \"I am in methodC1 of class A1\" ; return strA1 ; } public String toString () { return \"toString() method of class A1\" ; } } class B1 extends A1 implements I2 { public void methodI1 () { System . out . println ( \"I am in methodI1 of class B1\" ); } public void methodI2 () { System . out . println ( \"I am in methodI2 of class B1\" ); } } class C1 implements I2 { public void methodI1 () { System . out . println ( \"I am in methodI1 of class C1\" ); } public void methodI2 () { System . out . println ( \"I am in methodI2 of class C1\" ); } } // Note that the class is declared as abstract as it does not // satisfy the interface contract abstract class D1 implements I2 { public void methodI1 () { } // This class does not implement methodI2() hence declared abstract. } public class InterFaceEx { public static void main ( String [] args ) { I1 i1 = new B1 (); i1 . methodI1 (); // OK as methodI1 is present in B1 // i1.methodI2(); Compilation error as methodI2 not present in I1 // Casting to convert the type of the reference from type I1 to type I2 (( I2 ) i1 ). methodI2 (); I2 i2 = new B1 (); i2 . methodI1 (); // OK i2 . methodI2 (); // OK // Does not Compile as methodA1() not present in interface reference I1 // String var = i1.methodA1(); // Hence I1 requires a cast to invoke methodA1 String var2 = (( A1 ) i1 ). methodA1 (); System . out . println ( \"var2 : \" + var2 ); String var3 = (( B1 ) i1 ). methodA1 (); System . out . println ( \"var3 : \" + var3 ); String var4 = i1 . toString (); System . out . println ( \"var4 : \" + var4 ); String var5 = i2 . toString (); System . out . println ( \"var5 : \" + var5 ); I1 i3 = new C1 (); String var6 = i3 . toString (); System . out . println ( \"var6 : \" + var6 ); // It prints the Object toString() method Object o1 = new B1 (); // o1.methodI1(); does not compile as Object class does not define // methodI1() // To solve the probelm we need to downcast o1 reference. We can do it // in the following 4 ways (( I1 ) o1 ). methodI1 (); // 1 (( I2 ) o1 ). methodI1 (); // 2 (( B1 ) o1 ). methodI1 (); // 3 /* * * B1 does not have any relationship with C1 except they are \"siblings\". * * Well, you can't cast siblings into one another. * */ // ((C1)o1).methodI1(); Produces a ClassCastException } } Output I am in methodI1 of class B1 I am in methodI2 of class B1 I am in methodI1 of class B1 I am in methodI2 of class B1 var2 : I am in methodC1 of class A1 var3 : I am in methodC1 of class A1 var4 : toString() method of class A1 var5 : toString() method of class A1 var6 : C1@190d11 I am in methodI1 of class B1 I am in methodI1 of class B1 I am in methodI1 of class B1 Interface vs Abstract Class Link Interface vs Abstract Class Abstract class is a class which contain one or more abstractmethods, which has to be implemented by sub classes. An abstract class cancontain no abstract methods also i.e. abstract class may contain concretemethods. A Java Interface can contain only method declarations and publicstatic final constants and doesn\u2019t contain their implementation. The classeswhich implement the Interface must provide the method definition for all themethods present. Abstract class definition begins with the keyword \u201cabstract\u201dkeyword followed by Class definition. An Interface definition begins with thekeyword \u201cinterface\u201d. Abstract classes are useful in a situation when some generalmethods should be implemented and specialization behavior should be implementedby subclasses. Interfaces are useful in a situation when all its propertiesneed to be implemented by subclasses All variables in an Interface are by default - public staticfinal while an abstract class can have instance variables. An interface is also used in situations when a class needs toextend an other class apart from the abstract class. In such situations its notpossible to have multiple inheritance of classes. An interface on the otherhand can be used when it is required to implement one or more interfaces.Abstract class does not support Multiple Inheritance whereas an Interfacesupports multiple Inheritance. An Interface can only have public members whereas an abstractclass can contain private as well as protected members. A class implementing an interface must implement all of themethods defined in the interface, while a class extending an abstract class neednot implement any of the methods defined in the abstract class. The problem with an interface is, if you want to add a newfeature (method) in its contract, then you MUST implement those method in allof the classes which implement that interface. However, in the case of anabstract class, the method can be simply implemented in the abstract class andthe same can be called by its subclass Interfaces are slow as it requires extra indirection to to findcorresponding method in in the actual class. Abstract classes are fast Interfaces are often used to describe the peripheral abilities of a class, and not its central identity, E.g. an Automobile class might implement the Recyclable interface, which could apply to many otherwise totally unrelated objects. Note: There is no difference between a fully abstract class (all methods declared as abstract and all fields are public static final) and an interface. Note: If the various objects are all of-a-kind, and share a common state and behavior, then tend towards a common base class. If all they share is a set of method signatures, then tend towards an interface.","title":"Abstract and Interface"},{"location":"java/Abstract%20and%20Interface/#abstract-class-in-java","text":"Java Abstract classes are used to declare common characteristics of subclasses. An abstract class cannot beinstantiated. It can only be used as a superclass for other classes that extendthe abstract class. Abstract classes are declared with the abstract keyword.Abstract classes are used to provide a template or design for concretesubclasses down the inheritance tree. Like any other class, an abstract class can contain fields thatdescribe the characteristics and methods that describe the actions that a classcan perform. An abstract class can include methods that contain noimplementation. These are called abstract methods. The abstract methoddeclaration must then end with a semicolon rather than a block. If a class hasany abstract methods, whether declared or inherited, the entire class must bedeclared abstract. Abstract methods are used to provide a template for theclasses that inherit the abstract methods. Abstract classes cannot be instantiated; they must be subclassed,and actual implementations must be provided for the abstract methods. Anyimplementation specified can, of course, be overridden by additionalsubclasses. An object must have an implementation for all of its methods. Youneed to create a subclass that provides an implementation for the abstractmethod. A class abstract Vehicle might be specified as abstract torepresent the general abstraction of a vehicle, as creating instances of theclass would not be meaningful. abstract class Vehicle { int numofGears ; String color ; abstract boolean hasDiskBrake (); abstract int getNoofGears (); } Example of a shape class as an abstract class abstract class Shape { public String color ; public Shape () { } public void setColor ( String c ) { color = c ; } public String getColor () { return color ; } abstract public double area (); } We can also implement the generic shapes class as an abstractclass so that we can draw lines, circles, triangles etc. All shapes have somecommon fields and methods, but each can, of course, add more fields andmethods. The abstract class guarantees that each shape will have the same setof basic properties. We declare this class abstract because there is no suchthing as a generic shape. There can only be concrete shapes such as squares,circles, triangles etc. public class Point extends Shape { static int x , y ; public Point () { x = 0 ; y = 0 ; } public double area () { return 0 ; } public double perimeter () { return 0 ; } public static void print () { System . out . println ( \"point: \" + x + \",\" + y ); } public static void main ( String args []) { Point p = new Point (); p . print (); } } Output point: 0 , 0 Notice that, in order to create a Point object, its class cannotbe abstract. This means that all of the abstract methods of the Shape classmust be implemented by the Point class. The subclass must define an implementation for every abstractmethod of the abstract superclass, or the subclass itself will also beabstract. Similarly other shape objects can be created using the generic ShapeAbstract class. A big Disadvantage ofusing abstract classes is not able to use multiple inheritance. In the sense,when a class extends an abstract class, it can\u2019t extend any other class.","title":"Abstract Class in JAVA"},{"location":"java/Abstract%20and%20Interface/#java-interface","text":"In Java, this multiple inheritance problem is solved with apowerful construct called interfaces .Interface can be used to define a generic template and then one or moreabstract classes to define partial implementations of the interface. Interfacesjust specify the method declaration (implicitly public and abstract) and canonly contain fields (which are implicitly public static final). Interfacedefinition begins with a keyword interface. An interface like that of anabstract class cannot be instantiated. Multiple Inheritance is allowed when extending interfaces i.e. oneinterface can extend none, one or more interfaces. Java does not supportmultiple inheritance, but it allows you to extend one class and implement manyinterfaces. If a class that implements an interface does not define all themethods of the interface, then it must be declared abstract and the methoddefinitions must be provided by the subclass that extends the abstract class. Example 1 : Below is an example of a Shapeinterface interface Shape { public double area (); public double volume (); } Below is a Point class that implements theShape interface. public class Point implements Shape { static int x , y ; public Point () { x = 0 ; y = 0 ; } public double area () { return 0 ; } public double volume () { return 0 ; } public static void print () { System . out . println ( \"point: \" + x + \",\" + y ); } public static void main ( String args []) { Point p = new Point (); p . print (); } } Similarly, other shape objects can be created by interfaceprogramming by implementing generic Shape Interface. Example 2 : Belowis a java interfaces program showing the power of interface programming in java Listing below shows 2 interfaces and 4 classes one being an abstract class. Note : The method toString in class A1 is an overridden version of the method defined in the class named Object . The classes B1 and C1 satisfy the interface contract. But since the class** D1** does not define all the methods of the implemented interface I2 , the class D1 is declared abstract. Also, i1.methodI2() produces a compilation error as the method is not declared in I1 or any of its super interfaces if present. Hence a downcast of interface reference I1 solves the problem as shown in the program. The same problem applies to i1.methodA1(), which is again resolved by a downcast. When we invoke the toString() method which is a method of anObject, there does not seem to be any problem as every interface or classextends Object and any class can override the default toString() to suit yourapplication needs. ((C1)o1).methodI1() compiles successfully, but produces aClassCastException at runtime. This is because B1 does not have anyrelationship with C1 except they are \u201csiblings\u201d. You can\u2019t cast siblings intoone another. When a given interface method is invoked on a given reference, thebehavior that results will be appropriate to the class from which thatparticular object was instantiated. This is runtime polymorphism based oninterfaces and overridden methods. interface I1 { void methodI1 (); // public static by default } interface I2 extends I1 { void methodI2 (); // public static by default } class A1 { public String methodA1 () { String strA1 = \"I am in methodC1 of class A1\" ; return strA1 ; } public String toString () { return \"toString() method of class A1\" ; } } class B1 extends A1 implements I2 { public void methodI1 () { System . out . println ( \"I am in methodI1 of class B1\" ); } public void methodI2 () { System . out . println ( \"I am in methodI2 of class B1\" ); } } class C1 implements I2 { public void methodI1 () { System . out . println ( \"I am in methodI1 of class C1\" ); } public void methodI2 () { System . out . println ( \"I am in methodI2 of class C1\" ); } } // Note that the class is declared as abstract as it does not // satisfy the interface contract abstract class D1 implements I2 { public void methodI1 () { } // This class does not implement methodI2() hence declared abstract. } public class InterFaceEx { public static void main ( String [] args ) { I1 i1 = new B1 (); i1 . methodI1 (); // OK as methodI1 is present in B1 // i1.methodI2(); Compilation error as methodI2 not present in I1 // Casting to convert the type of the reference from type I1 to type I2 (( I2 ) i1 ). methodI2 (); I2 i2 = new B1 (); i2 . methodI1 (); // OK i2 . methodI2 (); // OK // Does not Compile as methodA1() not present in interface reference I1 // String var = i1.methodA1(); // Hence I1 requires a cast to invoke methodA1 String var2 = (( A1 ) i1 ). methodA1 (); System . out . println ( \"var2 : \" + var2 ); String var3 = (( B1 ) i1 ). methodA1 (); System . out . println ( \"var3 : \" + var3 ); String var4 = i1 . toString (); System . out . println ( \"var4 : \" + var4 ); String var5 = i2 . toString (); System . out . println ( \"var5 : \" + var5 ); I1 i3 = new C1 (); String var6 = i3 . toString (); System . out . println ( \"var6 : \" + var6 ); // It prints the Object toString() method Object o1 = new B1 (); // o1.methodI1(); does not compile as Object class does not define // methodI1() // To solve the probelm we need to downcast o1 reference. We can do it // in the following 4 ways (( I1 ) o1 ). methodI1 (); // 1 (( I2 ) o1 ). methodI1 (); // 2 (( B1 ) o1 ). methodI1 (); // 3 /* * * B1 does not have any relationship with C1 except they are \"siblings\". * * Well, you can't cast siblings into one another. * */ // ((C1)o1).methodI1(); Produces a ClassCastException } } Output I am in methodI1 of class B1 I am in methodI2 of class B1 I am in methodI1 of class B1 I am in methodI2 of class B1 var2 : I am in methodC1 of class A1 var3 : I am in methodC1 of class A1 var4 : toString() method of class A1 var5 : toString() method of class A1 var6 : C1@190d11 I am in methodI1 of class B1 I am in methodI1 of class B1 I am in methodI1 of class B1","title":"Java Interface"},{"location":"java/Abstract%20and%20Interface/#interface-vs-abstract-class","text":"Interface vs Abstract Class Abstract class is a class which contain one or more abstractmethods, which has to be implemented by sub classes. An abstract class cancontain no abstract methods also i.e. abstract class may contain concretemethods. A Java Interface can contain only method declarations and publicstatic final constants and doesn\u2019t contain their implementation. The classeswhich implement the Interface must provide the method definition for all themethods present. Abstract class definition begins with the keyword \u201cabstract\u201dkeyword followed by Class definition. An Interface definition begins with thekeyword \u201cinterface\u201d. Abstract classes are useful in a situation when some generalmethods should be implemented and specialization behavior should be implementedby subclasses. Interfaces are useful in a situation when all its propertiesneed to be implemented by subclasses All variables in an Interface are by default - public staticfinal while an abstract class can have instance variables. An interface is also used in situations when a class needs toextend an other class apart from the abstract class. In such situations its notpossible to have multiple inheritance of classes. An interface on the otherhand can be used when it is required to implement one or more interfaces.Abstract class does not support Multiple Inheritance whereas an Interfacesupports multiple Inheritance. An Interface can only have public members whereas an abstractclass can contain private as well as protected members. A class implementing an interface must implement all of themethods defined in the interface, while a class extending an abstract class neednot implement any of the methods defined in the abstract class. The problem with an interface is, if you want to add a newfeature (method) in its contract, then you MUST implement those method in allof the classes which implement that interface. However, in the case of anabstract class, the method can be simply implemented in the abstract class andthe same can be called by its subclass Interfaces are slow as it requires extra indirection to to findcorresponding method in in the actual class. Abstract classes are fast Interfaces are often used to describe the peripheral abilities of a class, and not its central identity, E.g. an Automobile class might implement the Recyclable interface, which could apply to many otherwise totally unrelated objects. Note: There is no difference between a fully abstract class (all methods declared as abstract and all fields are public static final) and an interface. Note: If the various objects are all of-a-kind, and share a common state and behavior, then tend towards a common base class. If all they share is a set of method signatures, then tend towards an interface.","title":"Interface vs Abstract Class"},{"location":"java/Complete/","text":"Core Java Course Content Link Course Overview Java is one of the world's most important and widely used computer languages, and it has held this distinction for many years. Unlike some other computer languages whose influence has weared with passage of time, while Java's has grown. Course Outline INTRODUCTION OF JAVA - WHAT IS JAVA? - FEATURES OF JAVA - A FIRST JAVA PROGRAM - COMPILER AND INTERPRETER - THE JDK DIRECTORY STRUCTURE NAMING CONVENTION, DATA TYPES AND VARIABLES - PRIMITIVE DATATYPES, DECLARATIONS - VARIABLE NAMES, NAMING CONVENTION - NUMERIC LITERALS, CHARACTER LITERALS - STRING LITERALS - ARRAYS, NON-PRIMITIVE DATATYPES, THE DOT OPERATOR OPERATORS AND EXPRESSIONS - EXPRESSIONS - ASSIGNMENT OPERATOR - ARITHMETIC OPERATORS - RELATIONAL OPERATORS - LOGICAL OPERATORS - INCREMENT AND DECREMENT OPERATORS - ADDITIONAL ASSIGNMENT OPERATORS (+=, ETC.) - THE CONDITIONAL OPERATOR - IMPLICIT TYPE CONVERSIONS CONTROL FLOW STATEMENTS - STATEMENTS - CONDITIONAL (IF) STATEMENTS - DATA TYPES AND VARIABLES - LADDER IF-ELSE - CONDITIONAL (SWITCH) STATEMENTS - WHILE AND DO-WHILE LOOP - FOR LOOP - A FOR LOOP DIAGRAM - FOR-EACH LOOP - THE CONTINUE STATEMENT - THE BREAK STATEMENT ARRAYS - INTRODUCTION OF ARRAYS - TYPES OF ARRAYS - OPERATION WITH ARRAYS OBJECT-ORIENTED PROGRAMMING - INTRODUCTION TO OBJECT-ORIENTED PROGRAMMING - CLASSES AND OBJECTS - FIELDS AND METHODS - ENCAPSULATION - ABSTRACTION - INHERITANCE - POLYMORPHISM OBJECTS AND CLASSES - DEFINING A CLASS - CREATING AN OBJECT - INSTANCE VARIABLES AND CLASS VARIABLES - METHODS - CONSTRUCTORS - ACCESS MODIFIERS JAVA CLASSES - OBJECT CLASS - STRING CLASS - STRINGBUILDER AND STRINGBUFFER - OTHER BUILT-IN CLASSES DATABASE CONNECTIVITY - OVERVIEW OF DATABASE - WORKING WITH MYSQL DATABSE - RESITERING THE DRIVER - CONNECTING TO DATABASE - DATA STORING AND RETRIEVING KEYWORD AND PACKAGES - STATIC, FINAL etc. - STATIC IMPORTS - INTRODUCTION TO PACKAGES - DEFINING PACKAGES - PACKAGE SCOPE EXCEPTION HANDLING - EXCEPTIONS OVERVIEW - CATCHING EXCEPTIONS - THE FINALLY BLOCK - DECLARING EXCEPTIONS - DEFINING AND THROWING EXCEPTIONS - ERRORS AND RUNTIME EXCEPTIONS INPUT/OUTPUT STREAMS - OVERVIEW OF STREAMS - BYTES VS. CHARACTERS - BINARY INPUT AND OUTPUT - PRINTWRITER CLASS - READING AND WRITING OBJECTS INHERITANCE IN JAVA - INHERITANCE IN JAVA - TYPES OF INHERITANCE - METHOD OVERRIDING - THIS AND SUPER KEYWORDS - AGGREGATION AND COMPOSITION INTERFACES AND ABSTRACT CLASSES - INTRODUCTION TO INTERFACE - HOW TO IMPLEMENTS INTERFACE - MULTIPLE INHERITANCE USING INTERFACE - ABSTRACT CLASSES - ABSTRACT CLASS Vs. INTERFACE COLLECTION FRAMEWORK - THE COLLECTIONS FRAMEWORK - THE SET INTERFACE - SET IMPLEMENTATION CLASSES - THE LIST INTERFACE - LIST IMPLEMENTATION CLASSES - THE MAP INTERFACE - MAP IMPLEMENTATION CLASSES INTRODUCTION TO THREADS - NON-THREADED APPLICATIONS - THREADED APPLICATIONS - CREATING THREADS - THREAD STATES - RUNNABLE THREADS - COORDINATING THREADS - INTERRUPTING THREADS - RUNNABLE INTERFACE, THREADGROUPS NETWORKING IN JAVA - INTRODUCTION TO SOCKET PROGRAMMING - CHAT SERVER - INNER CLASSES - LOCAL CLASSES - ANONYMOUS CLASSES - INSTANCE INITIALIZERS - STATIC NESTED CLASSES WRAPPER CLASSES - INTRODUCTION TO WRAPPER CLASSES - USE OF WRAPPER CLASSES ANNOTATIONS - USES FOR META-DATA - THE ANNOTATIONS MODEL - ANNOTATION TYPES AND ANNOTATIONS - BUILT-IN ANNOTATIONS - ANNOTATIONS VS. DESCRIPTORS (XML) GRAPHIC PROGRAMMING USING SWING - JAVA FOUNDATION CLASSES - CREATING A FRAME IN STRING - CREATING COMPNENTS IS SWING - SETTING LOOK AND FEEL OF SWING - HANDLING EVENTS","title":"Core Java Course Content"},{"location":"java/Complete/#core-java-course-content","text":"Course Overview Java is one of the world's most important and widely used computer languages, and it has held this distinction for many years. Unlike some other computer languages whose influence has weared with passage of time, while Java's has grown. Course Outline INTRODUCTION OF JAVA - WHAT IS JAVA? - FEATURES OF JAVA - A FIRST JAVA PROGRAM - COMPILER AND INTERPRETER - THE JDK DIRECTORY STRUCTURE NAMING CONVENTION, DATA TYPES AND VARIABLES - PRIMITIVE DATATYPES, DECLARATIONS - VARIABLE NAMES, NAMING CONVENTION - NUMERIC LITERALS, CHARACTER LITERALS - STRING LITERALS - ARRAYS, NON-PRIMITIVE DATATYPES, THE DOT OPERATOR OPERATORS AND EXPRESSIONS - EXPRESSIONS - ASSIGNMENT OPERATOR - ARITHMETIC OPERATORS - RELATIONAL OPERATORS - LOGICAL OPERATORS - INCREMENT AND DECREMENT OPERATORS - ADDITIONAL ASSIGNMENT OPERATORS (+=, ETC.) - THE CONDITIONAL OPERATOR - IMPLICIT TYPE CONVERSIONS CONTROL FLOW STATEMENTS - STATEMENTS - CONDITIONAL (IF) STATEMENTS - DATA TYPES AND VARIABLES - LADDER IF-ELSE - CONDITIONAL (SWITCH) STATEMENTS - WHILE AND DO-WHILE LOOP - FOR LOOP - A FOR LOOP DIAGRAM - FOR-EACH LOOP - THE CONTINUE STATEMENT - THE BREAK STATEMENT ARRAYS - INTRODUCTION OF ARRAYS - TYPES OF ARRAYS - OPERATION WITH ARRAYS OBJECT-ORIENTED PROGRAMMING - INTRODUCTION TO OBJECT-ORIENTED PROGRAMMING - CLASSES AND OBJECTS - FIELDS AND METHODS - ENCAPSULATION - ABSTRACTION - INHERITANCE - POLYMORPHISM OBJECTS AND CLASSES - DEFINING A CLASS - CREATING AN OBJECT - INSTANCE VARIABLES AND CLASS VARIABLES - METHODS - CONSTRUCTORS - ACCESS MODIFIERS JAVA CLASSES - OBJECT CLASS - STRING CLASS - STRINGBUILDER AND STRINGBUFFER - OTHER BUILT-IN CLASSES DATABASE CONNECTIVITY - OVERVIEW OF DATABASE - WORKING WITH MYSQL DATABSE - RESITERING THE DRIVER - CONNECTING TO DATABASE - DATA STORING AND RETRIEVING KEYWORD AND PACKAGES - STATIC, FINAL etc. - STATIC IMPORTS - INTRODUCTION TO PACKAGES - DEFINING PACKAGES - PACKAGE SCOPE EXCEPTION HANDLING - EXCEPTIONS OVERVIEW - CATCHING EXCEPTIONS - THE FINALLY BLOCK - DECLARING EXCEPTIONS - DEFINING AND THROWING EXCEPTIONS - ERRORS AND RUNTIME EXCEPTIONS INPUT/OUTPUT STREAMS - OVERVIEW OF STREAMS - BYTES VS. CHARACTERS - BINARY INPUT AND OUTPUT - PRINTWRITER CLASS - READING AND WRITING OBJECTS INHERITANCE IN JAVA - INHERITANCE IN JAVA - TYPES OF INHERITANCE - METHOD OVERRIDING - THIS AND SUPER KEYWORDS - AGGREGATION AND COMPOSITION INTERFACES AND ABSTRACT CLASSES - INTRODUCTION TO INTERFACE - HOW TO IMPLEMENTS INTERFACE - MULTIPLE INHERITANCE USING INTERFACE - ABSTRACT CLASSES - ABSTRACT CLASS Vs. INTERFACE COLLECTION FRAMEWORK - THE COLLECTIONS FRAMEWORK - THE SET INTERFACE - SET IMPLEMENTATION CLASSES - THE LIST INTERFACE - LIST IMPLEMENTATION CLASSES - THE MAP INTERFACE - MAP IMPLEMENTATION CLASSES INTRODUCTION TO THREADS - NON-THREADED APPLICATIONS - THREADED APPLICATIONS - CREATING THREADS - THREAD STATES - RUNNABLE THREADS - COORDINATING THREADS - INTERRUPTING THREADS - RUNNABLE INTERFACE, THREADGROUPS NETWORKING IN JAVA - INTRODUCTION TO SOCKET PROGRAMMING - CHAT SERVER - INNER CLASSES - LOCAL CLASSES - ANONYMOUS CLASSES - INSTANCE INITIALIZERS - STATIC NESTED CLASSES WRAPPER CLASSES - INTRODUCTION TO WRAPPER CLASSES - USE OF WRAPPER CLASSES ANNOTATIONS - USES FOR META-DATA - THE ANNOTATIONS MODEL - ANNOTATION TYPES AND ANNOTATIONS - BUILT-IN ANNOTATIONS - ANNOTATIONS VS. DESCRIPTORS (XML) GRAPHIC PROGRAMMING USING SWING - JAVA FOUNDATION CLASSES - CREATING A FRAME IN STRING - CREATING COMPNENTS IS SWING - SETTING LOOK AND FEEL OF SWING - HANDLING EVENTS","title":"Core Java Course Content"},{"location":"java/Java%20Notes/","text":"Modifiers Link Access modifiers Non-Access Modifiers Abstract methods and Classes Final Variables and Methods, FinalClasses, Finalize Methods Static Members Java provides a number of access modifiers to set access levels for classes, variables, methods, and constructors. Access Modifiers are used at 2 access levels in Java. 1. ****Top-level for Classes & Interfaces a. Default Visible to the same package only. not accessiblein other packages or sub packages**** do not explicitly declare**** b. Public Visible to the world**** 2. ****Member-level for Classes & Interfaces a. Public Visible to the world**** b. Protected Visible to the package and all subclasses of itsclass in any package where this class is visible. c. Default Visible to the same package only. not accessiblein other packages or sub packages**** do not explicitly declare**** d. Private Visible to the class only 3. ****Non-Access Modifiers a. Static Members Static members are the members with Statickeyword in their declarations. Class variables are called as Static variables.These members belong to the class not to the object i.e. they are notinstantiated when the class instance is created. The values of these variables are not part ofthe object state. The static variables are initialized to theirdefault values (if explicit initialization is not specified) at the time ofclass loading. The Static methods are called as classmethods . A static method can directly access other static members in theclass. It cannot access instance (non-static) members of the class. But it canalways use a reference of the class type to access its members both static andnon-static. b. Final Member Final variable is a constant; its value cannotbe changed after its initialization. This applies to instance, static and localvariables including parameters that are declared as final. A final variable of primitive data type cannotchange its value once it has been initialized. A final variable of a referencetype cannot change its reference value once it has been initialized, but thestate of the object it denotes can still be changed. Note Variables defined in Interfaces are implicitlyFinal. Final variables must be initialized before it isused. Final methods in a class are complete i.e. thesemethods have implementations and hence cannot be overridden in the subclasses. c. Abstract If method has a keyword abstract in itsdeclaration, then such method/function is called Abstract method. Abstractmethods do not have an implementation i.e. method body is not defined; onlymethod prototype is specified in the class definition. Note: Only instance methods can be declared asabstract. Since Static methods cannot be overriddendeclaring abstract static method would of no use. A Final method cannot be abstract and viceversa. Methods specified in an Interface are implicitlyabstract. Class: **Contains abstract methods. Cannotbe instantiated** **Interface: **All interfaces are implicitlyabstract. The modifier is optional. Method : Method without a body. Signatureis followed by a semicolon. The class must also be abstract. d. Synchronized Methods: Multiple threads can be executing in a programand at times they might try to execute several methods on the same objectsimultaneously. - If there is a requirement that only one threadat a time should execute a method in the object, then such methods can bedeclared as Synchronized. Their execution will be mutually exclusive among allthreads. At any given time, at the most one thread will be executing a Synchronizedmethod on an object. Note Synchronized methods are also applicable toStatic methods of a class. e. Native Methods Native Methods are also called as Foreignmethods. Such methods implementation is not defined in Java but in anotherprogramming language. These methods are specified in the class asmethod prototypes with prefix with keyword native, no method body is defined inthe Java class. f. Transient Fields Objects can be stored using serialization.Serialization transforms objects into an output format which is helpful forstoring objects. Objects can later be retrieved in the same state as when theywere serialized, meaning that fields included in the serialization will havethe same values at the time of serialization. Such objects are said to bePersistent. The fields are declared with keyword Transientin their class declaration if its value should not be saved when objects of theclass are written to persistent storage. g. Volatile Fields During execution, complied code might cache thevalues of fields for efficiency reasons. And as multiple threads will accessthe same field, caching is not allowed to cause inconsistencies when readingand writing the value in the field. The Volatile modifier can be used to inform thecompiler that it should not attempt to perform optimizations on the field whichcould cause unpredicted results when the field is accessed by multiple threads Accessibility Modifiers for Nested Classes &Interfaces h. Nested Interfaces Access modifiers can be used in Nestedinterfaces. An interface declared within another class or interface is called aNested interface. A top-level interface is the one which is not nested. Only one type of nested interface is availablein Java based on declarative context, Static member interface. These are interfacesdefined with keyword Static inside the top-level interface or class or inanother Static member class or interface. It can be instantiated like a normaltop-level interface or class, no enclosing instance is required for thisinterface instantiation. i. Nested Classes Access modifiers are also used in Nestedclasses. A class declared within another class is called a Nested class. Atop-level class is the one which is not nested. They are 2 categories of Nested classes based onthe declarative context. They are Static member classes Inner classes a. Inner classes are defined in 3 differentcategories. They are b. Non-static member classes c. Local classes d. Anonymous classes j. Static member classes Classes which are defined with Static modifierinside the top-level class or other Static member class are called Staticmember classes. It can be instantiated like a normal top-level class; noenclosing instance is required for this class instantiation. All the 4 accessibility modifiers i.e. Public,Protected, Package & Private are applicable to Static member classes\u2019declaration. k. Non-Static member classes Classes which are defined without Staticmodifier inside another class are called non-static member classes. An instanceof a non-static member class always has an enclosing instance associated withit. The accessibility modifiers i.e. Public,Protected, Package & Private,abstract, final are applicable to Non-Staticmember classes\u2019 declaration. l. Local classes These classes are defined in the context of ablock as in a body of the method or normal local block, just as local variablesdefined in a method body or local block. An instance of a local class has anenclosing instance associated with it, if it is declared in non-static context. No accessibility modifiers are applicable forLocal classes. m. Anonymous classes These are defined as expressions andinstantiated on the fly. An instance of anonymous class has an enclosinginstance associated with it, if it is declared in non-static context. No accessibility modifiers are applicable forAnonymous classes. Note A Nested Class or Interface cannot have the samename as any of the enclosing classes or interfaces.","title":"Modifiers"},{"location":"java/Java%20Notes/#modifiers","text":"Access modifiers Non-Access Modifiers Abstract methods and Classes Final Variables and Methods, FinalClasses, Finalize Methods Static Members Java provides a number of access modifiers to set access levels for classes, variables, methods, and constructors. Access Modifiers are used at 2 access levels in Java. 1. ****Top-level for Classes & Interfaces a. Default Visible to the same package only. not accessiblein other packages or sub packages**** do not explicitly declare**** b. Public Visible to the world**** 2. ****Member-level for Classes & Interfaces a. Public Visible to the world**** b. Protected Visible to the package and all subclasses of itsclass in any package where this class is visible. c. Default Visible to the same package only. not accessiblein other packages or sub packages**** do not explicitly declare**** d. Private Visible to the class only 3. ****Non-Access Modifiers a. Static Members Static members are the members with Statickeyword in their declarations. Class variables are called as Static variables.These members belong to the class not to the object i.e. they are notinstantiated when the class instance is created. The values of these variables are not part ofthe object state. The static variables are initialized to theirdefault values (if explicit initialization is not specified) at the time ofclass loading. The Static methods are called as classmethods . A static method can directly access other static members in theclass. It cannot access instance (non-static) members of the class. But it canalways use a reference of the class type to access its members both static andnon-static. b. Final Member Final variable is a constant; its value cannotbe changed after its initialization. This applies to instance, static and localvariables including parameters that are declared as final. A final variable of primitive data type cannotchange its value once it has been initialized. A final variable of a referencetype cannot change its reference value once it has been initialized, but thestate of the object it denotes can still be changed. Note Variables defined in Interfaces are implicitlyFinal. Final variables must be initialized before it isused. Final methods in a class are complete i.e. thesemethods have implementations and hence cannot be overridden in the subclasses. c. Abstract If method has a keyword abstract in itsdeclaration, then such method/function is called Abstract method. Abstractmethods do not have an implementation i.e. method body is not defined; onlymethod prototype is specified in the class definition. Note: Only instance methods can be declared asabstract. Since Static methods cannot be overriddendeclaring abstract static method would of no use. A Final method cannot be abstract and viceversa. Methods specified in an Interface are implicitlyabstract. Class: **Contains abstract methods. Cannotbe instantiated** **Interface: **All interfaces are implicitlyabstract. The modifier is optional. Method : Method without a body. Signatureis followed by a semicolon. The class must also be abstract. d. Synchronized Methods: Multiple threads can be executing in a programand at times they might try to execute several methods on the same objectsimultaneously. - If there is a requirement that only one threadat a time should execute a method in the object, then such methods can bedeclared as Synchronized. Their execution will be mutually exclusive among allthreads. At any given time, at the most one thread will be executing a Synchronizedmethod on an object. Note Synchronized methods are also applicable toStatic methods of a class. e. Native Methods Native Methods are also called as Foreignmethods. Such methods implementation is not defined in Java but in anotherprogramming language. These methods are specified in the class asmethod prototypes with prefix with keyword native, no method body is defined inthe Java class. f. Transient Fields Objects can be stored using serialization.Serialization transforms objects into an output format which is helpful forstoring objects. Objects can later be retrieved in the same state as when theywere serialized, meaning that fields included in the serialization will havethe same values at the time of serialization. Such objects are said to bePersistent. The fields are declared with keyword Transientin their class declaration if its value should not be saved when objects of theclass are written to persistent storage. g. Volatile Fields During execution, complied code might cache thevalues of fields for efficiency reasons. And as multiple threads will accessthe same field, caching is not allowed to cause inconsistencies when readingand writing the value in the field. The Volatile modifier can be used to inform thecompiler that it should not attempt to perform optimizations on the field whichcould cause unpredicted results when the field is accessed by multiple threads Accessibility Modifiers for Nested Classes &Interfaces h. Nested Interfaces Access modifiers can be used in Nestedinterfaces. An interface declared within another class or interface is called aNested interface. A top-level interface is the one which is not nested. Only one type of nested interface is availablein Java based on declarative context, Static member interface. These are interfacesdefined with keyword Static inside the top-level interface or class or inanother Static member class or interface. It can be instantiated like a normaltop-level interface or class, no enclosing instance is required for thisinterface instantiation. i. Nested Classes Access modifiers are also used in Nestedclasses. A class declared within another class is called a Nested class. Atop-level class is the one which is not nested. They are 2 categories of Nested classes based onthe declarative context. They are Static member classes Inner classes a. Inner classes are defined in 3 differentcategories. They are b. Non-static member classes c. Local classes d. Anonymous classes j. Static member classes Classes which are defined with Static modifierinside the top-level class or other Static member class are called Staticmember classes. It can be instantiated like a normal top-level class; noenclosing instance is required for this class instantiation. All the 4 accessibility modifiers i.e. Public,Protected, Package & Private are applicable to Static member classes\u2019declaration. k. Non-Static member classes Classes which are defined without Staticmodifier inside another class are called non-static member classes. An instanceof a non-static member class always has an enclosing instance associated withit. The accessibility modifiers i.e. Public,Protected, Package & Private,abstract, final are applicable to Non-Staticmember classes\u2019 declaration. l. Local classes These classes are defined in the context of ablock as in a body of the method or normal local block, just as local variablesdefined in a method body or local block. An instance of a local class has anenclosing instance associated with it, if it is declared in non-static context. No accessibility modifiers are applicable forLocal classes. m. Anonymous classes These are defined as expressions andinstantiated on the fly. An instance of anonymous class has an enclosinginstance associated with it, if it is declared in non-static context. No accessibility modifiers are applicable forAnonymous classes. Note A Nested Class or Interface cannot have the samename as any of the enclosing classes or interfaces.","title":"Modifiers"},{"location":"java/Paper/","text":"2010 Link Unit-I Link Describe Following a. What are features of object oriented technology? How java is betterthan C++. b. What is the use of JVM? What is type casting? Describe Following a. What is logical statements of Java? Write a program showing the use oflogical statement. b. What is an array? Maintain their types. Write a program in Java to addtwo matrices. Unit-II Link Solve following a. What is a class and an object? How they are derived? Give example b. Define a constructor and class constructor. What is dynamic memory allocation Solve Following a. How methods and a package are useful? What is AWT class. b. What is an abstract method? How is class is and extended. Unit-III Link Solve following a. Define an interface. Describe various forms of implementing a class. b. Write a program to print factorial of a number. Define a recursivefunction. Explain the following a. Describe i. New operator ii. Bitwise operator iii. Copy constructor b. What is a stack and queue? Write a program to show nesting of loops? Unit-IV Link Solve Following a. Define a thread how they are created? Define thread priority. b. What is multithreading? Explain the life cycle of an applet. Solve following a. What is synchronization? Write a note on scripting language. b. What us try and catch block> How exception handling is useful? Unit-V Link \\9. Solve Following a) Differentiate an application and an applet. What is applet. b) What is Java Servlet. Write short note on life cycle of an applet. \\10. Solve Following a) How parameters are passed to an applet. What is applet tag. b) Define HTML tags. How HTML programs are useful for designing websites.Give example 2011 Link Unit-I Link Solve following a. What is the need of looping? Explain entry and control and exitcontrol loop in java. b. Write a java program to create a thread that display add numberstarting from 1 and end with 100. Solve Following a. What do you understand by type casting in java? Explain all arithmeticoperation in java. b. What are feature of object oriented technology? Explain \u201cWrite onceand run anywhere\u201d nature of java. Unit-II Link Solve following a. What are difference between overloading and overriding? Explain withsuitable example. b. What is constructor and copy constructor? Solve following a. What is class and object? Describe passing parameter o the method withsuitable example. b. What is runnable interface? Explain with a suitable example Unit-III Link Solve Following a. How method and packages are useful? Explain accessing interfacevariable. b. What is an array? Explain vector and how is it differ from an array. Solve Following a. What is wrapper classes? Explain various from of implementation of aclass. b. What do you mean by hiding classes? Unit-IV Link Solve Following a. Define a thread. How they are created? Explain thread method. b. What is synchronization? When do we use it? Solve Following a. Explain life cycle of a thread. How can be define stopping andblocking thread. b. What is an exceptional handling? Explain try catch within javaexception. Unit-V Link Solve Following a. What is an applet? How do applet differ from application program? b. Explain life cycle at applet? how create an executable applet. Solve Following Following Define HTML tags for the applet. Explainremote applet. (b) What do you understand by passing parameter to applet?example with suitable example. 2012 Link Unit -I Link Solve Following a. Explain data type of variables used in java. Discuss type casting withexample. b. Write java a program to check whether a number is prime or not. Solve Following a. Differentiate c++ and java with examples. b. Write a java program to find factorial of a number. Unit-II Link Solve Following a. What do you understand by the inheritance? Explain final class andfinalize methods. b. Explain method overloading with an example. write short notes on: a. conductors b. method overloading c. visibility control Unit \u2013III Link Solve Following a. Write a program to get average of 10 number by using array. b. What do you understand by interface? How will you implement aninterface? Solve Following a. How will you add a class to a package? Explain your answer withexample? b. What do you understand by system package? How will you use them? Unit-IV Link write short notes on: a. extending the thread class b. thread priority c. synchronization Solve following a. Explain life cycle of a thread. b. What are thread exceptions? Explain with example. Unit-V Link Solve following a. Explain architecture of a web page. How will you add an applet to htmlfile? Explain tag with example. b. Differentiate local n remote applets with example. Solve Following a. Explain life cycle of an applet. b. How will you pass parameters to applets? Explain input from the enduser, by example. 2013 Link Unit-I Link Solve Following a. What is the need of looping? Explainentry and exit control loop in java. b. Write a java program to create a threadthat display odd number starting from 1 and with 100. Solve Following a. What do you understand by type casting injava? Explain all arithmetic operation in java. b. What features are of object orientedtechnology? Explain \u201cwrite once and run anywhere\u201d nature of java. Unit-II Link Solve following a. What are difference btw overloading andoverriding. Explain with suitable example. b. What is constructor and copy constructor? Solve Following a. What is class and object? Describe passing parameter to the methodswith suitable example. b. What is runnable interface? Explain withsuitable example? Unit-III Link Solve Following a. How methods and package are useful? Explain accessing interfacevariable. b. What is an array? Explain vector and how it is different from array. What is wrapper classes? Explain variable forms of implementation of aclass. Unit-IV Link Solve Following a. Define a thread. How they are created? Explain thread method. b. What is synchronization? When do we use it? Solve Following a. Explain life cycle of thread. How can be define stopping and blockinga thread. b. What is an exceptional handling? Explaintry catch within java exception. Unit-V Link Solve Following a. What is an applet? How do applet differfrom application programs? b. Explain life cycle at applet? How creates an executable applet. Solve Following a. What do you understand by passing parameter to applet? Explain withsuitable example. b. Define html tags for the applet. explain remote applet 2014 Link Unit-I Link Solve Following a. What is the need of command line argument injava? Justify your answer with the suitable examples. b. Java is more secure language compare to c and C++. Justify your answerwith a suitable example. Solve Following a. Java is architecture neutral language. Justify your answer. b. What is garbage collection? How is it useful in java programming? Unit-II Link Solve Following a. How to implement the run time polymorphism in java? Explain theconcept with the suitable java program. b. Differentiate between the super and this keyword with the suitableJAVA program. Solve Following a. Explain the different access modifier of java language with thesuitable examples. b. What is a constructor overloading? Explain the need of constructoroverloading in java with java program. Unit-III Link Solve Following a. What is wrapper class? Write down the application of wrapper classwith the java program. b. What is the need of an interface? Describe the various form ofimplementing interface. Give example of java for each case. Explain the following: a. String class and its methods. b. Hiding a class from package. c. Procedure for designing a user defined package. Unit-IV Link Explain how exception-handling mechanism can be used in a javaprogram? Also, differentiate the throw and throws keyword in java with thesuitable examples. Explain the multithreading. Write a program in java. a. To print the name, priority and thread group of the thread. b. To set the priority of a thread. Unit-V Link How to part the parameter in an applet? Write a Java program to set the background and foreground Color and set the font of a text randomly on an applet window. How applet do differ from application program? Develop an applet that receive three numeric values of input from the user and then display the largest of three on the screen. Write a HTML page ant test the applet. Others Link Frequently Asked Questions - Java Can a main() method of class be invoked in another class? What is the difference between java command line arguments and C command line arguments? What is the difference between == & .equals What is the difference between abstract class & Interface. What is singleton class & it's implementation. Use of static,final variable Examples of final class Difference between Event propagation & Event delegation Difference between Unicast & Multicast model What is a java bean What is synchronized keyword used for. What are the restrictions of an applet & how to make the applet access the local machines resources. What is reflect package used for & the methods of it. What is serialization used for Can methods be overloaded based on the return types ? Why do we need a finalze() method when Garbage Collection is there ? Difference between AWT and Swing compenents ? Is there any heavy weight component in Swings ? Can the Swing application if you upload in net, be compatible with your browser? What should you do get your browser compatible with swing components? What are the methods in Applet ? When is init(),start() called ? When you navigate from one applet to another what are the methods called? What is the difference between Trusted and Untrusted Applet ? What is Exception ? What are the ways you can handle exception ? When is try,catch block used ? What is finally method in Exceptions ? What are the types of access modifiers ? What is protected and friendly ? What are the other modifiers ? Is synchronised modifier ? What is meant by polymorphism ? What is inheritance ? What is method Overloading ? What is this in OOPS ? What is method Overriding ? What is it in OOPS ? Does java support multi dimensional arrays ? Is multiple inheritance used in Java ? How do you send a message to the browser in JavaScript ? Does javascript support multidimensional arrays ? Is there any tool in java that can create reports ? What is meant by Java ? What is meant by a class ? What is meant by a method ? What are the OOPS concepts in Java ? What is meant by encapsulation ? Explain with an example What is meant by inheritance ? Explain with an example What is meant by polymorphism ? Explain with an example Is multiple inheritance allowed in Java ? Why ? What is meant by Java interpreter ? What is meant by JVM ? What is a compilation unit ? What is meant by identifiers ? What are the different types of modifiers ? What are the access modifiers in Java ? What are the primitive data types in Java ? What is meant by a wrapper class ? What is meant by static variable and static method ? What is meant by Garbage collection ? What is meant by abstract class What is meant by final class, methods and variables ? What is meant by interface ? What is meant by a resource leak ? What is the difference between interface and abstract class ? What is the difference between public private, protected and static What is meant by method overloading ? What is meant by method overriding ? What is singleton class ? What is the difference between an array and a vector ? What is meant by constructor ? What is meant by casting ? What is the difference between final, finally and finalize ? What is meant by packages ? What are all the packages ? Name 2 calsses you have used ? Name 2 classes that can store arbitrary number of objects ? What is the difference between java.applet.* and java.applet.Applet ? What is a default package ? What is meant by a super class and how can you call a super class ? What is anonymous class ? Name interfaces without a method ? What is the use of an interface ? What is a serializable interface ? How to prevent field from serialization ? What is meant by exception ? How can you avoid the runtime exception ? What is the difference between throw and throws ? What is the use of finally ? Can multiple catch statements be used in exceptions ? Is it possible to write a try within a try statement ? What is the method to find if the object exited or not ? What is meant by a Thread ? What is meant by multi-threading ? What is the 2 way of creating a thread ? Which is the best way and why? What is the method to find if a thread is active or not ? What are the thread-to-thread communcation ? What is the difference between sleep and suspend ? Can thread become a member of another thread ? What is meant by deadlock ? How can you avoid a deadlock ? What are the three typs of priority ? What is the use of synchronizations ? Garbage collector thread belongs to which priority ? What is meant by time-slicing ? What is the use of 'this' ? How can you find the length and capacity of a string buffer ? How to compare two strings ? What are the interfaces defined by Java.lang ? What is the purpose of run-time class and system class What is meant by Stream and Types ? What is the method used to clear the buffer ? What is meant by Stream Tokenizer ? What is serialization and de-serialisation ? What is meant by Applet ? How to find the host from which the Applet has originated ? What is the life cycle of an Applet ? How do you load an HTML page from an Applet ? What is meant by Applet Stub Interface ? What is meant by getCodeBase and getDocumentBase method ? How can you call an applet from a HTML file What is meant by Applet Flickering ? What is the use of parameter tag ? What is audio clip Interface and what are all the methods in it ? What is the difference between getAppletInfo and getParameterInfo ? How to communicate between applet and an applet ? What is meant by event handling ? What are all the listeners in java and explain ? What is meant by an adapter class ? What are the types of mouse event listeners ? What are the types of methods in mouse listeners ? What is the difference between panel and frame ? What is the default layout of the panel and frame ? What is meant by controls and types ? What is the difference between a scroll bar and a scroll panel. What is the difference between list and choice ? How to place a component on Windows ? What are the different types of Layouts ? What is meant by CardLayout ? What is the difference between GridLayout and GridBagLayout What is the difference between menuitem and checkboxmenu item. What is meant by vector class, dictionary class , hash table class,and property class ? Which class has no duplicate elements ? What is resource bundle ? What is an enumeration class ? What is meant by Swing ? What is the difference between AWT and Swing ? What is the difference between an applet and a Japplet What are all the components used in Swing ? What is meant by tab pans ? What is the use of JTree ? How can you add and remove nodes in Jtree. What is the method to expand and collapse nodes in a Jtree What is the use of JTable ? What is meant by JFC ? What is the class in Swing to change the appearance of the Frame in Runtime. How to reduce flicking in animation ? What is meant by Javabeans ? What is JAR file ? What is meant by manifest files ? What is Introspection ? What are the steps involved to create a bean ? Say any two properties in Beans ? What is persistence ? What is the use of beaninfo ? What are the interfaces you used in Beans ? What are the classes you used in Beans ? What is the diffrence between an Abstract class and Interface What is user defined exception ? What do you know about the garbate collector ? What is the difference between C++ & Java ? How do you communicate in between Applets & Servlets ? What is the use of Servlets ? In an HTML form I have a Button which makes us to open another page in 15 seconds. How will do you that ? What is the difference between Process and Threads ? How will you initialize an Applet ? What is the order of method invocation in an Applet ? When is update method called ? How will you communicate between two Applets ? Have you ever used HashTable and Dictionary ? What are statements in JAVA ? What is JAR file ? What is JNI ? What is the base class for all swing components ? What is JFC ? What is Difference between AWT and Swing ? Considering notepad/IE or any other thing as process, What will Happen if you start notepad or IE 3 times? Where 3 processes are started or 3 threads are started ? How does thread synchronization occurs inside a monitor ? How will you call an Applet using a Java Script function ? Is there any tag in HTML to upload and download files ? Why do you Canvas ? How can you push data from an Applet to Servlet ? What are the benefits of Swing over AWT ? Where the CardLayout is used ? What is the Layout for ToolBar ? What is the difference between Grid and GridbagLayout ? How will you add panel to a Frame ? What is the corresponding Layout for Card in Swing ? What is light weight component ? What is bean ? Where it can be used ? What is difference in between Java Class and Bean ? What is the mapping mechanism used by Java to identify IDL language ? Diff between Application and Applet ? What is serializable Interface ? What is the difference between CGI and Servlet ? What is the use of Interface ? Why Java is not fully objective oriented ? Why does not support multiple Inheritance ? What it the root class for all Java classes ? What is polymorphism ? Suppose If we have variable ' I ' in run method, If I can create one or More thread each thread will occupy a separate copy or same variable will be shared ? What is Constructor and Virtual function? Can we call Virtual Funciton in a constructor ? Why we use OOPS concepts? What is its advantage ? What is the difference in between C++ and Java ? can u explain in detail? What is the exact difference in between Unicast and Multicast object ? Where we will use ? How do you sing an Applet ? In a Container there are 5 components. I want to display the all the components names, how will you do that one ? Why there are some null interface in java ? What does it mean ? Give me some null interfaces in JAVA ? Tell me the latest versions in JAVA related areas ? What is meant by class loader ? How many types are there? When will we use them ? What is meant by flickering ? What is meant by cookies ? Explain ? Problem faced in your earlier project How OOPS concept is achieved in Java Features for using Java How does Java 2.0 differ from Java 1.0 Public static void main - Explain What are command line arguments Explain about the three-tier model Difference between String & StringBuffer Wrapper class. Is String a Wrapper Class What are the restriction for static method Purpose of the file class Default modifier in Interface Difference between Interface & Abstract class Can abstract be declared as Final Can we declare variables inside a method as Final Variables What is the package concept and use of package How can a dead thread be started Difference between Applet & Application Life cycle of the Applet Can Applet have constructors Differeence between canvas class & graphics class Explain about Superclass & subclass What is AppletStub Explain Stream Tokenizer What is the difference between two types of threads Checked & Unchecked exception Use of throws exception What is finally in exception handling Vector class What will happen to the Exception object after exception handling Two types of multi-tasking Two ways to create the thread Synchronization I/O Filter Can applet in different page communicate with each other Why Java is not 100 % pure OOPS ? ( EcomServer ) When we will use an Interface and Abstract class ? How to communicate 2 threads each other ? Can a main() method of class be invoked in another class? What is the difference between java command line arguments and C command line arguments? What is the difference between == & .equals What is the difference between abstract class & Interface. What is singleton class & it's implementation. Use of static,final variable Examples of final class Difference between Event propagation & Event delegation Difference between Unicast & Multicast model What is a java bean What is synchronized keyword used for. What are the restrictions of an applet & how to make the applet access the local machines resources. What is reflect package used for & the methods of it. What is serialization used for Can methods be overloaded based on the return types ? Why do we need a finalze() method when Garbage Collection is there ? Difference between AWT and Swing compenents ? Is there any heavy weight component in Swings ? Can the Swing application if you upload in net, be compatible with your browser? What should you do get your browser compatible with swing components? What are the methods in Applet ? When is init(),start() called ? When you navigate from one applet to another what are the methods called? What is the difference between Trusted and Untrusted Applet ? What is Exception ? What are the ways you can handle exception ? When is try,catch block used ? What is finally method in Exceptions ? What are the types of access modifiers ? What is protected and friendly ? What are the other modifiers ? Is synchronised modifier ? What is meant by polymorphism ? What is inheritance ? What is method Overloading ? What is this in OOPS ? What is method Overriding ? What is it in OOPS ? Does java support multi dimensional arrays ? Is multiple inheritance used in Java ? How do you send a message to the browser in JavaScript ? Does javascript support multidimensional arrays ? Is there any tool in java that can create reports ? What is meant by Java ? What is meant by a class ? What is meant by a method ? What are the OOPS concepts in Java ? What is meant by encapsulation ? Explain with an example What is meant by inheritance ? Explain with an example What is meant by polymorphism ? Explain with an example Is multiple inheritance allowed in Java ? Why ? What is meant by Java interpreter ? What is meant by JVM ? What is a compilation unit ? What is meant by identifiers ? What are the different types of modifiers ? What are the access modifiers in Java ? What are the primitive data types in Java ? What is meant by a wrapper class ? What is meant by static variable and static method ? What is meant by Garbage collection ? What is meant by abstract class What is meant by final class, methods and variables ? What is meant by interface ? What is meant by a resource leak ? What is the difference between interface and abstract class ? What is the difference between public private, protected and static What is meant by method overloading ? What is meant by method overriding ? What is singleton class ? What is the difference between an array and a vector ? What is meant by constructor ? What is meant by casting ? What is the difference between final, finally and finalize ? What is meant by packages ? What are all the packages ? Name 2 calsses you have used ? Name 2 classes that can store arbitrary number of objects ? What is the difference between java.applet.* and java.applet.Applet ? What is a default package ? What is meant by a super class and how can you call a super class ? What is anonymous class ? Name interfaces without a method ? What is the use of an interface ? What is a serializable interface ? How to prevent field from serialization ? What is meant by exception ? How can you avoid the runtime exception ? What is the difference between throw and throws ? What is the use of finally ? Can multiple catch statements be used in exceptions ? Is it possible to write a try within a try statement ? What is the method to find if the object exited or not ? What is meant by a Thread ? What is meant by multi-threading ? What is the 2 way of creating a thread ? Which is the best way and why? What is the method to find if a thread is active or not ? What are the thread-to-thread communcation ? What is the difference between sleep and suspend ? Can thread become a member of another thread ? What is meant by deadlock ? How can you avoid a deadlock ? What are the three typs of priority ? What is the use of synchronizations ? Garbage collector thread belongs to which priority ? What is meant by time-slicing ? What is the use of 'this' ? How can you find the length and capacity of a string buffer ? How to compare two strings ? What are the interfaces defined by Java.lang ? What is the purpose of run-time class and system class What is meant by Stream and Types ? What is the method used to clear the buffer ? What is meant by Stream Tokenizer ? What is serialization and de-serialisation ? What is meant by Applet ? How to find the host from which the Applet has originated ? What is the life cycle of an Applet ? How do you load an HTML page from an Applet ? What is meant by Applet Stub Interface ? What is meant by getCodeBase and getDocumentBase method ? How can you call an applet from a HTML file","title":"2010"},{"location":"java/Paper/#2010","text":"","title":"2010"},{"location":"java/Paper/#unit-i","text":"Describe Following a. What are features of object oriented technology? How java is betterthan C++. b. What is the use of JVM? What is type casting? Describe Following a. What is logical statements of Java? Write a program showing the use oflogical statement. b. What is an array? Maintain their types. Write a program in Java to addtwo matrices.","title":"Unit-I"},{"location":"java/Paper/#unit-ii","text":"Solve following a. What is a class and an object? How they are derived? Give example b. Define a constructor and class constructor. What is dynamic memory allocation Solve Following a. How methods and a package are useful? What is AWT class. b. What is an abstract method? How is class is and extended.","title":"Unit-II"},{"location":"java/Paper/#unit-iii","text":"Solve following a. Define an interface. Describe various forms of implementing a class. b. Write a program to print factorial of a number. Define a recursivefunction. Explain the following a. Describe i. New operator ii. Bitwise operator iii. Copy constructor b. What is a stack and queue? Write a program to show nesting of loops?","title":"Unit-III"},{"location":"java/Paper/#unit-iv","text":"Solve Following a. Define a thread how they are created? Define thread priority. b. What is multithreading? Explain the life cycle of an applet. Solve following a. What is synchronization? Write a note on scripting language. b. What us try and catch block> How exception handling is useful?","title":"Unit-IV"},{"location":"java/Paper/#unit-v","text":"\\9. Solve Following a) Differentiate an application and an applet. What is applet. b) What is Java Servlet. Write short note on life cycle of an applet. \\10. Solve Following a) How parameters are passed to an applet. What is applet tag. b) Define HTML tags. How HTML programs are useful for designing websites.Give example","title":"Unit-V"},{"location":"java/Paper/#2011","text":"","title":"2011"},{"location":"java/Paper/#unit-i_1","text":"Solve following a. What is the need of looping? Explain entry and control and exitcontrol loop in java. b. Write a java program to create a thread that display add numberstarting from 1 and end with 100. Solve Following a. What do you understand by type casting in java? Explain all arithmeticoperation in java. b. What are feature of object oriented technology? Explain \u201cWrite onceand run anywhere\u201d nature of java.","title":"Unit-I"},{"location":"java/Paper/#unit-ii_1","text":"Solve following a. What are difference between overloading and overriding? Explain withsuitable example. b. What is constructor and copy constructor? Solve following a. What is class and object? Describe passing parameter o the method withsuitable example. b. What is runnable interface? Explain with a suitable example","title":"Unit-II"},{"location":"java/Paper/#unit-iii_1","text":"Solve Following a. How method and packages are useful? Explain accessing interfacevariable. b. What is an array? Explain vector and how is it differ from an array. Solve Following a. What is wrapper classes? Explain various from of implementation of aclass. b. What do you mean by hiding classes?","title":"Unit-III"},{"location":"java/Paper/#unit-iv_1","text":"Solve Following a. Define a thread. How they are created? Explain thread method. b. What is synchronization? When do we use it? Solve Following a. Explain life cycle of a thread. How can be define stopping andblocking thread. b. What is an exceptional handling? Explain try catch within javaexception.","title":"Unit-IV"},{"location":"java/Paper/#unit-v_1","text":"Solve Following a. What is an applet? How do applet differ from application program? b. Explain life cycle at applet? how create an executable applet. Solve Following Following Define HTML tags for the applet. Explainremote applet. (b) What do you understand by passing parameter to applet?example with suitable example.","title":"Unit-V"},{"location":"java/Paper/#2012","text":"","title":"2012"},{"location":"java/Paper/#unit-i_2","text":"Solve Following a. Explain data type of variables used in java. Discuss type casting withexample. b. Write java a program to check whether a number is prime or not. Solve Following a. Differentiate c++ and java with examples. b. Write a java program to find factorial of a number.","title":"Unit -I"},{"location":"java/Paper/#unit-ii_2","text":"Solve Following a. What do you understand by the inheritance? Explain final class andfinalize methods. b. Explain method overloading with an example. write short notes on: a. conductors b. method overloading c. visibility control","title":"Unit-II"},{"location":"java/Paper/#unit-iii_2","text":"Solve Following a. Write a program to get average of 10 number by using array. b. What do you understand by interface? How will you implement aninterface? Solve Following a. How will you add a class to a package? Explain your answer withexample? b. What do you understand by system package? How will you use them?","title":"Unit \u2013III"},{"location":"java/Paper/#unit-iv_2","text":"write short notes on: a. extending the thread class b. thread priority c. synchronization Solve following a. Explain life cycle of a thread. b. What are thread exceptions? Explain with example.","title":"Unit-IV"},{"location":"java/Paper/#unit-v_2","text":"Solve following a. Explain architecture of a web page. How will you add an applet to htmlfile? Explain tag with example. b. Differentiate local n remote applets with example. Solve Following a. Explain life cycle of an applet. b. How will you pass parameters to applets? Explain input from the enduser, by example.","title":"Unit-V"},{"location":"java/Paper/#2013","text":"","title":"2013"},{"location":"java/Paper/#unit-i_3","text":"Solve Following a. What is the need of looping? Explainentry and exit control loop in java. b. Write a java program to create a threadthat display odd number starting from 1 and with 100. Solve Following a. What do you understand by type casting injava? Explain all arithmetic operation in java. b. What features are of object orientedtechnology? Explain \u201cwrite once and run anywhere\u201d nature of java.","title":"Unit-I"},{"location":"java/Paper/#unit-ii_3","text":"Solve following a. What are difference btw overloading andoverriding. Explain with suitable example. b. What is constructor and copy constructor? Solve Following a. What is class and object? Describe passing parameter to the methodswith suitable example. b. What is runnable interface? Explain withsuitable example?","title":"Unit-II"},{"location":"java/Paper/#unit-iii_3","text":"Solve Following a. How methods and package are useful? Explain accessing interfacevariable. b. What is an array? Explain vector and how it is different from array. What is wrapper classes? Explain variable forms of implementation of aclass.","title":"Unit-III"},{"location":"java/Paper/#unit-iv_3","text":"Solve Following a. Define a thread. How they are created? Explain thread method. b. What is synchronization? When do we use it? Solve Following a. Explain life cycle of thread. How can be define stopping and blockinga thread. b. What is an exceptional handling? Explaintry catch within java exception.","title":"Unit-IV"},{"location":"java/Paper/#unit-v_3","text":"Solve Following a. What is an applet? How do applet differfrom application programs? b. Explain life cycle at applet? How creates an executable applet. Solve Following a. What do you understand by passing parameter to applet? Explain withsuitable example. b. Define html tags for the applet. explain remote applet","title":"Unit-V"},{"location":"java/Paper/#2014","text":"","title":"2014"},{"location":"java/Paper/#unit-i_4","text":"Solve Following a. What is the need of command line argument injava? Justify your answer with the suitable examples. b. Java is more secure language compare to c and C++. Justify your answerwith a suitable example. Solve Following a. Java is architecture neutral language. Justify your answer. b. What is garbage collection? How is it useful in java programming?","title":"Unit-I"},{"location":"java/Paper/#unit-ii_4","text":"Solve Following a. How to implement the run time polymorphism in java? Explain theconcept with the suitable java program. b. Differentiate between the super and this keyword with the suitableJAVA program. Solve Following a. Explain the different access modifier of java language with thesuitable examples. b. What is a constructor overloading? Explain the need of constructoroverloading in java with java program.","title":"Unit-II"},{"location":"java/Paper/#unit-iii_4","text":"Solve Following a. What is wrapper class? Write down the application of wrapper classwith the java program. b. What is the need of an interface? Describe the various form ofimplementing interface. Give example of java for each case. Explain the following: a. String class and its methods. b. Hiding a class from package. c. Procedure for designing a user defined package.","title":"Unit-III"},{"location":"java/Paper/#unit-iv_4","text":"Explain how exception-handling mechanism can be used in a javaprogram? Also, differentiate the throw and throws keyword in java with thesuitable examples. Explain the multithreading. Write a program in java. a. To print the name, priority and thread group of the thread. b. To set the priority of a thread.","title":"Unit-IV"},{"location":"java/Paper/#unit-v_4","text":"How to part the parameter in an applet? Write a Java program to set the background and foreground Color and set the font of a text randomly on an applet window. How applet do differ from application program? Develop an applet that receive three numeric values of input from the user and then display the largest of three on the screen. Write a HTML page ant test the applet.","title":"Unit-V"},{"location":"java/Paper/#others","text":"Frequently Asked Questions - Java Can a main() method of class be invoked in another class? What is the difference between java command line arguments and C command line arguments? What is the difference between == & .equals What is the difference between abstract class & Interface. What is singleton class & it's implementation. Use of static,final variable Examples of final class Difference between Event propagation & Event delegation Difference between Unicast & Multicast model What is a java bean What is synchronized keyword used for. What are the restrictions of an applet & how to make the applet access the local machines resources. What is reflect package used for & the methods of it. What is serialization used for Can methods be overloaded based on the return types ? Why do we need a finalze() method when Garbage Collection is there ? Difference between AWT and Swing compenents ? Is there any heavy weight component in Swings ? Can the Swing application if you upload in net, be compatible with your browser? What should you do get your browser compatible with swing components? What are the methods in Applet ? When is init(),start() called ? When you navigate from one applet to another what are the methods called? What is the difference between Trusted and Untrusted Applet ? What is Exception ? What are the ways you can handle exception ? When is try,catch block used ? What is finally method in Exceptions ? What are the types of access modifiers ? What is protected and friendly ? What are the other modifiers ? Is synchronised modifier ? What is meant by polymorphism ? What is inheritance ? What is method Overloading ? What is this in OOPS ? What is method Overriding ? What is it in OOPS ? Does java support multi dimensional arrays ? Is multiple inheritance used in Java ? How do you send a message to the browser in JavaScript ? Does javascript support multidimensional arrays ? Is there any tool in java that can create reports ? What is meant by Java ? What is meant by a class ? What is meant by a method ? What are the OOPS concepts in Java ? What is meant by encapsulation ? Explain with an example What is meant by inheritance ? Explain with an example What is meant by polymorphism ? Explain with an example Is multiple inheritance allowed in Java ? Why ? What is meant by Java interpreter ? What is meant by JVM ? What is a compilation unit ? What is meant by identifiers ? What are the different types of modifiers ? What are the access modifiers in Java ? What are the primitive data types in Java ? What is meant by a wrapper class ? What is meant by static variable and static method ? What is meant by Garbage collection ? What is meant by abstract class What is meant by final class, methods and variables ? What is meant by interface ? What is meant by a resource leak ? What is the difference between interface and abstract class ? What is the difference between public private, protected and static What is meant by method overloading ? What is meant by method overriding ? What is singleton class ? What is the difference between an array and a vector ? What is meant by constructor ? What is meant by casting ? What is the difference between final, finally and finalize ? What is meant by packages ? What are all the packages ? Name 2 calsses you have used ? Name 2 classes that can store arbitrary number of objects ? What is the difference between java.applet.* and java.applet.Applet ? What is a default package ? What is meant by a super class and how can you call a super class ? What is anonymous class ? Name interfaces without a method ? What is the use of an interface ? What is a serializable interface ? How to prevent field from serialization ? What is meant by exception ? How can you avoid the runtime exception ? What is the difference between throw and throws ? What is the use of finally ? Can multiple catch statements be used in exceptions ? Is it possible to write a try within a try statement ? What is the method to find if the object exited or not ? What is meant by a Thread ? What is meant by multi-threading ? What is the 2 way of creating a thread ? Which is the best way and why? What is the method to find if a thread is active or not ? What are the thread-to-thread communcation ? What is the difference between sleep and suspend ? Can thread become a member of another thread ? What is meant by deadlock ? How can you avoid a deadlock ? What are the three typs of priority ? What is the use of synchronizations ? Garbage collector thread belongs to which priority ? What is meant by time-slicing ? What is the use of 'this' ? How can you find the length and capacity of a string buffer ? How to compare two strings ? What are the interfaces defined by Java.lang ? What is the purpose of run-time class and system class What is meant by Stream and Types ? What is the method used to clear the buffer ? What is meant by Stream Tokenizer ? What is serialization and de-serialisation ? What is meant by Applet ? How to find the host from which the Applet has originated ? What is the life cycle of an Applet ? How do you load an HTML page from an Applet ? What is meant by Applet Stub Interface ? What is meant by getCodeBase and getDocumentBase method ? How can you call an applet from a HTML file What is meant by Applet Flickering ? What is the use of parameter tag ? What is audio clip Interface and what are all the methods in it ? What is the difference between getAppletInfo and getParameterInfo ? How to communicate between applet and an applet ? What is meant by event handling ? What are all the listeners in java and explain ? What is meant by an adapter class ? What are the types of mouse event listeners ? What are the types of methods in mouse listeners ? What is the difference between panel and frame ? What is the default layout of the panel and frame ? What is meant by controls and types ? What is the difference between a scroll bar and a scroll panel. What is the difference between list and choice ? How to place a component on Windows ? What are the different types of Layouts ? What is meant by CardLayout ? What is the difference between GridLayout and GridBagLayout What is the difference between menuitem and checkboxmenu item. What is meant by vector class, dictionary class , hash table class,and property class ? Which class has no duplicate elements ? What is resource bundle ? What is an enumeration class ? What is meant by Swing ? What is the difference between AWT and Swing ? What is the difference between an applet and a Japplet What are all the components used in Swing ? What is meant by tab pans ? What is the use of JTree ? How can you add and remove nodes in Jtree. What is the method to expand and collapse nodes in a Jtree What is the use of JTable ? What is meant by JFC ? What is the class in Swing to change the appearance of the Frame in Runtime. How to reduce flicking in animation ? What is meant by Javabeans ? What is JAR file ? What is meant by manifest files ? What is Introspection ? What are the steps involved to create a bean ? Say any two properties in Beans ? What is persistence ? What is the use of beaninfo ? What are the interfaces you used in Beans ? What are the classes you used in Beans ? What is the diffrence between an Abstract class and Interface What is user defined exception ? What do you know about the garbate collector ? What is the difference between C++ & Java ? How do you communicate in between Applets & Servlets ? What is the use of Servlets ? In an HTML form I have a Button which makes us to open another page in 15 seconds. How will do you that ? What is the difference between Process and Threads ? How will you initialize an Applet ? What is the order of method invocation in an Applet ? When is update method called ? How will you communicate between two Applets ? Have you ever used HashTable and Dictionary ? What are statements in JAVA ? What is JAR file ? What is JNI ? What is the base class for all swing components ? What is JFC ? What is Difference between AWT and Swing ? Considering notepad/IE or any other thing as process, What will Happen if you start notepad or IE 3 times? Where 3 processes are started or 3 threads are started ? How does thread synchronization occurs inside a monitor ? How will you call an Applet using a Java Script function ? Is there any tag in HTML to upload and download files ? Why do you Canvas ? How can you push data from an Applet to Servlet ? What are the benefits of Swing over AWT ? Where the CardLayout is used ? What is the Layout for ToolBar ? What is the difference between Grid and GridbagLayout ? How will you add panel to a Frame ? What is the corresponding Layout for Card in Swing ? What is light weight component ? What is bean ? Where it can be used ? What is difference in between Java Class and Bean ? What is the mapping mechanism used by Java to identify IDL language ? Diff between Application and Applet ? What is serializable Interface ? What is the difference between CGI and Servlet ? What is the use of Interface ? Why Java is not fully objective oriented ? Why does not support multiple Inheritance ? What it the root class for all Java classes ? What is polymorphism ? Suppose If we have variable ' I ' in run method, If I can create one or More thread each thread will occupy a separate copy or same variable will be shared ? What is Constructor and Virtual function? Can we call Virtual Funciton in a constructor ? Why we use OOPS concepts? What is its advantage ? What is the difference in between C++ and Java ? can u explain in detail? What is the exact difference in between Unicast and Multicast object ? Where we will use ? How do you sing an Applet ? In a Container there are 5 components. I want to display the all the components names, how will you do that one ? Why there are some null interface in java ? What does it mean ? Give me some null interfaces in JAVA ? Tell me the latest versions in JAVA related areas ? What is meant by class loader ? How many types are there? When will we use them ? What is meant by flickering ? What is meant by cookies ? Explain ? Problem faced in your earlier project How OOPS concept is achieved in Java Features for using Java How does Java 2.0 differ from Java 1.0 Public static void main - Explain What are command line arguments Explain about the three-tier model Difference between String & StringBuffer Wrapper class. Is String a Wrapper Class What are the restriction for static method Purpose of the file class Default modifier in Interface Difference between Interface & Abstract class Can abstract be declared as Final Can we declare variables inside a method as Final Variables What is the package concept and use of package How can a dead thread be started Difference between Applet & Application Life cycle of the Applet Can Applet have constructors Differeence between canvas class & graphics class Explain about Superclass & subclass What is AppletStub Explain Stream Tokenizer What is the difference between two types of threads Checked & Unchecked exception Use of throws exception What is finally in exception handling Vector class What will happen to the Exception object after exception handling Two types of multi-tasking Two ways to create the thread Synchronization I/O Filter Can applet in different page communicate with each other Why Java is not 100 % pure OOPS ? ( EcomServer ) When we will use an Interface and Abstract class ? How to communicate 2 threads each other ? Can a main() method of class be invoked in another class? What is the difference between java command line arguments and C command line arguments? What is the difference between == & .equals What is the difference between abstract class & Interface. What is singleton class & it's implementation. Use of static,final variable Examples of final class Difference between Event propagation & Event delegation Difference between Unicast & Multicast model What is a java bean What is synchronized keyword used for. What are the restrictions of an applet & how to make the applet access the local machines resources. What is reflect package used for & the methods of it. What is serialization used for Can methods be overloaded based on the return types ? Why do we need a finalze() method when Garbage Collection is there ? Difference between AWT and Swing compenents ? Is there any heavy weight component in Swings ? Can the Swing application if you upload in net, be compatible with your browser? What should you do get your browser compatible with swing components? What are the methods in Applet ? When is init(),start() called ? When you navigate from one applet to another what are the methods called? What is the difference between Trusted and Untrusted Applet ? What is Exception ? What are the ways you can handle exception ? When is try,catch block used ? What is finally method in Exceptions ? What are the types of access modifiers ? What is protected and friendly ? What are the other modifiers ? Is synchronised modifier ? What is meant by polymorphism ? What is inheritance ? What is method Overloading ? What is this in OOPS ? What is method Overriding ? What is it in OOPS ? Does java support multi dimensional arrays ? Is multiple inheritance used in Java ? How do you send a message to the browser in JavaScript ? Does javascript support multidimensional arrays ? Is there any tool in java that can create reports ? What is meant by Java ? What is meant by a class ? What is meant by a method ? What are the OOPS concepts in Java ? What is meant by encapsulation ? Explain with an example What is meant by inheritance ? Explain with an example What is meant by polymorphism ? Explain with an example Is multiple inheritance allowed in Java ? Why ? What is meant by Java interpreter ? What is meant by JVM ? What is a compilation unit ? What is meant by identifiers ? What are the different types of modifiers ? What are the access modifiers in Java ? What are the primitive data types in Java ? What is meant by a wrapper class ? What is meant by static variable and static method ? What is meant by Garbage collection ? What is meant by abstract class What is meant by final class, methods and variables ? What is meant by interface ? What is meant by a resource leak ? What is the difference between interface and abstract class ? What is the difference between public private, protected and static What is meant by method overloading ? What is meant by method overriding ? What is singleton class ? What is the difference between an array and a vector ? What is meant by constructor ? What is meant by casting ? What is the difference between final, finally and finalize ? What is meant by packages ? What are all the packages ? Name 2 calsses you have used ? Name 2 classes that can store arbitrary number of objects ? What is the difference between java.applet.* and java.applet.Applet ? What is a default package ? What is meant by a super class and how can you call a super class ? What is anonymous class ? Name interfaces without a method ? What is the use of an interface ? What is a serializable interface ? How to prevent field from serialization ? What is meant by exception ? How can you avoid the runtime exception ? What is the difference between throw and throws ? What is the use of finally ? Can multiple catch statements be used in exceptions ? Is it possible to write a try within a try statement ? What is the method to find if the object exited or not ? What is meant by a Thread ? What is meant by multi-threading ? What is the 2 way of creating a thread ? Which is the best way and why? What is the method to find if a thread is active or not ? What are the thread-to-thread communcation ? What is the difference between sleep and suspend ? Can thread become a member of another thread ? What is meant by deadlock ? How can you avoid a deadlock ? What are the three typs of priority ? What is the use of synchronizations ? Garbage collector thread belongs to which priority ? What is meant by time-slicing ? What is the use of 'this' ? How can you find the length and capacity of a string buffer ? How to compare two strings ? What are the interfaces defined by Java.lang ? What is the purpose of run-time class and system class What is meant by Stream and Types ? What is the method used to clear the buffer ? What is meant by Stream Tokenizer ? What is serialization and de-serialisation ? What is meant by Applet ? How to find the host from which the Applet has originated ? What is the life cycle of an Applet ? How do you load an HTML page from an Applet ? What is meant by Applet Stub Interface ? What is meant by getCodeBase and getDocumentBase method ? How can you call an applet from a HTML file","title":"Others"},{"location":"java/Practicals/","text":"Program 1: Print Message. class firstprogram { public static void main ( String arg []) { System . out . println ( \"this is java's first program\" ); } } Execution steps : Javac firstprogram . java ( File name ) Java firstprogram ( class name ) Program 2: WAP to find the average,sum,min and max of the N numbers Using user Input. import java.util.* ; class Average { public static void main ( String args []) { Scanner sc = new Scanner ( System . in ); // to take user input int choice ; int a = 0 , min = 0 , max = 0 , x ; int n = args . length ; System . out . println ( \"1-sum\" ); System . out . println ( \"2-Average\" ); System . out . println ( \"3-Minimum\" ); System . out . println ( \"4-Maximum\" ); System . out . println ( \"Enter Ur Choice : \" ); choice = sc . nextInt (); for ( int i = 0 ; i < n ; i ++) { a += Integer . parseInt ( args [ i ]); //to convert string into Integer } switch ( choice ) { case 1 : System . out . println ( \"The sum is : \" + a ); break ; case 2 : System . out . println ( \"The Average is : \" + a / n ); break ; case 3 : for ( int i = 0 ; i < n - 1 ; i ++) { x = Integer . parseInt ( args [ i ]); if ( x < Integer . parseInt ( args [ i + 1 ])) min = x ; else min = Integer . parseInt ( args [ i + 1 ]); } System . out . println ( \"The minimum is : \" + min ); break ; case 4 : for ( int i = 0 ; i < n - 1 ; i ++) { x = Integer . parseInt ( args [ i ]); if ( x > Integer . parseInt ( args [ i + 1 ])) max = x ; else max = Integer . parseInt ( args [ i + 1 ]); } System . out . println ( \"The maximum is : \" + max ); break ; } } } //Program 3: WAP to Demonstrate Type Casting. class typecast { public static void main ( String args []) { byte h = 127 ; int a = 300 ; float a1 = 12.222f ; float g ; short b = 200 ; long c = 999999 ; float e = 345.89F ; double f = 45645.78222222222222 ; g = ( float ) f ; System . out . println ( \"short b =\" + g ); System . out . println ( \"short b =\" + b ); System . out . println ( \"long c =\" + c ); System . out . println ( \"float e=\" + e ); System . out . println ( \"double f=\" + f ); System . out . println ( \"short b=\" + b ); System . out . println ( \"short to byte \" +( byte ) b ); System . out . println ( \"int to byte \" +( byte ) a ); System . out . println ( \"int to float\" +( float ) a ); System . out . println ( \"long to byte \" +( byte ) c ); System . out . println ( \"double to long \" +( long ) f ); System . out . println ( \"double to int \" +( int ) f ); System . out . println ( \"double to byte \" +( byte ) f ); System . out . println ( \"double to short \" +( short ) f ); System . out . println ( \"double to float \" +( float ) f ); System . out . println ( \"float to int \" +( int ) e ); System . out . println ( \"float to byte \" +( byte ) e ); System . out . println ( \"float to short \" +( short ) e ); System . out . println ( \"float to long \" +( long ) e ); System . out . println ( \"float to double =\" +( double ) e ); System . out . println ( \"long to int\" +( int ) c ); System . out . println ( \"byte to int =\" +( int ) h ); } } //Program 4: WAP to Test the Prime num. import java.util.* ; class prime { public static void main ( String args []) { int flag , x , i ; flag = 0 ; int a []= new int [ 7 ]; for ( x = 0 ; x < args . length ; x ++) { a [ x ]= Integer . parseInt ( args [ x ]); for ( i = 2 ; i <( a [ x ]/ 2 ); i ++) { if (( a [ x ]% i )== 0 ) { break ; } else flag = 1 ; } if ( flag == 1 ) System . out . println ( a [ x ]+ \" is a prime no \" ); else System . out . println ( a [ x ]+ \" is not a prime no \" ); flag = 0 ; } } } //Program 5: WAP to find out the HCF and LCF. import java.util.* ; class hcf { public static void main ( String args []) { int a , b ; Scanner sc = new Scanner ( System . in ); System . out . println ( \"Enter two nos :\" ); a = sc . nextInt (); b = sc . nextInt (); int big ; int small ; if ( a > b ) { big = a ; small = b ; } else { big = b ; small = a ; } for ( int i = 1 ; i <= big ; i ++) { if ((( big * i )% small )== 0 ) { int lcm = big * i ; System . out . println ( \"The least common multiple is \" +( lcm )); break ; } } int temp = 1 ; while ( temp != 0 ) { temp = big % small ; if ( temp == 0 ) { System . out . println ( \"GCD is \" + small ); } else { big = small ; small = temp ;} }}} java //Program 6: WAP to calculate the Simple Interest and Input by the user. import java.util.*; class si { int p,t; float si,r; public si() { r=0; p=0; } public void getdata() { Scanner sc =new Scanner(System.in); System.out.println(\"Enter principle : \"); p=sc.nextInt(); System.out.println(\"Enter rate : \"); r=sc.nextFloat(); System.out.println(\"Enter time period : \"); t=sc.nextInt(); } public void cal() { si=(p*r*t)/100; } public void display() { System.out.println(\"Principle : Rs\"+p); System.out.println(\"Rate : \"+r); System.out.println(\"Time period : \"+t); System.out.println(\"Simple Interest : Rs\"+si); } public static void main(String args[]) { si s = new si(); s.getdata(); s.cal(); s.display(); } } ```java //Program 7: WAP to create a Simple class to find out the Area and perimeter of rectangle and box using super and this keyword . class rect { int l,b; public rect(int l,int b) { this.l=l; this.b=b; } public int area() { return l*b; } } class box extends rect { int d; public box(int l,int b,int d) { super(l,b); this.d=d; } public int volume() { int vol = area() d; return vol; } public static void main(String args[]) { int vol ,area; System.out.println(\"derived object in derived reference\"); rect r= new rect(10,20); area=r.area(); System.out.println(\"area is \"+area+\"\\n\"); System.out.println(\"base object in base reference\"); box b = new box(10,20,30); vol=b.volume(); area=b.area(); System.out.println(\"area is \"+area); System.out.println(\"volume is \"+vol+\"\\n\"); System.out.println(\"derived object in base reference\"); rect b1= new box(10,90,70); area = b1.area(); //vol=b1.volume(); as with refernce of base class we can't call derived's method System.out.println(\"area is \"+area); //as super class doesn't knw abt the base class but reference can be assigned /*System.out.println(\"base object in derived reference\"); box b2=(new rect (10,20)); vol = b2.area(); System.out.println(\"area is \"+area); / r=b; System.out.println(r.area()); System.out.println(r.volume()); } } ```java //Program 8: WAP to design a class account using the inheritance and static that show all function of bank(withrowal,deposite) and generate account number dyanamically. import java.util.*; class bank { static int acc_no =10001; float amt; public void display() { System.out.println(\"Account no :\"+acc_no ); System.out.println(\"Current Amount :\"+amt ); } public bank() { amt=1000; System.out.println(\"Ur account no is \"+acc_no); acc_no++; } public void getamt() { System.out.println(\"Current balance :\"+amt); } public void withdraw(float x) { if(amt==1000 || amt<=x ) { System.out.println(\"Sorry u can't withdraw\"); } else { amt=amt-x; System.out.println(\"amount withdrawn :\"+x); System.out.println(\"After withdrawl\"); getamt(); } } public void deposit(float x) { if(x==0.0) System.out.println(\"OOPS 0 can't be deposited\"); else { amt+=x; System.out.println(\"After deposition\"); getamt();} } public static void main(String args[]) { Scanner sc = new Scanner(System.in); bank b1 = new bank(); b1.deposit(0); b1.withdraw(120.5f); b1.display(); System.out.println(\"\\n\"); bank b2 = new bank(); b2.deposit(1000.0f); b2.withdraw(150.5f); } } //Program 9: WAP to design a class Shape (Implement Runtime polymorphim) using abstract Methods and Classes. class AbstractDemo1 { public static void main ( String args []) { Shape shape ; Rectangle r = new Rectangle (); r . setDimensions ( 40 , 20 ); shape = r ; System . out . println ( shape . getArea ()); System . out . println ( shape . getPerimeter ()); } } abstract class Shape { void someMethod () { System . out . println ( \"This is some method\" ); } abstract float getArea (); abstract float getPerimeter (); } class Square extends Shape { float side ; Square () { side = 0 ; } Square ( float side ) { this . side = side ; } void setSide ( float side ) { this . side = side ; } float getArea () { return side * side ; } float getPerimeter () { return 4 * side ; } } import java.awt.* ; class MyCircle extends MyShape { private float radius ; static float pi ; static { pi = 22 / 7.0f ; } MyCircle () { super ( \"circle\" ); radius = 0 ; } MyCircle ( float radius ) { super ( \"circle\" ); this . radius = radius ; } void setDimensions ( float radius ) { this . radius = radius ; } void showDimensions () { System . out . println ( \"radius : \" + radius ); } float getArea () { return radius * radius * pi ; } } class Rectangle extends Shape { private float length ; private float breadth ; Rectangle () { length = breadth = 0 ; } Rectangle ( float length , float breadth ) { setDimensions ( length , breadth ); } void setDimensions ( float length , float breadth ) { this . length = length ; this . breadth = breadth ; } float getArea () { return length * breadth ; } float getPerimeter () { return ( 2 * ( length + breadth )); } } //Program 10:WAP to design a String class that perform String Method(Equal, Reverse the string, change case, trim etc. ) public class StringDemo { public static void main ( String args []) { String str = \"This is some sample String with some words that have been repeated some times\" ; System . out . println ( \"Total no. of characters : \" + str . length ()); System . out . println ( \"To Upper Case : \" + str . toUpperCase ()); System . out . println ( \"To Lower Case : \" + str . toLowerCase ()); System . out . println ( \"Original String : \" + str ); System . out . println ( str . substring ( 8 )); System . out . println ( str . substring ( 8 , 19 )); System . out . println ( str . indexOf ( \"some\" )); String s = \" \" + str + \" \" ; System . out . println ( s ); System . out . println ( \"[\" + s . trim () + \"]\" ); System . out . println ( str . replace ( \"s\" , \"$$##\" )); String sh = \"parth is a good boy\" ; System . out . println ( sh + \" -> \" + new StringBuffer ( sh ). reverse ()); }} Program 11 : WAP to handle the Exception using try and multiple catch block . class exception { public static void main ( String args []){ try { int d = 42 ; int a = 0 ; int c = d / a ; } catch ( ArithmeticException e ){ System . out . println ( \"Division by zero error\" ); } } } Other Example : public class ExceptionHandling { public static void main ( String args []) { String num []={ \"123\" , \"456\" , \"abc\" , \"789\" }; int sum = 0 ; int i ; for ( i = 0 ; i <= num . length ; i ++) { try { sum += Integer . parseInt ( num [ i ]); } catch ( NumberFormatException e ) { System . out . println ( \"NUMBER FORMAT ERROR\" ); } catch ( ArrayIndexOutOfBoundsException e ) { System . out . println ( \"ARRAY ERROR\" ); } finally { System . out . println ( \"i = \" + i ); } } System . out . println ( \"sum is\" + sum ); } } //Program 12:WAP that Implement the Nested try Statements. class NestedTry { public static void main ( String args []) { int a = args . length ; try { int d = 42 / a ; try { if ( a == 1 ){ int c = a /( a - a );} if ( a == 2 ) { int c []={ 2 , 3 , 4 }; c [ 5 ]= 90 ; } } catch ( ArrayIndexOutOfBoundsException e ) { e . printStackTrace (); } } catch ( ArithmeticException e ) { e . printStackTrace (); } } } Program 13 : WAP that Implement Throw and Throws . class ThrowDemo { ThrowDemo () { try { throw new NullPointerException (); } catch ( NullPointerException e ) { System . out . println ( \"Caught in constructor\" ); throw e ; } } public static void main ( String args []) { try { ThrowDemo td = new ThrowDemo (); } catch ( NullPointerException e ) { System . out . println ( \"Caught in Main\" ); } } } class ThrowsDemo { ThrowsDemo () throws NullPointerException { System . out . print ( \"in constructor\" ); throw new NullPointerException (); } public static void main ( String args []) { try { ThrowsDemo td = new ThrowsDemo (); } catch ( NullPointerException e ) { System . out . println ( \"Caught in Main\" ); } } } //Program 14: WAP that Implement Custom Exception. import java.util.* ; class MyException extends Exception { private int e ; MyException ( int a ) { e = a ; } public String toString () { return ( \"Error in entry\" + e ); } } public class mine { public void compute ( int a ) throws MyException { int age = a ; if ( age > 150 ) throw new MyException ( age ); System . out . println ( \"COrrect age\" ); } public static void main ( String args []) { mine m = new mine (); try { m . compute ( 1 ); m . compute ( 789 ); } catch ( MyException e ) { System . out . println ( e ); } } } //Program 15: WAP to Create a package that access the member of external class as well as same package. package pack ; class base { public static void main ( String arg []) { System . out . println ( \"Base class(p1)\" ); p1 w = new p1 (); //w.f1(); System . out . println ( \"Derived class(p2)\" ); p2 x = new p2 (); // x.f2(); System . out . println ( \"Simple class(p3)\" ); p3 y = new p3 (); // y.f3(); } } package pack ; public class p1 { int a = 1 ; public int b = 2 ; private int c = 3 ; protected int d = 4 ; public p1 () { System . out . println ( \"Value of a=\" + a ); System . out . println ( \"Value of b=\" + b ); System . out . println ( \"Value of c=\" + c ); System . out . println ( \"Value of d=\" + d ); } } package pack ; class p2 extends p1 { p2 () { System . out . println ( \"Value of a=\" + a ); System . out . println ( \"Value of b=\" + b ); //System.out.println(\"Value of c=\"+c); System . out . println ( \"Value of d=\" + d ); } } package pack ; class p3 { p1 p = new p1 (); p3 () { System . out . println ( \"Value of a=\" +( p . a )); System . out . println ( \"Value of b=\" +( p . b )); //System.out.println(\"Value of c=\"+(p.c)); System . out . println ( \"Value of d=\" +( p . d )); } } package pack1 ; class simple extends pack . p1 { public simple () { // System.out.println(\"Value of a=\"+a); System . out . println ( \"Value of b=\" + b ); // System.out.println(\"Value of c=\"+c); System . out . println ( \"Value of d=\" + d ); } } package pack1 ; class s2 { public static void main ( String arg []) { simple s = new simple (); s1 p = new s1 (); } } package pack1 ; class s1 { s1 () { pack . p1 z = new pack . p1 (); // System.out.println(\"Value of a=\"+(z.a)); System . out . println ( \"Value of b=\" +( z . b )); // System.out.println(\"Value of c=\"+(z.c)); // System.out.println(\"Value of d=\"+(z.d)); } } //Program16: WAP that show the partial implementation of Interface.(calculation of Salary of Employee). import java.util.* ; interface salary { int getsal (); } abstract class employee { String name ; int age ; String sex ; int sal ; employee ( String name , int age , String sex , int sal ) { this . name = name ; this . age = age ; this . sex = sex ; this . sal = sal ; } abstract void display (); } class labour extends employee implements salary { int wage ; int hrs ; labour ( String name , int age , String sex , int sal , int hrs ) { super ( name , age , sex , sal ); this . hrs = hrs ; } public int getsal () { wage = sal * hrs ; return wage ; } void display () { System . out . println ( \"name :\" + name ); System . out . println ( \"Age :\" + age ); System . out . println ( \"Sex :\" + sex ); System . out . println ( \"salary : Rs\" + sal ); System . out . println ( \"Hours worked :\" + hrs ); System . out . println ( \"Wage of the daily labour :Rs\" + getsal ()); } } class staff extends employee implements salary { int hra , da , ta ; staff ( String name , int age , String sex , int sal , int hra , int da , int ta ) { super ( name , age , sex , sal ); this . da = da ; this . ta = ta ; this . hra = hra ; } public int getsal () { int wage = sal + ta + da + hra ; return wage ; } void display () { System . out . println ( \"name :\" + name ); System . out . println ( \"Age :\" + age ); System . out . println ( \"Sex :\" + sex ); System . out . println ( \" basic salary :Rs\" + sal ); System . out . println ( \"Daily allowance : Rs\" + da ); System . out . println ( \"Travel allowance : Rs\" + ta ); System . out . println ( \"Household allowance : Rs\" + hra ); System . out . println ( \"total salary :Rs\" + getsal ()); } } class sal { public static void main ( String args []) { Scanner sc = new Scanner ( System . in ); int ch , da , ta , hra , sal , hrs , age ; String name ; String sex ; System . out . println ( \"Enter ur choice for salary calculation\" ); System . out . println ( \"1-labour\" ); System . out . println ( \"2-Staff\" ); ch = sc . nextInt (); switch ( ch ) { case 1 : System . out . println ( \"Enter the following for a lobour\" ); System . out . print ( \"Name :\" ); name = sc . next (); System . out . println ( \"age :\" ); age = sc . nextInt (); System . out . println ( \"Sex : \" ); sex = sc . next (); System . out . println ( \"salary :\" ); sal = sc . nextInt (); System . out . println ( \"daily working hours :\" ); hrs = sc . nextInt (); labour l = new labour ( name , age , sex , sal , hrs ); l . display (); break ; case 2 : System . out . println ( \"Enter the following for a Staff\" ); System . out . println ( \"Name :\" ); name = sc . next (); System . out . println ( \"age :\" ); age = sc . nextInt (); System . out . println ( \"Sex : \" ); sex = sc . next (); System . out . println ( \"salary : \" ); sal = sc . nextInt (); System . out . println ( \"daily allowance :\" ); da = sc . nextInt (); System . out . println ( \"travel allowance :\" ); ta = sc . nextInt (); System . out . println ( \"household allowance :\" ); hra = sc . nextInt (); staff s = new staff ( name , age , sex , sal , hra , da , ta ); s . display (); break ; } } //Program 17: WAP to create Arithmetic Math Calculator Using Applet Class ant Event Handling. /*<APPLET CODE =\"calc.class\" WIDTH =300 HEIGHT =400> </APPLET>*/ import java.awt.event.* ; import java.awt.* ; import java.applet.Applet ; public class calc extends Applet implements ActionListener { Button add , sub , divide , multi ; Label result , no1 , no2 ; TextField tf , ip1 , ip2 ; Panel p1 , p2 , p3 ; public void init () { add = new Button ( \"ADD\" ); sub = new Button ( \"SUBTRACT\" ); divide = new Button ( \"DIVIDE\" ); multi = new Button ( \"MULTIPLY\" ); result = new Label ( \"Result = \" ); no1 = new Label ( \"NUMBER 1:\" ); no2 = new Label ( \"NUMBER 2:\" ); tf = new TextField ( 20 ); ip1 = new TextField ( 10 ); ip2 = new TextField ( 10 ); p1 = new Panel (); p2 = new Panel (); p3 = new Panel (); tf . setEditable ( false ); add . setSize ( 20 , 40 ); sub . setSize ( 20 , 40 ); divide . setSize ( 20 , 40 ); add . addActionListener ( this ); sub . addActionListener ( this ); divide . addActionListener ( this ); multi . addActionListener ( this ); setLayout ( new FlowLayout ()); p1 . add ( no1 ); p1 . add ( ip1 ); p1 . add ( no2 ); p1 . add ( ip2 ); p2 . add ( add ); p2 . add ( sub ); p2 . add ( divide ); p2 . add ( multi ); p3 . add ( result ); p3 . add ( tf ); add ( p1 ); add ( p2 ); add ( p3 ); setSize ( 400 , 200 ); setVisible ( true ); } public void actionPerformed ( ActionEvent e ) { int a , b ; int result ; a = Integer . parseInt ( ip1 . getText ()); b = Integer . parseInt ( ip2 . getText ()); if ( e . getSource ()== add ) { System . out . println ( \"ADD\" ); result =( a + b ); tf . setText ( \"Addition :\" + String . valueOf ( result )); } if ( e . getSource ()== sub ) { result =( a - b ); tf . setText ( \"Subtraction : \" + String . valueOf ( result )); } if ( e . getSource ()== multi ) { result =( a * b ); tf . setText ( \"Multiplication : \" + String . valueOf ( result )); } if ( e . getSource ()== divide ) { try { if ( b == 0 ) { result =( a / b ); tf . setText ( \"Division :\" + String . valueOf ( result )); } } catch ( ArithmeticException ae ) { tf . setText ( \"Division can't be performed\" ); } } } } //Program 18: WAP to Draw the line, Rectangle, oval, text etc using the graphics method. /*<applet code = \"AppletDemo.class\" width = \"500\" height = \"300\"> </applet>*/ import java.applet.Applet ; import java.awt.* ; public class AppletDemo extends Applet { public void init () { setBackground ( Color . cyan ); } public void paint ( Graphics g ) { Font f = new Font ( \"TIMES NEW ROMAN \" , Font . ITALIC , 32 ); g . setFont ( f ); g . setColor ( Color . orange ); g . drawString ( \"WELCOME TO APPLET \" , 30 , 30 ); g . fillOval ( 60 , 60 , 150 , 150 ); g . setColor ( Color . black ); g . fillOval ( 90 , 100 , 20 , 20 ); g . fillOval ( 160 , 100 , 20 , 20 ); g . setColor ( Color . RED ); g . drawLine ( 120 , 150 , 150 , 150 ); g . drawLine ( 120 , 150 , 140 , 130 ); g . drawArc ( 90 , 130 , 90 , 60 , 0 ,- 180 ); } } //Program 19: WAP to create a frame Window Using Frame Class. public class AWT1 { public static void main ( String args []) { MyFrame mf = new MyFrame (); } } import java.awt.event.* ; /* class MyWindowListener implements WindowListener { public void windowActivated(WindowEvent we){} public void windowDeactivated(WindowEvent we){} public void windowOpened(WindowEvent we){} public void windowClosed(WindowEvent we){} public void windowIconified(WindowEvent we){} public void windowDeiconified(WindowEvent we){} public void windowClosing(WindowEvent we) { System.exit(0); } } */ class MyWindowAdapter extends WindowAdapter { public void windowClosing ( WindowEvent we ) { System . exit ( 0 ); } } import java.awt.* ; import java.awt.event.* ; class MyFrame extends Frame //implements WindowListener { MyFrame () { super ( \"Sample Java Frame\" ); //MyWindowListener mwl = new MyWindowListener(); //MyWindowAdapter mwa = new MyWindowAdapter(); //addWindowListener(mwa); addWindowListener ( new MyWindowAdapter ()); //addWindowListener(this); setSize ( 400 , 300 ); setResizable ( true ); //setUndecorated(true); setVisible ( true ); } } Program 19 : WAP to create UI component on Frame Window Using Frame Class . public class AWT1 { public static void main ( String args []) { MyFrame mf = new MyFrame (); } } import java.awt.event.* ; class MyWindowAdapter extends WindowAdapter { public void windowClosing ( WindowEvent we ) { System . exit ( 0 ); } } import java.awt.* ; import java.awt.event.* ; class MyFrame extends Frame { Label lbl , l2 ; TextField t1 ; MyFrame () { super ( \"Sample Java Frame\" ); addWindowListener ( new MyWindowListener ()); setSize ( 500 , 400 ); addControls (); setVisible ( true ); } private void addControls () { setLayout ( null ); lbl = new Label ( \"Sample Label\" , Label . CENTER ); lbl . setSize ( 250 , 22 ); lbl . setLocation ( 10 , 40 ); //lbl.setText(\"This is the text in the label control\"); lbl . setBackground ( Color . YELLOW ); lbl . setForeground ( Color . RED ); //lbl.setAlignment(Label.RIGHT); add ( lbl ); l2 = new Label ( lbl . getText ()); l2 . setSize ( lbl . getSize ()); l2 . setLocation ( lbl . getLocation (). x , lbl . getLocation (). y + 30 ); l2 . setAlignment ( lbl . getAlignment ()); l2 . setBackground ( lbl . getForeground ()); l2 . setForeground ( lbl . getBackground ()); //l2.setVisible(false); add ( l2 ); t1 = new TextField ( \"This is some initial text in the text box control\" ); t1 . setSize ( 200 , 22 ); t1 . setLocation ( 10 , 160 ); t1 . setEchoChar ( '^' ); if ( t1 . echoCharIsSet ()) { System . out . println ( \"Input has been masked\" ); System . out . println ( \"Mask character is \" + t1 . getEchoChar ()); } add ( t1 ); t1 . setEnabled ( false ); // t1.setEditable(false); } } //Program 20: WAP to implement ListBox. public class AWT1 { public static void main ( String args []) { MyFrame mf = new MyFrame (); } } import java.awt.* ; import java.awt.event.* ; public class MyFrame extends Frame implements ActionListener { List lst ; Button btn ; MyFrame () { super ( \"Sample Java Frame\" ); addWindowListener ( new MyWindowAdapter ()); setSize ( 500 , 400 ); addControls (); setVisible ( true ); } private void addControls () { setLayout ( null ); lst = new List (); lst . setLocation ( 30 , 50 ); lst . setSize ( 200 , 300 ); lst . setMultipleMode ( true ); add ( lst ); lst . add ( \"sfsdf\" ); lst . add ( \"55656\" ); lst . add ( \"dfgdfg\" ); lst . add ( \"sfsdf\" ); lst . add ( \"cvb\" ); lst . add ( \"sfcvbcbcvbcvbsdf\" ); lst . add ( \"bmmbnm\" ); lst . add ( \"ioouo\" ); lst . add ( \"qeqwe\" ); lst . add ( \".m,.m,.\" ); btn = new Button ( \"Click Me\" ); btn . addActionListener ( this ); btn . setSize ( 100 , 24 ); btn . setLocation ( 250 , 50 ); add ( btn ); } public void actionPerformed ( ActionEvent ae ) { System . out . println ( \"Total Selected Items : \" + lst . getSelectedItems (). length ); String aItem [] = lst . getSelectedItems (); int i ; for ( i = 0 ; i < aItem . length ; i ++) System . out . println ( aItem [ i ]); } } import java.awt.event.* ; class MyWindowAdapter extends WindowAdapter { public void windowClosing ( WindowEvent we ) { System . exit ( 0 ); } } //Program 21: WAP to implement Choice, Checkbox, radio button With event handling. public class AWT1 { public static void main ( String args []) { MyFrame mf = new MyFrame (); } } import java.awt.* ; import java.awt.event.* ; class MyFrame extends Frame implements ItemListener { Checkbox c1 , c2 , c3 , c4 , c5 , c6 ; CheckboxGroup cbg1 , cbg2 ; Choice cbo ; MyFrame () { super ( \"Sample Java Frame\" ); addWindowListener ( new MyWindowAdapter ()); setSize ( 500 , 400 ); addControls (); setVisible ( true ); } private void addControls () { setLayout ( new FlowLayout ()); cbg1 = new CheckboxGroup (); cbg2 = new CheckboxGroup (); c1 = new Checkbox ( \"C\" , true ); c2 = new Checkbox ( \"C++\" , cbg2 , true ); c3 = new Checkbox ( \"Java\" , cbg2 , true ); c4 = new Checkbox ( \"Prolog\" , cbg1 , false ); c5 = new Checkbox ( \"Lisp\" , true , cbg1 ); c6 = new Checkbox ( \"Fortran\" ); c1 . addItemListener ( this ); c2 . addItemListener ( this ); c3 . addItemListener ( this ); c4 . addItemListener ( this ); c5 . addItemListener ( this ); c6 . addItemListener ( this ); //c2.setState(true); //c5.setState(false); add ( c1 ); add ( c2 ); add ( c3 ); add ( c4 ); add ( c5 ); add ( c6 ); cbo = new Choice (); cbo . add ( \"Delhi\" ); cbo . add ( \"Ajmer\" ); cbo . add ( \"Jaipur\" ); cbo . add ( \"Mumbai\" ); cbo . insert ( \"Beawar\" , 0 ); cbo . add ( \"Chandigarh\" ); cbo . add ( \"Jalandhar\" ); cbo . add ( \"Nasirabad\" ); cbo . add ( \"Bharatpur\" ); cbo . select ( 3 ); cbo . addItemListener ( this ); add ( cbo ); } public void itemStateChanged ( ItemEvent ie ) { if ( ie . getSource () instanceof Checkbox ) { Checkbox c = ( Checkbox ) ie . getSource (); System . out . println ( c . getLabel () + \" : \" + c . getState ()); } else if ( ie . getSource () instanceof Choice ) { System . out . println ( \"Selected Index : \" + cbo . getSelectedIndex ()); System . out . println ( \"Selected Item : \" + cbo . getSelectedItem ()); } } } import java.awt.event.* ; class MyWindowAdapter extends WindowAdapter { public void windowClosing ( WindowEvent we ) { System . exit ( 0 ); } } //Program 22: WAP to implement Layout Manager. public class AWT1 { public static void main ( String args []) { MyFrame mf = new MyFrame (); } } import java.awt.* ; import java.awt.event.* ; class MyFrame extends Frame implements ActionListener { Panel mainPanel , p1 , p2 , p3 , p4 , p5 , topPanel ; CardLayout cl ; TextField txt []; Button btn [], b1 , b2 , b3 , b4 , b5 ; TextArea ta []; Label lbl []; Choice choice []; MyFrame () { super ( \"Sample Java Frame\" ); addWindowListener ( new MyWindowAdapter ()); setSize ( 400 , 300 ); addControls (); setVisible ( true ); } private void addControls () { cl = new CardLayout (); mainPanel = new Panel (); mainPanel . setLayout ( cl ); int i ; GridLayout gl = new GridLayout ( 5 , 10 , 5 , 5 ); p1 = new Panel (); p1 . setLayout ( gl ); txt = new TextField [ 50 ]; for ( i = 0 ; i < txt . length ; i ++) { txt [ i ] = new TextField ( \"Text \" + ( i + 1 )); p1 . add ( txt [ i ]); } p2 = new Panel (); p2 . setLayout ( gl ); btn = new Button [ 50 ]; for ( i = 0 ; i < btn . length ; i ++) { btn [ i ] = new Button ( \"Button \" + ( i + 1 )); btn [ i ]. addActionListener ( this ); p2 . add ( btn [ i ]); } p3 = new Panel (); p3 . setLayout ( gl ); ta = new TextArea [ 50 ]; for ( i = 0 ; i < ta . length ; i ++) { ta [ i ] = new TextArea ( \"Text \" + ( i + 3 )); p3 . add ( ta [ i ]); } p4 = new Panel (); p4 . setLayout ( gl ); lbl = new Label [ 50 ]; for ( i = 0 ; i < lbl . length ; i ++) { lbl [ i ] = new Label ( \"Label \" + ( i + 4 )); p4 . add ( lbl [ i ]); } p5 = new Panel (); p5 . setLayout ( gl ); choice = new Choice [ 50 ]; for ( i = 0 ; i < choice . length ; i ++) { choice [ i ] = new Choice (); p5 . add ( choice [ i ]); } mainPanel . add ( p1 , \"panel1\" ); mainPanel . add ( p2 , \"panel2\" ); mainPanel . add ( p3 , \"panel3\" ); mainPanel . add ( p4 , \"panel4\" ); mainPanel . add ( p5 , \"panel5\" ); add ( mainPanel ); b1 = new Button ( \"Card 1\" ); b2 = new Button ( \"Card 2\" ); b3 = new Button ( \"Card 3\" ); b4 = new Button ( \"Card 4\" ); b5 = new Button ( \"Card 5\" ); b1 . addActionListener ( this ); b2 . addActionListener ( this ); b3 . addActionListener ( this ); b4 . addActionListener ( this ); b5 . addActionListener ( this ); topPanel = new Panel (); topPanel . setLayout ( new FlowLayout ()); topPanel . add ( b1 ); topPanel . add ( b2 ); topPanel . add ( b3 ); topPanel . add ( b4 ); topPanel . add ( b5 ); add ( topPanel , BorderLayout . NORTH ); } public void actionPerformed ( ActionEvent ae ) { if ( ae . getSource () == b1 ) cl . show ( mainPanel , \"panel1\" ); else if ( ae . getSource () == b2 ) cl . show ( mainPanel , \"panel2\" ); else if ( ae . getSource () == b3 ) cl . show ( mainPanel , \"panel3\" ); else if ( ae . getSource () == b4 ) cl . show ( mainPanel , \"panel4\" ); else if ( ae . getSource () == b5 ) cl . show ( mainPanel , \"panel5\" ); else { int i ; boolean found = false ; for ( i = 0 ; i < btn . length ; i ++) { if ( ae . getSource () == btn [ i ]) { found = true ; break ; } } if ( found ) { System . out . println ( \"Button Clicked from panel : \" + btn [ i ]. getLabel ()); } } } } import java.awt.event.* ; class MyWindowAdapter extends WindowAdapter { public void windowClosing ( WindowEvent we ) { System . exit ( 0 ); } } ///Program 23: WAP to implement Dialog box. import java.awt.* ; import java.awt.event.* ; import java.applet.* ; /* <applet code=\"DialogDemo\" width =250 height = 250> </applet> */ class SampleDialog extends Dialog implements ActionListener { SampleDialog ( Frame parent , String title ) { super ( parent , title , false ); setLayout ( new FlowLayout ()); setSize ( 300 , 200 ); add ( new Label ( \"Press this button: \" )); Button b ; add ( b = new Button ( \"Cancel\" )); b . addActionListener ( this ); } public void actionPerformed ( ActionEvent ae ) { dispose (); } public void paint ( Graphics g ) { g . drawString ( \"This is in the dialog box\" , 10 , 70 ); } } class MenuFrame extends Frame { String msg = \"\" ; CheckboxMenuItem debug , test ; MenuFrame ( String title ) { super ( title ); MenuBar mbar = new MenuBar (); setMenuBar ( mbar ); //Menu Bar added on applet Menu file = new Menu ( \"File\" ); //Menu File is created MenuItem item1 , item2 , item3 , item4 , item5 ; //Menu items for File created file . add ( item1 = new MenuItem ( \"New...\" )); //Menu Items added in Menu file . add ( item2 = new MenuItem ( \"Open...\" )); file . add ( item3 = new MenuItem ( \"Close\" )); file . add ( item4 = new MenuItem ( \"-\" )); file . add ( item5 = new MenuItem ( \"Quit...\" )); mbar . add ( file ); // Menu File added on Menu Bar Menu edit = new Menu ( \"Edit\" ); //Menu Edit is created MenuItem item6 , item7 , item8 , item9 ; //Menu items for Edit created edit . add ( item6 = new MenuItem ( \"Cut\" )); //Menu Items added in Menu edit . add ( item7 = new MenuItem ( \"Copy\" )); edit . add ( item8 = new MenuItem ( \"Paste\" )); edit . add ( item9 = new MenuItem ( \"-\" )); Menu sub = new Menu ( \"Special\" , true ); //Menu Special is created MenuItem item10 , item11 , item12 ; //Menu items for Special created sub . add ( item10 = new MenuItem ( \"First\" )); //Menu Items added in Menu sub . add ( item11 = new MenuItem ( \"Second\" )); sub . add ( item12 = new MenuItem ( \"Third\" )); edit . add ( sub ); //Menu Special added in Edit Menu debug = new CheckboxMenuItem ( \"Debug\" ); edit . add ( debug ); test = new CheckboxMenuItem ( \"Testing\" ); edit . add ( test ); mbar . add ( edit ); //Menu Edit added on Menu Bar MyMenuHandler handler = new MyMenuHandler ( this ); //added a handler for menu item1 . addActionListener ( handler ); //added an Action Listener for each item item2 . addActionListener ( handler ); item3 . addActionListener ( handler ); item4 . addActionListener ( handler ); item5 . addActionListener ( handler ); item6 . addActionListener ( handler ); item7 . addActionListener ( handler ); item8 . addActionListener ( handler ); item9 . addActionListener ( handler ); item10 . addActionListener ( handler ); item11 . addActionListener ( handler ); item12 . addActionListener ( handler ); debug . addItemListener ( handler ); test . addItemListener ( handler ); MyWindowAdapter adapter = new MyWindowAdapter ( this ); addWindowListener ( adapter ); } public void paint ( Graphics g ) { g . drawString ( msg , 10 , 200 ); if ( debug . getState ()) g . drawString ( \"Debug is on...\" , 10 , 220 ); else g . drawString ( \"Debug is off...\" , 10 , 220 ); if ( test . getState ()) g . drawString ( \"Testing is on...\" , 10 , 240 ); else g . drawString ( \"Testing is off...\" , 10 , 240 ); } } class MyWindowAdapter extends WindowAdapter { MenuFrame menuFrame ; public MyWindowAdapter ( MenuFrame menuFrame ) { this . menuFrame = menuFrame ; } public void WindowClosing ( WindowEvent we ) { menuFrame . dispose (); } } class MyMenuHandler implements ActionListener , ItemListener { MenuFrame menuFrame ; public MyMenuHandler ( MenuFrame menuFrame ) { this . menuFrame = menuFrame ; } public void actionPerformed ( ActionEvent ae ) { String msg = \"You selected\" ; String arg =( String ) ae . getActionCommand (); if ( arg . equals ( \"New...\" )) { msg += \" New.\" ; SampleDialog d = new SampleDialog ( menuFrame , \"New Dialog Box\" ); d . setVisible ( true ); } else if ( arg . equals ( \"Open...\" )) msg += \" Open.\" ; else if ( arg . equals ( \"Close\" )) msg += \" Close.\" ; else if ( arg . equals ( \"Quit...\" )) msg += \" Quit.\" ; else if ( arg . equals ( \"Edit\" )) msg += \" Edit.\" ; else if ( arg . equals ( \"Cut\" )) msg += \" Cut.\" ; else if ( arg . equals ( \"Copy\" )) msg += \" Copy.\" ; else if ( arg . equals ( \"Paste\" )) msg += \" Paste.\" ; else if ( arg . equals ( \"First\" )) msg += \" First.\" ; else if ( arg . equals ( \"Second\" )) msg += \" Second.\" ; else if ( arg . equals ( \"Third\" )) msg += \" Third.\" ; else if ( arg . equals ( \"Debug\" )) msg += \" Debug.\" ; else if ( arg . equals ( \"Testing\" )) msg += \" Testing.\" ; menuFrame . msg = msg ; menuFrame . repaint (); } public void itemStateChanged ( ItemEvent ie ) { menuFrame . repaint (); } } public class DialogDemo extends Applet { Frame f ; public void init () { f = new MenuFrame ( \"Menu Demo\" ); int width = Integer . parseInt ( getParameter ( \"width\" )); int height = Integer . parseInt ( getParameter ( \"height\" )); setSize ( new Dimension ( width , height )); f . setSize ( width , height ); f . setVisible ( true ); } public void start () { f . setVisible ( true ); } public void stop () { f . setVisible ( false ); } } //Program 24: WAP to implement Smiley face Using applet. import java.awt.* ; import java.applet.* ; /*<APPLET CODE = Face.class WIDTH =250 HEIGHT = 200 > <param name=\"a\" value =10> <param name=\"b\" value =20> </APPLET>*/ public class Face extends Applet { public void paint ( Graphics g ) { String a ; String b ; String c ; a = getParameter ( \"a\" ); b = getParameter ( \"b\" ); int p = Integer . parseInt ( a ); int q = Integer . parseInt ( b ); int sum = p + q ; c = Integer . toString ( sum ); g . drawString ( \"First value :-\" + a , 10 , 210 ); g . drawString ( \"Second value :-\" + b , 10 , 230 ); g . drawString ( \"Total sum :-\" + c , 10 , 250 ); g . drawLine ( 10 , 212 , 130 , 212 ); g . drawLine ( 10 , 232 , 130 , 232 ); g . drawLine ( 10 , 252 , 130 , 252 ); Color c1 = new Color ( 25 , 0 , 0 ); setBackground ( c1 ); setForeground ( Color . green ); g . drawRect ( 200 , 160 , 100 , 50 ); g . fillRect ( 200 , 40 , 100 , 50 ); g . drawOval ( 40 , 40 , 120 , 150 ); g . drawOval ( 57 , 75 , 30 , 20 ); g . drawOval ( 110 , 75 , 30 , 20 ); g . fillOval ( 68 , 81 , 10 , 10 ); g . fillOval ( 121 , 81 , 10 , 10 ); g . drawOval ( 85 , 100 , 30 , 30 ); g . fillArc ( 60 , 125 , 80 , 40 , 180 , 180 ); g . drawOval ( 25 , 92 , 15 , 30 ); g . drawOval ( 160 , 92 , 15 , 30 ); } } //Program 25: WAP to create Frame that display the student information. import java.awt.* ; import java.awt.event.* ; public class Studentinfo { static StudFrame sf ; public static void main ( String args []) { sf = new StudFrame (); } } class mywindowadapter extends WindowAdapter { // StudFrame sf; // public mywindowadapter(StudFrame sf) // { // this.sf=sf; // } // public void windowClosing ( WindowEvent we ) { // sf.setVisible(false); System . exit ( 0 ); } } class StudFrame extends Frame implements ActionListener , ItemListener { Button b1 , b2 , b3 , b4 ; static TextField t1 , t2 ; static Choice c , c1 , c2 , cc ; static Label lh , l1 , l2 , l3 , l4 , l5 , l6 ; //static List lb; static Checkbox cb1 , cb2 ; static CheckboxGroup gndr = new CheckboxGroup (); StudFrame () { super ( \"Student Records Form\" ); //mywindowadapter mw=new mywindowadapter(this); addWindowListener ( new mywindowadapter ()); addcontrols (); setSize ( 700 , 550 ); setResizable ( true ); setVisible ( true ); } void addcontrols () { setLayout ( null ); lh = new Label ( \"Student Records\" ); l1 = new Label ( \"Student ID\" ); l2 = new Label (); l2 . setText ( \"Name\" ); l3 = new Label ( \"Gender\" ); l4 = new Label ( \"Age\" ); l5 = new Label ( \"Qualification\" ); l6 = new Label ( \"Course\" ); t1 = new TextField ( 8 ); t2 = new TextField ( 8 ); cb1 = new Checkbox ( \"Male\" , gndr , true ); cb2 = new Checkbox ( \"Female\" , gndr , false ); cc = new Choice (); for ( int i = 15 ; i <= 80 ; i ++) cc . add ( Integer . toString ( i )); c = new Choice (); c . add ( \"Under Graduate\" ); c . add ( \"Graduate\" ); c1 = new Choice (); c1 . add ( \"B.A.\" ); c1 . add ( \"B.B.A.\" ); c1 . add ( \"B.C.A.\" ); c1 . add ( \"B.Com\" ); c1 . add ( \"B.E./B.Tech\" ); c1 . add ( \"B.Pharma\" ); c1 . add ( \"B.Sc.\" ); c2 = new Choice (); c2 . add ( \"M.B.A.\" ); c2 . add ( \"M.C.A.\" ); c2 . add ( \"M.E./M.Tech\" ); b1 = new Button ( \"OK\" ); b2 = new Button ( \"Cancel\" ); b3 = new Button ( \"Reset\" ); b4 = new Button ( \"Exit\" ); lh . setBounds ( 100 , 30 , 100 , 30 ); l1 . setBounds ( 100 , 60 , 100 , 30 ); l2 . setBounds ( 100 , 90 , 100 , 30 ); l3 . setBounds ( 100 , 120 , 100 , 30 ); l4 . setBounds ( 100 , 150 , 100 , 30 ); l5 . setBounds ( 100 , 180 , 100 , 30 ); l6 . setBounds ( 100 , 210 , 100 , 30 ); t1 . setBounds ( 250 , 60 , 150 , 20 ); t2 . setBounds ( 250 , 90 , 150 , 20 ); cb1 . setBounds ( 250 , 120 , 40 , 20 ); cb2 . setBounds ( 310 , 120 , 60 , 20 ); cc . setBounds ( 250 , 150 , 150 , 20 ); c . setBounds ( 250 , 180 , 150 , 20 ); c1 . setBounds ( 250 , 210 , 150 , 20 ); c2 . setBounds ( 250 , 210 , 150 , 20 ); b1 . setBounds ( 500 , 90 , 100 , 35 ); b2 . setBounds ( 500 , 180 , 100 , 35 ); b3 . setBounds ( 125 , 290 , 100 , 35 ); b4 . setBounds ( 300 , 290 , 100 , 35 ); add ( lh ); add ( l1 ); add ( l2 ); add ( l3 ); add ( l4 ); add ( l5 ); add ( l6 ); add ( t1 ); add ( t2 ); add ( cb1 ); add ( cb2 ); add ( cc ); add ( c ); add ( c1 ); c1 . setVisible ( true ); add ( c2 ); c2 . setVisible ( false ); add ( b1 ); add ( b2 ); add ( b3 ); add ( b4 ); b1 . addActionListener ( this ); b2 . addActionListener ( this ); b3 . addActionListener ( this ); b4 . addActionListener ( this ); c . addItemListener ( this ); } public void actionPerformed ( ActionEvent ae ) { if ( ae . getSource ()== b1 ) { subframe s = new subframe ( \"Submission\" , \"Data entered successfully.\" ); String s1 = t1 . getText (); String s2 = t2 . getText (); if ( s1 . length ()== 0 || s1 . length ()== 0 ) { s . setSize ( 300 , 100 ); } else { s . setSize ( 350 , 350 ); } s . setVisible ( true ); StudentInfo . sf . setEnabled ( false ); } else if ( ae . getSource ()== b2 ) { subframe s = new subframe ( \"Cancellation\" , \"Data is not accepted(Cancellation done).\" ); s . setSize ( 300 , 100 ); s . setVisible ( true ); StudentInfo . sf . setEnabled ( false ); } else if ( ae . getSource ()== b3 ) { t1 . setText ( \"\" ); t2 . setText ( \"\" ); gndr . setSelectedCheckbox ( cb1 ); c . select ( 0 ); cc . select ( 0 ); c1 . select ( 0 ); c1 . setVisible ( true ); } else if ( ae . getSource ()== b4 ) { System . exit ( 0 ); } } public void itemStateChanged ( ItemEvent ie ) { String s = c . getSelectedItem (); if ( s == \"Under Graduate\" ) { c1 . setVisible ( true ); c2 . setVisible ( false ); } if ( s == \"Graduate\" ) { c1 . setVisible ( false ); c2 . setVisible ( true ); } } } class subwindowadapter extends WindowAdapter { subframe subf ; public subwindowadapter ( subframe subf ) { this . subf = subf ; } public void windowClosing ( WindowEvent we ) { StudentInfo . sf . setEnabled ( true ); subf . setVisible ( false ); } } class subframe extends Frame implements ActionListener { Button bsubok = new Button ( \"OK\" ); subframe () {} subframe ( String title ) {} subframe ( String title , String msg ) { super ( title ); String s1 = StudFrame . t1 . getText (); String s2 = StudFrame . t2 . getText (); subwindowadapter sw = new subwindowadapter ( this ); addWindowListener ( sw ); if ( title == \"Cancellation\" ) { // StudFrame.t1.setText(\"\"); // StudFrame.t2.setText(\"\"); setLayout ( new FlowLayout ( FlowLayout . CENTER )); add ( new Label ( msg )); add ( bsubok ); bsubok . addActionListener ( this ); } else { if ( s1 . length ()== 0 ) { //resize(300,100); setLayout ( new FlowLayout ( FlowLayout . CENTER )); add ( new Label ( \"Please fill in Student Name.\" )); add ( bsubok ); bsubok . addActionListener ( this ); } else if ( s2 . length ()== 0 ) { setLayout ( new FlowLayout ( FlowLayout . CENTER )); add ( new Label ( \"Please fill in Student Roll Number.\" )); add ( bsubok ); bsubok . addActionListener ( this ); } else //add(new Label(StudFrame.t1.getText() +\", Student ID: \"+StudFrame.t2.getText()+\" Accepted . \",Label.CENTER)); { setLayout(null); Label lhl,ll1,ll2,ll3,ll4,ll5,ll6,la1,la2,la3,la4,la5,la6,ltl; lhl=new Label(\" Your data is : \"); ll1=new Label(\" Student ID \"); ll2=new Label(); ll2.setText(\" Name \"); ll3=new Label(\" Gender \"); ll4=new Label(\" Age \"); ll5=new Label(\" Qualification \"); ll6=new Label(\" Course \"); ltl=new Label(msg); la1=new Label(StudFrame.t1.getText()); la2=new Label(); la2.setText(StudFrame.t2.getText()); la3=new Label(StudFrame.gndr.getSelectedCheckbox().getLabel()); la4=new Label(StudFrame.cc.getSelectedItem()); la5=new Label(StudFrame.c.getSelectedItem()); if(StudFrame.c.getSelectedItem()==\" Under Graduate \" ) la6 = new Label ( StudFrame . c1 . getSelectedItem ()); else la6 = new Label ( StudFrame . c2 . getSelectedItem ()); add ( lhl ); add ( ll1 ); add ( ll2 ); add ( ll3 ); add ( ll4 ); add ( ll5 ); add ( ll6 ); add ( la1 ); add ( la2 ); add ( la3 ); add ( la4 ); add ( la5 ); add ( la6 ); add ( ltl ); add ( bsubok ); lhl . setBounds ( 50 , 30 , 100 , 30 ); ll1 . setBounds ( 50 , 60 , 100 , 30 ); ll2 . setBounds ( 50 , 90 , 100 , 30 ); ll3 . setBounds ( 50 , 120 , 100 , 30 ); ll4 . setBounds ( 50 , 150 , 100 , 30 ); ll5 . setBounds ( 50 , 180 , 100 , 30 ); ll6 . setBounds ( 50 , 210 , 100 , 30 ); la1 . setBounds ( 200 , 60 , 100 , 30 ); la2 . setBounds ( 200 , 90 , 100 , 30 ); la3 . setBounds ( 200 , 120 , 100 , 30 ); la4 . setBounds ( 200 , 150 , 100 , 30 ); la5 . setBounds ( 200 , 180 , 100 , 30 ); la6 . setBounds ( 200 , 210 , 100 , 30 ); ltl . setBounds ( 75 , 240 , 200 , 30 ); bsubok . setBounds ( 100 , 280 , 100 , 30 ); bsubok . addActionListener ( this ); } } } public void actionPerformed ( ActionEvent ae ) { if ( ae . getSource ()== bsubok ) { StudentInfo . sf . setEnabled ( true ); setVisible ( false ); } } } //Program 26: WAP to implement System Clock. public class AWT1 { public static void main ( String args []) { MyFrame mf = new MyFrame (); } } import java.util.* ; import java.awt.* ; import java.awt.event.* ; class MyFrame extends Frame implements ItemListener , ActionListener { Choice c1 ; Button b1 ; Checkbox cb1 , cb2 , cb3 , cb4 ; CheckboxGroup cbg1 , cbg2 ; Label lblTime ; TimeThread tt ; MyFrame () { super ( \"Sample Java Frame\" ); addWindowListener ( new MyWindowAdapter ()); setSize ( 400 , 300 ); addControls (); setVisible ( true ); tt = new TimeThread ( this ); } private void addControls () { setLayout ( new FlowLayout ()); lblTime = new Label ( \"System Time Here\" ); add ( lblTime ); c1 = new Choice (); c1 . add ( \"Ajmer\" ); c1 . add ( \"Jaipur\" ); c1 . add ( \"Alwar\" ); c1 . add ( \"Nasirabad\" ); c1 . add ( \"Bikaner\" ); c1 . add ( \"Kishangarh\" ); c1 . add ( \"Beawar\" ); c1 . add ( \"Bundi\" ); c1 . add ( \"Kota\" ); c1 . add ( \"Nagur\" ); c1 . add ( \"Jodhpur\" ); c1 . add ( \"Pali\" ); c1 . addItemListener ( this ); add ( c1 ); b1 = new Button ( \"Click Me\" ); b1 . addActionListener ( this ); add ( b1 ); cbg1 = new CheckboxGroup (); cbg2 = new CheckboxGroup (); cb1 = new Checkbox ( \"DOS\" , true , cbg1 ); cb2 = new Checkbox ( \"Windows\" , cbg1 , true ); cb3 = new Checkbox ( \"Linux\" , cbg2 , false ); cb4 = new Checkbox ( \"Unix\" , cbg2 , false ); add ( cb1 ); add ( cb2 ); add ( cb3 ); add ( cb4 ); cb1 . addItemListener ( this ); cb2 . addItemListener ( this ); cb3 . addItemListener ( this ); cb4 . addItemListener ( this ); } public void itemStateChanged ( ItemEvent ie ) { if ( ie . getSource () == c1 ) { if ( c1 . getSelectedIndex () != - 1 ) { System . out . println ( c1 . getSelectedItem ()); System . out . println ( c1 . getSelectedIndex ()); } } else if ( ie . getSource () == cb1 ) { c1 . setEnabled ( cb1 . getState ()); } else if ( ie . getSource () == cb3 || ie . getSource () == cb4 ) { System . out . println ( \"Item Selected : \" + cbg2 . getSelectedCheckbox (). getLabel ()); } } public void actionPerformed ( ActionEvent ae ) { if ( ae . getSource () == b1 ) { int i ; for ( i = 0 ; i < c1 . getItemCount (); i ++) System . out . println ( c1 . getItem ( i )); } } String getTime () { Calendar cal = new GregorianCalendar (); int hour ; int minute ; int second ; hour = cal . get ( Calendar . HOUR ); minute = cal . get ( Calendar . MINUTE ); second = cal . get ( Calendar . SECOND ); String timeStr = hour + \":\" + minute + \":\" + second ; return timeStr ; } } class TimeThread extends Thread { MyFrame mf ; TimeThread ( MyFrame mf ) { this . mf = mf ; start (); } public void run () { while ( true ) { mf . lblTime . setText ( mf . getTime ()); try { Thread . sleep ( 970 ); } catch ( InterruptedException e1 ) { } } } } import java.awt.event.* ; class MyWindowAdapter extends WindowAdapter { public void windowClosing ( WindowEvent we ) { System . exit ( 0 ); } } //Program 27: WAP to implement Interthread Communication. class Consumer implements Runnable { Counter counter ; Thread t ; Consumer ( Counter counter ) { this . counter = counter ; t = new Thread ( this ); t . start (); } public void run () { int i ; while (( i = counter . getValue ()) < 50 ); } } class Counter { int value ; boolean valueSet ; Counter () { valueSet = false ; } synchronized void setValue ( int value ) { try { if ( valueSet == true ) { wait (); } this . value = value ; System . out . println ( \"Value produced : \" + value ); valueSet = true ; notify (); } catch ( InterruptedException e1 ){} } synchronized int getValue () { try { if ( valueSet == false ) { wait (); } System . out . println ( \"Value consumed : \" + value ); valueSet = false ; notify (); } catch ( InterruptedException e1 ){} return value ; } } class Producer implements Runnable { Counter counter ; Thread t ; Producer ( Counter counter ) { this . counter = counter ; t = new Thread ( this ); t . start (); } public void run () { int i ; for ( i = 1 ; i <= 50 ; i ++) counter . setValue ( i ); } } public class InterThreadComm { public static void main ( String args []) { Counter counter = new Counter (); Producer p = new Producer ( counter ); Consumer c = new Consumer ( counter ); } }","title":"Practicals"},{"location":"java/Scope/","text":"Scope of Variable Link The scope of a variable defines the section of the code inwhich the variable is visible. As a general rule, variables that are definedwithin a block are not accessible outside that block. The lifetime of avariable refers to how long the variable exists before it is destroyed.Destroying variables refers to deallocating the memory that was allotted to thevariables when declaring it. We have written a few classes till now. You mighthave observed that not all variables are the same. The ones declared in thebody of a method were different from those that were declared in the classitself. There are there types of variables: instance variables, formalparameters or local variables and local variables. The scope of a variable is the part of the program overwhich the variable name can be referenced. ike C/C++, in iuJava, allidentifiers are lexically (or statically) scoped, i.e., scope of a variable candetermined at compiler time and independent of function call stack. On a side note, unlike Java/C/C++, Perl supports bothdynamic ans static scoping. Perl\u2019s keyword \u201cmy\u201d defines a statically scopedlocal variable, while the keyword \u201clocal\u201d defines dynamically scoped localvariable i.e., scope depends on function call stack. Java programs are organized in the form of classes. Everyclass is part of some package. Java scope rules can be covered under following categories. 1. ****Member Variables (Class Level Scope) These variables must be declared inside class(outside any function). They can be directly accessed anywhere in class. Let\u2019stake a look at an example: public class Test { // All variables defined directly inside a class // are member variables int a; private String b void method1() {....} int method2() {....} char c; } \u00b7 We can declare class variables anywhere inclass, but outside methods. \u00b7 Access specified of member variables doesn\u2019teffect scope of them within a class. \u00b7 Member variables can be accessed outside a classwith following rules 2. ****Local Variables (Method Level Scope) Variables declared inside a method havemethod level scope and can\u2019t be accessed outside the method. public class Test { void method1() { // Local variable (Method level scope) int x; } } 3. ****Some Important Points about Variablescope in Java: o a set of curly brackets { } defines a scope. o In Java we can usually access a variable as longas it was defined within the same set of brackets as the code we are writing orwithin any curly brackets inside of the curly brackets where the variable wasdefined. o Any variable defined in a class outside of anymethod can be used by all member methods. o When a method has same local variable as amember, this keyword can be used to reference the current class variable. o For a variable to be read after the terminationof a loop, It must be declared before the body of the loop. You cannot refer to a variable before its declaration. You can declare variables in several different places: \u00b7 In a class body as class fields. Variablesdeclared here are referred to as class-level variables. \u00b7 As parameters of a method or constructor. \u00b7 In a method's body or a constructor's body. \u00b7 Within a statement block, such as inside a whileor for block. \u00b7 Variable scope refers to the accessibility of avariable. The rule 1 is that variables defined in a block are onlyaccessible from within the block. The scope of the variable is the block inwhich it is defined. For example, consider the following for statement.","title":"**Scope of Variable**"},{"location":"java/Scope/#scope-of-variable","text":"The scope of a variable defines the section of the code inwhich the variable is visible. As a general rule, variables that are definedwithin a block are not accessible outside that block. The lifetime of avariable refers to how long the variable exists before it is destroyed.Destroying variables refers to deallocating the memory that was allotted to thevariables when declaring it. We have written a few classes till now. You mighthave observed that not all variables are the same. The ones declared in thebody of a method were different from those that were declared in the classitself. There are there types of variables: instance variables, formalparameters or local variables and local variables. The scope of a variable is the part of the program overwhich the variable name can be referenced. ike C/C++, in iuJava, allidentifiers are lexically (or statically) scoped, i.e., scope of a variable candetermined at compiler time and independent of function call stack. On a side note, unlike Java/C/C++, Perl supports bothdynamic ans static scoping. Perl\u2019s keyword \u201cmy\u201d defines a statically scopedlocal variable, while the keyword \u201clocal\u201d defines dynamically scoped localvariable i.e., scope depends on function call stack. Java programs are organized in the form of classes. Everyclass is part of some package. Java scope rules can be covered under following categories. 1. ****Member Variables (Class Level Scope) These variables must be declared inside class(outside any function). They can be directly accessed anywhere in class. Let\u2019stake a look at an example: public class Test { // All variables defined directly inside a class // are member variables int a; private String b void method1() {....} int method2() {....} char c; } \u00b7 We can declare class variables anywhere inclass, but outside methods. \u00b7 Access specified of member variables doesn\u2019teffect scope of them within a class. \u00b7 Member variables can be accessed outside a classwith following rules 2. ****Local Variables (Method Level Scope) Variables declared inside a method havemethod level scope and can\u2019t be accessed outside the method. public class Test { void method1() { // Local variable (Method level scope) int x; } } 3. ****Some Important Points about Variablescope in Java: o a set of curly brackets { } defines a scope. o In Java we can usually access a variable as longas it was defined within the same set of brackets as the code we are writing orwithin any curly brackets inside of the curly brackets where the variable wasdefined. o Any variable defined in a class outside of anymethod can be used by all member methods. o When a method has same local variable as amember, this keyword can be used to reference the current class variable. o For a variable to be read after the terminationof a loop, It must be declared before the body of the loop. You cannot refer to a variable before its declaration. You can declare variables in several different places: \u00b7 In a class body as class fields. Variablesdeclared here are referred to as class-level variables. \u00b7 As parameters of a method or constructor. \u00b7 In a method's body or a constructor's body. \u00b7 Within a statement block, such as inside a whileor for block. \u00b7 Variable scope refers to the accessibility of avariable. The rule 1 is that variables defined in a block are onlyaccessible from within the block. The scope of the variable is the block inwhich it is defined. For example, consider the following for statement.","title":"Scope of Variable"},{"location":"java/Terminology/","text":"Java Terminology Basic Syntax about Java programs, it is very important to keep in mindthe following points. \u00b7 Case Sensitivity - Java is case sensitive,which means identifier Hello and hello would have different meaning in Java. \u00b7 Class Names - For all class names, the firstletter should be in Upper Case If several words are used to form a name ofthe class, each inner word's first letter should be in Upper Case. Example class MyFirstJavaClass \u00b7 Method Names - All method names should startwith a Lower Case letter. If several words are used to form the name ofthe method, then each inner word's first letter should be in Upper Case. Example public void myMethodName() \u00b7 Program File Name - Name of the program fileshould exactly match the class name. When saving the file, you should save itusing the class name (Remember Java is case sensitive) and append '.java' to the end of the name (if the filename and the class name do not match your program will not compile). Example : Assume 'MyFirstJavaProgram' is theclass name, then the file should be saved as'MyFirstJavaProgram.java' \u00b7 public static void main(String args[]) - Javaprogram processing starts from the main() method, which is a mandatory part ofevery Java program. Java Identifier \u00b7 All Java components require names. Names usedfor classes, variables and methods are called identifiers. \u00b7 In Java, there are several points to rememberabout identifiers. They are as follows: \u00b7 All identifiers should begin with a letter (Ato Z or a to z), currency character ($) or an underscore (_). \u00b7 After the first character, identifiers canhave any combination of characters. \u00b7 A keyword cannot be used as an identifier. \u00b7 Most importantly identifiers are casesensitive. \u00b7 Examples of legal identifiers:age, $salary,_value, __1_value \u00b7 Examples of illegal identifiers: 123abc,-salary Java Modifiers Like other languages, it is possible to modify classes,methods, etc., by using modifiers. There are two categories of modifiers: \u2022 Access Modifiers: default, public, protected, private \u2022 Non-access Modifiers: final, abstract, strictfp We will be looking into more details about modifiers inthe next section. Java Variables: We would see following type of variables in Java: \u2022 Local Variables \u2022 Class Variables (Static Variables) \u2022 Instance Variables (Non-static variables) **Java Arrays: ** Arrays are objects that store multiple variables of thesame type. However, an array itself is an object on the heap. We will look into how to declare, construct andinitialize in the upcoming chapters. **Java Enums: ** Enums were introduced in java 5.0. Enums restrict avariable to have one of only a few predefined values. The values in this enumerated list are called enums. With the use of enums, it is possible to reduce thenumber of bugs in your code. For example, if we consider an application for a freshjuice shop, it would be possible to restrict the glass size to small, medium and large. This would make sure that itwould not allow anyone to order any size other than the small, medium or large.","title":"Terminology"},{"location":"java/UnitI/","text":"Unit I Link An overview of Java: Object oriented programming, Two paradigms, abstraction, the, OOP principles, Java class libraries, variables, arrays, Data types and casting, Operators, operator precedence, Control statements. Introduction of Java Link Java is one of the world's most important and widely used computer languages, and it has held this distinction for many years. Unlike some other computer languages whose influence has weared with passage of time, while java's has grown. Java is related to C++, which is a direct descendant of C. Much of the character of Java is inherited from these two languages. From C, Java derives its syntax. Many of Java\u2019s object- oriented features were influenced by C++. In fact, several of Java\u2019s defining characteristics come from\u2014or are responses to\u2014its predecessors. Till today it is the first and best choice for developing console/web-based applications. Evolution of Java, Creation of Java, History of Java Link JAVA is a distributed technology developed by James Gosling, Patric Naugton, etc., at Sun Micro System has released lot of rules for JAVA and those rules are implemented by JavaSoft Inc, USA (which is the software division of Sun Micro System) in the year 1990. The original name of JAVA is OAK (which is a tree name). In the year 1995, OAK was revised and developed software called JAVA (which is a coffee seed name). James Ghosling, Patrick Naughton, Mike Sheridan initiated the Java language project in June 1991 at Sun Microsystems Inc. for use in one of his many set-top box projects. It took 18 months to develop the first working version. Thelanguage, initially called Oak after an oak tree that stood outside Gosling's office, also went by the name Green and ended up later being renamed as Java, from a list of random words. Java was initially launched as Java 1.0 as core component of Sun Microsystems\u2019 Java platform. Sun released the first public implementation as Java 1.0 in 1995. It promised Write Once, Run Anywhere (WORA), providing no-cost run-times on popular platforms. but soon after its initial release, Java 1.1 was launched. Java 1.1 redefined event handling, new library elements were added. In Java 1.2 Swing and Collection framework was added and suspend() , resume() and stop() methods were deprecated from Thread class. No major changes were made into Java 1.3 but the next release that was Java 1.4 contained several important changes.Keyword assert , chained exceptions and channel based I/O System was introduced. Java 1.5 was called J2SE 5, it added following major new features: \u00b7 Generics \u00b7 Annotations \u00b7 Autoboxingand autounboxing \u00b7 Enumerations \u00b7 For-each Loop \u00b7 Varargs \u00b7 Static Import \u00b7 Formatted I/O \u00b7 Concurrency utilities On 13 November 2006, Sun released much of Java as free and open source software under the terms of the GNU General Public License (GPL). On 8 May 2007, Sun finished the process, making all of Java's core code free andopen-source, aside from a small portion of code to which Sun did not hold the copyright. December 2008, the latest release of the Java Standard Edition is 6 (J2SE). With the advancement of Java and its widespread popularity, multiple configurations were built to suite various types of platforms. Ex: J2EE for Enterprise Applications, J2ME for Mobile Applications. Nextmajor release was Java SE 7 which included many new changes like : \u00b7 NowString can be used to control Swith statement. \u00b7 MultiCatch Exception \u00b7 try-with-resourcestatement \u00b7 BinaryInteger Literals \u00b7 Underscorein numeric literals. JAVA released to the market in three categories J2SE (JAVA 2 Standard Edition), J2EE (JAVA 2 Enterprise Edition) and J2ME (JAVA 2 Micro/Mobile Edition). J2SE is basically used for developing client side applications/programs. J2EE is used for developing server side applications/programs. J2ME is used for developing Mobile/PDA applications/programs If you exchange the data between client and server programs (J2SE and J2EE), by default JAVA is having on internal support with a protocol called http. J2ME is used for developing mobile applications and lower/system level applications. To develop J2ME applications we must use a protocol called WAP (Wireless Applications Protocol). Features of Java Link The prime reason behind creation of Java was to bring portability and security feature into a computer language. Beside these two major features, there were many other features that played an important role in moulding out the final form of this outstanding language. Those features are : Simple Platform independent Architectural neutral Portable Multi threading Distributed Networked Robust Dynamic Secured High performance Interpreted Object Oriented Programming Language Simple Link JAVA is simple because of the following factors: JAVA is free from pointers hence we can achieve less development time and less execution time [whenever we write a JAVA program we write without pointers and internally it is converted into the equivalent pointer program]. Rich set of API (application protocol interface) is available to develop any complex application. The software JAVA contains a program called garbage collector which is always used to collect unreferenced (unused) memory location for improving performance of a JAVA program. [Garbage collector is the system JAVA program which runs in the background along with regular JAVA program to collect unreferenced memory locations by running at periodical interval of times for improving performance of JAVA applications. JAVA contains user friendly syntax\u2019s for developing JAVA applications. Platform Independent Link A program or technology is said to be platform independent if and only if which can run on all available operating systems. Unlike many other programming languages including C and C++, when Java is compiled, it is not compiled into platform specific machine, rather into platform independent byte code. This byte code is distributed over the web and interpreted by virtual Machine (JVM) on whichever platform it is being run. On compilation Java program is compiled into bytecode. This bytecode is platform independent and can be run on any machine, plus this bytecode format also provide security. Any machine with Java Runtime Environment can run Java Programs. The languages like C, Cpp are treated as platform dependent languages since these languages are taking various amount of memory spaces on various operating systems [the operating system dos understands everything in the form of its native format called Mozart (MZ) whereas the operating system Unix understands everything in its negative format called embedded linking format (elf). When we write a C or Cpp program on dos operating and if we try to transfer that program to Unix operating system, we are unable to execute since the format of these operating systems are different and more over the C, Cpp software does not contain any special programs which converts one format of one operating system to another format of other operating system]. The language like JAVA will have a common data types and the common memory spaces on all operating systems and the JAVA software contains the special programs which converts the format of one operating system to another format of other operating system. Hence JAVA language is treated as platform independent language. [JAVA language is also treated as server independent language since the server side program can run on any of the server which is available in the real world (web server or application server). JAVA can retrieve or store the data in any one of the data base product which is available in rest world irrespective of their vendors (developers) hence JAVA language is product independent language. In order to deal with server side program from the client side, we can use C language client program, Cpp client program, DOT NET client program, etc. hence JAVA language is a simple, platform independent, server independent, data base/product independent and language independent programming language]. Architectural Neutral Link Java compiler generates an architecture-neutral object file format, which makes the compiled code to be executable on many processors, with the presence of Java runtime system. A language or technology is said to be processors in the real world. The language like JAVA can run on any of the processor irrespective of their vendor. Portable Link A portable language is one which can run on all operating systems and on all processors irrespective their architectures and providers. The language like C, Cpp are treated as nonportable languages whereas the language Java is called portable language Multi Threading Link With Java's multithreaded feature, it is possible to write programs that can do many tasks simultaneously. This design feature allows developers to construct smoothly running interactive applications. Benefit of multithreading is that it utilizes same memory and other resources to execute multiple threads at the same time, like While typing, grammatical errors are checked along. A flow of control is known as thread. A multi threaded program is one in which there exist multiple flow of controls ie. threads. A program is said to be multi threaded program programs if and only of there exist n number of subprograms. For each and every sub flow of controls. All such flow of controls are executing concurrently. such flow of controls is know as threads. Such type of applications is known as multi threading applications. The languages like C, Cpp are treated as threads as single threaded modeling languages(STML). STML are those in which there exists single flows of control. The languages like JAVA and DOT NET are traeted as multithreaded modeling languages(MTML). MTML are those in which there exist multiple flows of controls. Whenever we write a java program there exists by default two threads. They are foreground/child thread and background/main/parent thread. A foreground thread is one which always executes user defined sub program. In a java program there is a possibility of existing n number of foregrounds threads. A background thread is one which always monitors the status of foreground thread. In each and every JAVA program there exist only one background thread. Hence background thread will be created first and later foreground thread will be created Distributed Link Java is designed for the distributed environment of the internet. A service is a said to be a distributed service which runs in multiple servers and that service can be accessed by n number of clients across the globe. In order to develop we must require architecture called trusted network architecture.To develop these applications we require a technology called J2EE. A service is a said to be a can be accessed by n number of clients across the globe. In order to develop applications we must require architecture called applications we require a technology called scale organizations. J2SE (Core JAVA) Notes is known as thread. multi threaded program is one in which there exists multiple flow of controls multi threaded program if and only of there exists n number of sub programs. For each and every sub-program there exists a separate flow of control are executing concurrently. Such flow of controls is known as type of applications is known as multi threading applications. The languages like C, Cpp are treated as threads as single threaded modeling languages (STML). SMTL are those in which there exists single flow of control. JAVA and DOT NET are treated as multi threaded modeling languages (MTML). MTML are those in which there exist multiple flows of controls Whenever we write a JAVA program there exists by default two threads foreground/child thread and background/main/parent thread. is one which always executes user defined sub-programs. In a program there is a possibility of existing n number of foreground threads is one which always monitors the status of foreground thread program there exists only one background thread. background thread will be created first and later foreground thread A service is a said to be a distributed service which runs in multiple servers by n number of clients across the globe. In order to develop we must require architecture called trusted network architecture. To develop these applications we require a technology called J2EE. Distributed applications are preferr Page 6 multiple flow of controls i.e., threads. if and only of there exists n number of sub- flow of control. All such is known as threads. Such single threaded modeling languages d modeling languages multiple flows of controls. two threads. They are programs. In a JAVA foreground threads. foreground thread. In each foreground thread will be created. Networked Link In real world we have two types of networks. They are untrusted and trsuted networks. Un-trusted networks : A network is said to be untrusted network in which there exist n number of inter connected non-autonomous architecture. Untrusted network is also know as LAN. Using this network architecture , we develop centralized applications. A Centralized application is one which runs on single server and runs on single server and it can be access in limited graces. In order to develop centralized application we may use a technology called J2Se and these kinds of applications are preferred by small scale organization. 2. Trusted network: A network is said to be trusted network in which there exist n number of interconnected autonomous architecture. Trusted network is also know as a WAN. Using this network, we can develop distributed applications. and it can be access in unlimited graces. In order to develop distributed applications we may use a technology called J2EE and these kinds of applications are preferred by large scale organization. Dynamic Link Java is considered to be more dynamic than C or C++ since it is designed to adapt to an evolving environment. Java programs can carry extensive amount of run-time information that can be used to verify and resolve accesses to objects on run-time. Portable Link Being architectural-neutral and having no implementation dependent aspects of the specification makes Java portable. Compiler in Java is written in ANSI C with a clean portability boundary which is a POSIX subset. High Performance Link With the use of Just-In-Time compilers, Java enables high performance. Interpreted Link Java byte code is translated on the fly to native machine instructions and is not stored anywhere. The development process is more rapid and analytical since the linking is an incremental and lightweight process. Secure Link With Java's secure feature, it enables to develop virus-free, tamper-free systems. Authentication techniques are based on public-key encryption. Object Oriented Link In Java, everything is an Object. Java can be easily extended since it is based on the Object model. Robust Link Java makes an effort to eliminate error prone situations by emphasizing mainly on compile time error checking and runtime checking. Java makes an effort to eliminate error prone codes by emphasizing mainly on compile time error checking and runtime checking. But the main areas which Java improved were Memory Management and mishandled Exceptions by introducing automatic Garbage Collector and Exception Handling. Difference in C and Java Link **J**ava is look like C but majordifference is object oriented concept and mechanism of define classes andobjects C Properties Java C is procedural Programming JAVA is Object-Oriented Sizeof, typedef, struct, union Keywords Don\u2019t have Auto, extern, register, signed, unsigned Type modifiers No C requires explicit handling of pointers Pointer Not support explicit pointers #define, #include Pre-processor directive No pre-processor C is a compiled language. Type of language Java is an Interpreted language C is a low-level language Levels JAVA is a high-level language C uses the top-down {sharp & smooth} approach Approach JAVA uses the bottom-up {on the rocks} approach User-Based Memory Management in C. Memory Management Memory Management with JAVA C does not support overloading Overloading Method Overloading errors & crashes in C Error Handling Exception Handling in JAVA Allowed Variable length arguments No variable-length argument lists C requires local variable declarations to be made at the beginning of a method or block Variable declaration Java allows them anywhere in a method or block Difference in Java and C++ Link Properties C++ Java platform independent C++ is depends upon operating system machine**** Support Compiler and interpreter Compiler Both multiple Inheritance Support Not Support Operator Overloading Support Not Support template class Support Not Support Global Variables Support Not Support Preprocessor Directive Support Not Support Global Variables Support Not Support Pointers Support Not Support, Java support restricted pointers Thread Not Support Support Internet Not Support Support Function Destructor function finalized function Function Parameter Call by Value and Address Call By Value Only C, C++ and Java Link Aspects C C++ Java Developed Year 1972 1979 1991 Developed By Dennis Ritchie Bjarne Stroustrup James Gosling Successor of BCPL C C(Syntax) & C++ (Structure) Paradigms Procedural Object Oriented Object Oriented Platform Dependency Dependent Dependent Independent Keywords 32 63 50 defined (goto, const unusable) Datatypes : union, structure Supported Supported Not Supported Pre-processor directives Supported (#include, #define) Supported (#include, #define) Not Supported Header files Supported Supported Use Packages (import) Inheritance No Inheritance Supported Multiple Inheritance not Supported Overloading No Overloading Supported Operator Overloading not Supported Pointers Supported Supported No Pointers Code Translation Compiled Compiled Interpreted Storage Allocation Uses malloc, calloc Uses new , delete uses garbage collector Multi-threading and Interfaces Not Supported Not Supported Supported Exception Handling No Exception handling Supported Supported Templates Not Supported Supported Not Supported Storage class: auto, extern Supported Supported Not Supported Destructors No Constructor or Destructor Supported Not Supported Database Connectivity Not Supported Not Supported Supported Application of Java Link Java is widely used in every corner of world and of human life. Java is not only used in software\u2019s but is also widely used in designing hardware controlling software components. There are more than 930 million JRE downloads each year and 3 billion mobile phones run java. Following are some other usage of Java : Developing Desktop Application Web Applications like LinkedIn Mobile OS like Android Embedded System Robotics and games etc. How to create JAVA program For creating java program you install jdk toolbox and configure properly according to system then use any ASCII text Editor and following steps. Create a MyFirstJavaProgram.java Open notepad and add the code as above. Save thefile as: MyFirstJavaProgram.java. Open acommand prompt window and go o the directory where you saved the class. Assumeit's C:. Type 'javac MyFirstJavaProgram.java ' and press enter to compile your code. If thereare no errors in your code, the command prompt will take you to the nextline(Assumption : The path variable is set). Now, type' java MyFirstJavaProgram ' to run your program. You willbe able to see ' Hello World ' printed on the window. public class MyFirstJavaProgram { /* This is my first java program. \\* This will print 'Hello World' as the output */ public static void main ( String [] args ) { System . out . println ( \"HelloWorld\" ); // prints Hello World } } //For Output C: > javac MyFirstJavaProgram . java C: > java MyFirstJavaProgram HelloWorld Difference between class and object Properties Class Object A class is a way of binding the data and associated methods in a single unit Class variable is knows as an object Whenever we start executing a JAVA program, the class will be loaded into main memory with the help of class loader subsystem(a part of JVM) only once After loading the class into main memory, objects can be created in n number. When the class id defined there is no memory space for data members of a class When an object is created we get the memory space for data members of the class Operators Link Java has well-defined rules for specifying the order in which the operators in an expression are evaluated when the expression has several operators. For example, multiplication and division have a higher precedence than addition and subtraction. Precedence rules can be overridden by explicit parentheses. Precedence order When two operators share an operand the operator with the higher precedence goes first. For example, 1 + 2 * 3 is treated as 1 + (2 * 3), whereas 1 * 2 + 3 is treated as (1 * 2) + 3 since multiplication has a higher precedence than addition. Associativity When an expression has two operators with the same precedence, the expression is evaluated according to its associativity. For example x = y = z = 17 is treated as x = (y = (z = 17)), leaving all three variables with the value 17, since the = operator has right-to-left associativity (and an assignment statement evaluates to the value on the right hand side). On the other hand, 72 / 2 / 3 is treated as (72 / 2) / 3 since the / operator has left-to-right associativity. Precedence and associativity of Java operators The table below shows all Java operators from highest to lowest precedence, along with their associativity. Most programmers do not memorize them all, and even those that do still use parentheses for clarity. Order of evaluation of subexpressions Associativity and precedence determine in which order Java applies operators to subexpressions but they do not determine in which order the subexpressions are evaluated. In Java, subexpressions are evaluated from left to right (when there is a choice). So, for example in the expression A() + B() * C(D(), E()), the subexpressions are evaluated in the order A(), B(), D(), E(), and C(). Although, C() appears to the left of both D() and E(), we need the results of both D() and E() to evaluate C(). It is considered poor style to write code that relies upon this behavior (and different programming languages may use different rules). Short circuiting When using the conditional and and or operators (&& and ||), Java does not evaluate the second operand unless it is necessary to resolve the result. This allows statements like if (s != null && s.length() < 10) to work reliably. Programmers rarely use the non short-circuiting versions (& and |) with boolean expressions. Precedence order gone awry Sometimes the precedence order defined in a language do not conform with mathematical norms. For example, in Microsoft Excel, -a^b is interpreted as (-a)^b instead of -(a^b). So -1^2 is equal to 1 instead of -1, which is the values most mathematicians would expect. Microsoft acknowledges this quirk as a \"design choice\". One wonders whether the programmer was relying on the C precedence order in which unary operators have higher precedence than binary operators. This rule agrees with mathematical conventions for all C operators, but fails with the addition of the exponentiation operator. Once the order was established in Microsoft Excel 2.0, it could not easily be changed without breaking backward compatibility. Operator Description Level Associativity [] . () ++ -- access array element access object member invoke a method post-increment post-decrement 1 left to right ++ -- + - ! ~ pre-increment pre-decrement unary plus unary minus logical NOT bitwise NOT 2 right to left () new cast object creation 3 right to left * / % multiplicative 4 left to right + - + additive string concatenation 5 left to right << >> >>> shift 6 left to right < <= > >= instance of relational type comparison 7 left to right == != equality 8 left to right & bitwise AND 9 left to right ^ bitwise XOR 10 left to right | bitwise OR 11 left to right && conditional AND 12 left to right || conditional OR 13 left to right ?: conditional 14 right to left = += -= *= /= %= &= ^= |= <<= >>= >>>= assignment 15 Cast Conversion/Type casting/boxing-unboxing-autoboxing Link Java language specification (SE7-JLS-5.0) uses the word \u2018conversion\u2019 as a superset for anything and everything related to transforming objects. The word \u2018cast\u2019 is used at places where the developer needs to explicitly tell the compiler that the instance value needs to be converted. Attaching the cast-operator (a type between parentheses), before an object is referred as cast. type-safety in Java Link Type-safety is the mechanism provided in a programming language to ensure that there are no issues because of type mismatch between a variable and value attempted to store in it. In Java to ensure type-safety, during compile time the compiler will check for type information between variables using the static type information available. Then during runtime the values are checked for compatibility before storing in a variable. As per Java language specification (SE7-JLS-5.0) conversions are broadly categorized as, Identity conversions Widening primitive conversions Narrowing primitive conversions Widening reference conversions Narrowing reference conversions Boxing conversions Unboxing conversions Unchecked conversions Capture conversions String conversions Value set conversions Identity Conversion Link This is given for theoretical completeness. Assigning two instance of same type is identity conversion. Integer i1 ; Integer i2 = new Integer ( 2 ); i1 = i2 ; //identity conversion // cast not required, but done compiler will not complain i1 = ( Integer ) i2 ; Primitive Conversions and Type Cast in Java Link Assigning a value of one type to a variable of another type is known as Type Casting. When the data is converted from one data type to another data type, then it is called type casting. Type casting is nothing but changing the type of the data. Using type casting, only type of the data can be changed but not the data itself. Example : int x = 10 ; byte y = ( byte ) x ; In Java, type casting is classified into two types, Widening Casting(Implicit) Narrowing Casting(Explicitly done) Widening Primitive Conversion or Automatic type conversion Link Automatic Type casting take place when, the two types are compatible the target type is larger than the source type. \u201cA widening primitive conversion does not lose information about the overall magnitude of a numeric value.\u201d There is no cast required and will never result in a runtime exception. Following are the possible widening conversions, byte to short, int, long, float, or double short to int, long, float, or double char to int, long, float, or double int to long, float, or double long to float or double float to double Example: public class Test { public static void main ( String [] args ) { int i = 100 ; long l = i ; //no explicit type casting required float f = l ; //no explicit type casting required System . out . println ( \"Int value \" + i ); System . out . println ( \"Long value \" + l ); System . out . println ( \"Float value \" + f ); } } Output : Int value 100 Long value 100 Float value 100.0 /*------------------------------*/ class WideningConversion { public static void main ( String [] args ) { int i = 123456789 ; float f = i ; } } Narrowing or Explicit type conversion Link When you are assigning a larger type value to a variable of smaller type, then you need to perform explicit type casting. \u201cA narrowing primitive conversion may lose information about the overall magnitude of a numeric value and may also lose precision and range.\u201d Cast required between types. Overflow and underflow may happen but a runtime exception will never happen. Following are the possible narrowing conversions, short to byte or char char to byte or short int to byte, short, or char long to byte, short, char, or int float to byte, short, char, int, or long double to byte, short, char, int, long, or float Example : public class Test { public static void main ( String [] args ) { double d = 100.04 ; long l = ( long ) d ; //explicit type casting required int i = ( int ) l ; //explicit type casting required System . out . println ( \"Double value \" + d ); System . out . println ( \"Long value \" + l ); System . out . println ( \"Int value \" + i ); } } Output : Double value 100.04 Long value 100 Int value 100 /*------------------------------------------------*/ public class NarrowingPrimitiveConversion { public static void main ( String [] args ) { float f = Float . POSITIVE_INFINITY ; long l = ( long ) f ; int i = ( int ) f ; System . out . println ( \"long: \" + l + \" int: \" + i ); int j = 255 ; byte b = ( byte ) j ; // size is too large and resulted in negative System . out . println ( b ); } } Reference Conversions and Cast in Java Link In this section let us see about categories, widening reference conversion and narrowing reference conversion. With respect to classes and objects, there are four categories to understand for casting. Assigning a Float object to Integer directly has got nothing to do with casting and it will throw a compile error as incompatible type. Casting a Float into Integer is not proper and will get compile error as inconvertible types. Casting in Java is done within same hierarchy of types, that is between inherited types. upcast \u2013 Casting a subtype object into a supertype and this is called upcast. In Java, we need not add an explicit cast and you can assign the object directly. Compiler will understand and cast the value to supertype. By doing this, we are lifting an object to a generic level. If we prefer, we can add an explicit cast and no issues. downcast \u2013 Casting a supertype to a subtype is called downcast. This is the mostly done cast. By doing this we are telling the compiler that the value stored in the base object is of a super type. Then we are asking the runtime to assign the value. Because of downcast we get access to methods of the subtype on that object. ClassCastExcpetion \u2013 We get ClassCastException in a downcast. In principle, we guarantee the compiler that the instance value of is subtype and ask it to cast. But during runtime, because of unforeseen circumstances, the value is not of expected subtype. In such cases, we get ClassCastException. Autoboxing and Unboxing in Java Link Converting from a primitive type to its corresponding reference type is boxing conversion and vice versa is Unboxing conversion. Examples are, From primitive boolean to type Boolean From primitive int to type Integer int i = 10 ; Integer iObj = new Integer ( 100 ); iObj = i ; //boxing conversion i = iObj ; //unboxing conversion **Autoboxing: **Converting a primitive value into an object of the corresponding wrapper class is called autoboxing. For example, converting int to Integer class. The Java compiler applies autoboxing when a primitive value is: Passed as a parameter to a method that expects an object of the corresponding wrapper class. Assigned to a variable of the corresponding wrapper class . Unboxing: Converting an object of a wrapper type to its corresponding primitive value is called unboxing. For example conversion of Integer to int. The Java compiler applies unboxing when an object of a wrapper class is: Passed as a parameter to a method that expects a value of the corresponding primitive type. Assigned to a variable of the corresponding primitive type . The following table lists the primitive types and their corresponding wrapper classes, which are used by the Java compiler for autoboxing and unboxing: // Java program to illustrate the concept // of Autoboxing and Unboxing` import java.io.* ; class GFG { public static void ` ` main ( String [] args ) ` ` `` { ` ` `` // creating an Integer Object` ` `` // with value 10.` ` `` Integer i = `` new ` ` Integer ( `` 10 `` ); ` ` `` // unboxing the Object` ` `` int ` ` i1 = i ; ` ` `` System . out . println ( `` \"Value of i: \" ` ` + i ); ` ` `` System . out . println ( `` \"Value of i1: \" ` ` + i1 ); ` ` `` //Autoboxing of char` ` `` Character gfg = `` 'a' `` ; ` ` `` // Auto-unboxing of Character` ` `` char ` ` ch = gfg ; ` ` `` System . out . println ( `` \"Value of ch: \" ` ` + ch ); ` ` `` System . out . println ( `` \"Value of gfg: \" ` ` + gfg ); ` ` `` } ` ` } ` Value of i: 10 Value of i1: 10 Value of ch: a Value of gfg: a //Another example to understand how compiler did autoboxing and unboxing in the example of Collections in java using generics. /* Java program to illustrate autoboxing */ import java.io.* ; import java.util.* ; class GFG { public static void main ( String [] args ) { /* Here we are creating a listof elements of Integer type. adding the int primitives type values */ List < Integer > list = new ArrayList < Integer >(); for ( int i = 0 ; i < 10 ; i ++) list . add ( i ); } } In above example we have created a list of elements of Integer type. We are adding int primitive type values instead of Integer Object and the code successfully compiled. It does not generate a compile time error as java compiler create Integer wrapper Object from primitive int i and adds it to the list. See the following example for, How it converts\u2026 /* Java program to illustrate autoboxing */ `` import ` ` java . io .*; `` import ` ` java . util .*; ` ` class ` ` GFG `` { `` `` public ` ` static ` ` void ` ` main ( String [] args ) `` `` { `` `` /* Here we are creating a list of elements`` ``of Integer type. Adding the int primitives`` ``type values by converting them into Integer`` ``wrapper Object*/ `` `` List < Integer > list = `` new ` ` ArrayList < Integer >(); `` `` for ` ` ( `` int ` ` i = `` 0 `` ; i < `` 10 `` ; i ++) `` `` list . add ( Integer . valueOf ( i )); ` ` `` } `` } ` Another example of auto and unboxing is to find sum of odd numbers in a list. Important point in the program is that the operators remainder (%) and unary plus (+=) operators do not apply to Integer objects. But still code compiles successfully because the unboxing of Integer Object to primitive int value is taking place by invoking intValue() method at runtime. //Java program to illustrate find sum of odd numbers using autobxing and unboxing import java.io.* ; import java.util.* ; class GFG { public static int sumOfOddNumber ( List < Integer > list ) { int sum = 0 ; for ( Integer i : list ) { // unboxing of i automatically if ( i % 2 != 0 ) sum += i ; /* unboxing of i is done automatically using intvalue implicitly */ if ( i . intValue () % 2 != 0 ) sum += i . intValue (); } return sum ; } public static void main ( String [] args ) { /* Here we are creating a list of elements of Integer type and adding the int primitives type values to the list*/ List < Integer > list = new ArrayList < Integer >(); for ( int i = 0 ; i < 10 ; i ++) list . add ( i ); // getting sum of all odd no. in the list. int sumOdd = sumOfOddNumber ( list ); System . out . println ( \"Sum of odd numbers = \" + sumOdd ); } } Output: Sum of odd numbers = 25 Advantages of Autoboxing / Unboxing: Autoboxing and Unboxing lets developers write cleaner code, making it easier to read. The technique let us use primitive types and Wrapper class objects interchangeably and we do not need to perform any typecasting explicitly. String Conversion Link String conversion applies only to the \u2018+\u2019 operator, when one operand is a String and another is a primitive type. In such a case, primitive type is converted to its corresponding reference type and then it is converted using the toString() method. No cast is required. int i = 10 ; String str1 = \"\" ; String str2 = str1 + i ; //string conversion Unchecked and Capture Conversion will be discussed in the next tutorial as part of the generics series. Questions Link Difference between casting and autoboxing What are the types of casting. There are two types of casting. Primitive Casting : When the data is casted from one primitive type ( like int, float, double etc\u2026 ) to another primitive type, then it is called Primitive Casting. Derived Casting : When the data is casted from one derived type to another derived type, then it is called derived casting. What is auto widening and explicit narrowing.? The data is implicitly casted from small sized primitive type to big sized primitive type. This is called auto-widening. i.e The data is automatically casted from byte to short, short to int, int to long, long to float and float to double. You have to explicitly cast the data from big sized primitive type to small sized primitive type. i.e you have to explicitly convert the data from double to float, float to long, long to int, int to short and short to byte This is called explicit narrowing. What is auto-up casting and explicit down casting.? An object of sub class type can be automatically casted to super class type. This is called auto-up casting. An object of super class type should be explicitly casted to sub class type, It is called explicit down casting. Can an int primitive type of data implicitly casted to Double derived type.? Yes, first int is auto-widened to double and then double is auto-boxed to Double. What is ClassCastException.? ClassCastException is an exception which occurs at run time when an object of one type can not be casted to another type. How do you avoid ClassCastException in your code.? By using generics, you can avoid ClassCastException. (Click here to see how you can avoid ClassCastException Using generics.) What is boxing and unboxing.? Wrapping of primitive content into corresponding wrapper class object is called boxing. Unwrapping the wrapper class object into corresponding primitive content is called un boxing. What is the difference between auto-widening, auto-upcasting and auto-boxing.?** Auto-widening occurs when small sized primitive type is casted to big sized primitive type. Auto-up casting occurs when sub class type is casted to super class type. Auto-boxing occurs when primitive type is casted to corresponding wrapper class. What are the priorities of auto-widening, auto-upcasting and auto-boxing.? Java Environment Link Tools JDK Tools you will need Link For performing the java program, you will need a hardware and Software Hardware Processor : Pentium200-MHz computer Memory : minimumof 64 MB of RAM (128 MB of RAM recommended). Software You also will need the following software\u2019s: Operating System Linux or Windows 95/98/2000/XP operating system. Java JDK Microsoft Notepad or any other ASCII text editor Download JDK Link For running Java programs in your system, you will have to download and install JDK kit from here ( http://www.oracle.com/technetwork/java/javase/downloads/index.html ) (current version is jdk 1.7). Setting Class path Link Java is freely available on Oracle's Website. Download the latest version of JDK () (Java Development Kit) on your operating system. Install JDK on your machine. Once you have installed Java on your machine you would need to set environment variable to point to correct installation directory. Setting up path for windows ( 2000/XP/vista/Window 7,8 ) Assuming that you have installed Java in C: Program files/ Java / JDK directory Step 1: Right click on my computer and select properties. Step 2: Go to the Advance System Settings tab. Step 3: Click on Environment Variables button. Step 4: Now alter the path variable so that it also contains the path to JDK installed directory. For e.g:- Change C:\\windows/ system 32. to C:\\windows/system 32; C:\\program files / Java/ JDK. Setting up path for Linux , Unix , Solaris, free BSD Assuming that you have installed Java in /home/java/JDK directory, do the following: Step 1: Environment variable path should be set to point where java binaries have been installed. Refer to your shell if you have trouble doing this. For Example: If you use bash as your shell, then you would add following line to the end bash mc: export PATH=/ Path/to/java Popular Java Editors Link To write your Java programs, you will need a text editor. There are even more sophisticated IDEsavailable in the market. But for now,you can consider one of the following: Notepad: On Windows machine, you can use any simple text editor like Notepad (Recommended for this tutorial), TextPad. Netbeans : Isa Java IDE that is open-source and free which can be downloaded from http://www.netbeans.org/index.html . Eclipse:Is also a Java IDE developed by the eclipse open-source community and can be downloaded from http://www.eclipse.org/ . Java Development Kit(JDK) Link Java is a recently developed, concurrent, class-based, object-oriented programming and runtime environment, consisting of: A programming language An API specification A virtual machine specification The JDK has as its primary components a collection of programming tools,including: appletviewer\u2013 this tool can be used to run and debug Java applets without a web browser apt \u2013 theannotation-processing tool extcheck\u2013 a utility that detects JAR file conflicts idlj \u2013the IDL-to-Java compiler. This utility generates Java bindings from a givenJava IDL file. jabswitch\u2013 the Java Access Bridge. Exposes assistive technologies on Microsoft Windows systems. java \u2013the loader for Java applications. This tool is an interpreter and can interpretthe class files generated by the javaccompiler. Now a single launcher is used for both development and deployment.The old deployment launcher, jre, no longer comes with Sun JDK, and instead ithas been replaced by this new java loader. javac \u2013the Java compiler, which converts source code into Java bytecode javadoc \u2013the documentation generator, which automatically generates documentation fromsource code comments jar \u2013 thearchiver, which packages related class libraries into a single JAR file. Thistool also helps manage JAR files. javafxpackager\u2013 tool to package and sign JavaFX applications jarsigner\u2013 the jar signing and verification tool javah \u2013the C header and stub generator, used to write native methods javap \u2013the class file disassembler javaws \u2013the Java Web Start launcher for JNLP applications JConsole\u2013 Java Monitoring and Management Console jdb \u2013 thedebugger jhat\u2013Java Heap Analysis Tool (experimental) jinfo \u2013This utility gets configuration information from a running Java process orcrash dump. (experimental) jmap \u2013This utility outputs the memory map for Java and can print shared object memorymaps or heap memory details of a given process or core dump. (experimental) jmc \u2013Java Mission Control jps \u2013Java Virtual Machine Process Status Tool lists the instrumented HotSpot JavaVirtual Machines (JVMs) on the target system. (experimental) jrunscript\u2013 Java command-line script shell. jstack \u2013utility that prints Java stack traces of Java threads (experimental) jstat \u2013Java Virtual Machine statistics monitoring tool (experimental) jstatd \u2013 jstatdaemon (experimental) keytool \u2013tool for manipulating the keystore pack200 \u2013JAR compression tool policytool\u2013 the policy creation and management tool, which can determine policy for a Java runtime, specifying which permissions are available for code from various sources VisualVM\u2013 visual tool integrating several command-line JDK tools and light weight[clarification needed] performance and memory profiling capabilities wsimport\u2013 generates portable JAX-WS artifacts for invoking a web service. xjc \u2013 Partof the Java API for XML Binding (JAXB) API. It accepts an XML schema andgenerates Java classes. The JDK also called Java Development Kit is a super set of the JRE, and contains everything that is in the JRE, plus tools such as the compilers and debuggers necessary for developing applets and applications. Java Runtime Environment JRE Link The JRE is the software environment in which programs compiled for a typical JVM implementation can run. The runtime system includes: Code necessary to run Java programs, dynamically link native methods, manage memory, and handle exceptions Implementation of the JVM The following figure shows the JRE and its components, including a typical JVM implementation's various modules and its functional position with respect to the JRE and class libraries. The Java Runtime Environment (JRE) provides the libraries, the Java Virtual Machine, and other components to run applets and applications written in the Java programming language. JRE does not contain tools and utilities such as compilers or debuggers for developing applets and applications. Java Virtual Machine (JVM) Link Java virtual Machine(JVM) is a virtual Machine that provides runtime environment to execute java byte code. The JVM doesn't understand Java typo, that's why you compile your *.java files to obtain *.class files that contain the bytecodes understandable by the JVM. JVM control execution of every Java program. It enables features such as automated exception handling, Garbage-collected heap. The JVM is an abstract computing machine, having an instruction set that uses memory. Virtual machines are often used to implement a programming language. The JVM is the cornerstone of the Java programming language. It is responsible for Java's cross-platform portability and the small size of its compiled code. The Solaris JVM is used to execute Java applications. The Java compiler, javac, outputs bytecodes and puts them into a .class file. The JVM then interprets these bytecodes, which can then be executed by any JVM implementation, thus providing Java's cross-platform portability. The next two figures illustrate the traditional compile-time environment and the new portable Java compile-time environment. Sun Just-In-Time (JIT) Compiler Link The Sun Java JIT compiler, an integral part of the Solaris JVM, can accelerate execution performance many times over previous levels. Long-running, compute-intensive programs show the best performance improvement. JIT Compile Process Link When the JIT compiler environment variable is on (the default), the JVM reads the .class file for interpretation and passes it to the JIT compiler. The JIT compiler then compiles the bytecodes into native code for the platform on which it is running. The next figure illustrates the JIT compile process. Object Oriented Concepts Link","title":"Unit I"},{"location":"java/UnitI/#unit-i","text":"An overview of Java: Object oriented programming, Two paradigms, abstraction, the, OOP principles, Java class libraries, variables, arrays, Data types and casting, Operators, operator precedence, Control statements.","title":"Unit I"},{"location":"java/UnitI/#introduction-of-java","text":"Java is one of the world's most important and widely used computer languages, and it has held this distinction for many years. Unlike some other computer languages whose influence has weared with passage of time, while java's has grown. Java is related to C++, which is a direct descendant of C. Much of the character of Java is inherited from these two languages. From C, Java derives its syntax. Many of Java\u2019s object- oriented features were influenced by C++. In fact, several of Java\u2019s defining characteristics come from\u2014or are responses to\u2014its predecessors. Till today it is the first and best choice for developing console/web-based applications.","title":"Introduction of Java"},{"location":"java/UnitI/#evolution-of-java-creation-of-java-history-of-java","text":"JAVA is a distributed technology developed by James Gosling, Patric Naugton, etc., at Sun Micro System has released lot of rules for JAVA and those rules are implemented by JavaSoft Inc, USA (which is the software division of Sun Micro System) in the year 1990. The original name of JAVA is OAK (which is a tree name). In the year 1995, OAK was revised and developed software called JAVA (which is a coffee seed name). James Ghosling, Patrick Naughton, Mike Sheridan initiated the Java language project in June 1991 at Sun Microsystems Inc. for use in one of his many set-top box projects. It took 18 months to develop the first working version. Thelanguage, initially called Oak after an oak tree that stood outside Gosling's office, also went by the name Green and ended up later being renamed as Java, from a list of random words. Java was initially launched as Java 1.0 as core component of Sun Microsystems\u2019 Java platform. Sun released the first public implementation as Java 1.0 in 1995. It promised Write Once, Run Anywhere (WORA), providing no-cost run-times on popular platforms. but soon after its initial release, Java 1.1 was launched. Java 1.1 redefined event handling, new library elements were added. In Java 1.2 Swing and Collection framework was added and suspend() , resume() and stop() methods were deprecated from Thread class. No major changes were made into Java 1.3 but the next release that was Java 1.4 contained several important changes.Keyword assert , chained exceptions and channel based I/O System was introduced. Java 1.5 was called J2SE 5, it added following major new features: \u00b7 Generics \u00b7 Annotations \u00b7 Autoboxingand autounboxing \u00b7 Enumerations \u00b7 For-each Loop \u00b7 Varargs \u00b7 Static Import \u00b7 Formatted I/O \u00b7 Concurrency utilities On 13 November 2006, Sun released much of Java as free and open source software under the terms of the GNU General Public License (GPL). On 8 May 2007, Sun finished the process, making all of Java's core code free andopen-source, aside from a small portion of code to which Sun did not hold the copyright. December 2008, the latest release of the Java Standard Edition is 6 (J2SE). With the advancement of Java and its widespread popularity, multiple configurations were built to suite various types of platforms. Ex: J2EE for Enterprise Applications, J2ME for Mobile Applications. Nextmajor release was Java SE 7 which included many new changes like : \u00b7 NowString can be used to control Swith statement. \u00b7 MultiCatch Exception \u00b7 try-with-resourcestatement \u00b7 BinaryInteger Literals \u00b7 Underscorein numeric literals. JAVA released to the market in three categories J2SE (JAVA 2 Standard Edition), J2EE (JAVA 2 Enterprise Edition) and J2ME (JAVA 2 Micro/Mobile Edition). J2SE is basically used for developing client side applications/programs. J2EE is used for developing server side applications/programs. J2ME is used for developing Mobile/PDA applications/programs If you exchange the data between client and server programs (J2SE and J2EE), by default JAVA is having on internal support with a protocol called http. J2ME is used for developing mobile applications and lower/system level applications. To develop J2ME applications we must use a protocol called WAP (Wireless Applications Protocol).","title":"Evolution of Java, Creation of Java, History of Java"},{"location":"java/UnitI/#features-of-java","text":"The prime reason behind creation of Java was to bring portability and security feature into a computer language. Beside these two major features, there were many other features that played an important role in moulding out the final form of this outstanding language. Those features are : Simple Platform independent Architectural neutral Portable Multi threading Distributed Networked Robust Dynamic Secured High performance Interpreted Object Oriented Programming Language","title":"Features of Java"},{"location":"java/UnitI/#simple","text":"JAVA is simple because of the following factors: JAVA is free from pointers hence we can achieve less development time and less execution time [whenever we write a JAVA program we write without pointers and internally it is converted into the equivalent pointer program]. Rich set of API (application protocol interface) is available to develop any complex application. The software JAVA contains a program called garbage collector which is always used to collect unreferenced (unused) memory location for improving performance of a JAVA program. [Garbage collector is the system JAVA program which runs in the background along with regular JAVA program to collect unreferenced memory locations by running at periodical interval of times for improving performance of JAVA applications. JAVA contains user friendly syntax\u2019s for developing JAVA applications.","title":"Simple"},{"location":"java/UnitI/#platform-independent","text":"A program or technology is said to be platform independent if and only if which can run on all available operating systems. Unlike many other programming languages including C and C++, when Java is compiled, it is not compiled into platform specific machine, rather into platform independent byte code. This byte code is distributed over the web and interpreted by virtual Machine (JVM) on whichever platform it is being run. On compilation Java program is compiled into bytecode. This bytecode is platform independent and can be run on any machine, plus this bytecode format also provide security. Any machine with Java Runtime Environment can run Java Programs. The languages like C, Cpp are treated as platform dependent languages since these languages are taking various amount of memory spaces on various operating systems [the operating system dos understands everything in the form of its native format called Mozart (MZ) whereas the operating system Unix understands everything in its negative format called embedded linking format (elf). When we write a C or Cpp program on dos operating and if we try to transfer that program to Unix operating system, we are unable to execute since the format of these operating systems are different and more over the C, Cpp software does not contain any special programs which converts one format of one operating system to another format of other operating system]. The language like JAVA will have a common data types and the common memory spaces on all operating systems and the JAVA software contains the special programs which converts the format of one operating system to another format of other operating system. Hence JAVA language is treated as platform independent language. [JAVA language is also treated as server independent language since the server side program can run on any of the server which is available in the real world (web server or application server). JAVA can retrieve or store the data in any one of the data base product which is available in rest world irrespective of their vendors (developers) hence JAVA language is product independent language. In order to deal with server side program from the client side, we can use C language client program, Cpp client program, DOT NET client program, etc. hence JAVA language is a simple, platform independent, server independent, data base/product independent and language independent programming language].","title":"Platform Independent"},{"location":"java/UnitI/#architectural-neutral","text":"Java compiler generates an architecture-neutral object file format, which makes the compiled code to be executable on many processors, with the presence of Java runtime system. A language or technology is said to be processors in the real world. The language like JAVA can run on any of the processor irrespective of their vendor.","title":"Architectural Neutral"},{"location":"java/UnitI/#portable","text":"A portable language is one which can run on all operating systems and on all processors irrespective their architectures and providers. The language like C, Cpp are treated as nonportable languages whereas the language Java is called portable language","title":"Portable"},{"location":"java/UnitI/#multi-threading","text":"With Java's multithreaded feature, it is possible to write programs that can do many tasks simultaneously. This design feature allows developers to construct smoothly running interactive applications. Benefit of multithreading is that it utilizes same memory and other resources to execute multiple threads at the same time, like While typing, grammatical errors are checked along. A flow of control is known as thread. A multi threaded program is one in which there exist multiple flow of controls ie. threads. A program is said to be multi threaded program programs if and only of there exist n number of subprograms. For each and every sub flow of controls. All such flow of controls are executing concurrently. such flow of controls is know as threads. Such type of applications is known as multi threading applications. The languages like C, Cpp are treated as threads as single threaded modeling languages(STML). STML are those in which there exists single flows of control. The languages like JAVA and DOT NET are traeted as multithreaded modeling languages(MTML). MTML are those in which there exist multiple flows of controls. Whenever we write a java program there exists by default two threads. They are foreground/child thread and background/main/parent thread. A foreground thread is one which always executes user defined sub program. In a java program there is a possibility of existing n number of foregrounds threads. A background thread is one which always monitors the status of foreground thread. In each and every JAVA program there exist only one background thread. Hence background thread will be created first and later foreground thread will be created","title":"Multi Threading"},{"location":"java/UnitI/#distributed","text":"Java is designed for the distributed environment of the internet. A service is a said to be a distributed service which runs in multiple servers and that service can be accessed by n number of clients across the globe. In order to develop we must require architecture called trusted network architecture.To develop these applications we require a technology called J2EE. A service is a said to be a can be accessed by n number of clients across the globe. In order to develop applications we must require architecture called applications we require a technology called scale organizations. J2SE (Core JAVA) Notes is known as thread. multi threaded program is one in which there exists multiple flow of controls multi threaded program if and only of there exists n number of sub programs. For each and every sub-program there exists a separate flow of control are executing concurrently. Such flow of controls is known as type of applications is known as multi threading applications. The languages like C, Cpp are treated as threads as single threaded modeling languages (STML). SMTL are those in which there exists single flow of control. JAVA and DOT NET are treated as multi threaded modeling languages (MTML). MTML are those in which there exist multiple flows of controls Whenever we write a JAVA program there exists by default two threads foreground/child thread and background/main/parent thread. is one which always executes user defined sub-programs. In a program there is a possibility of existing n number of foreground threads is one which always monitors the status of foreground thread program there exists only one background thread. background thread will be created first and later foreground thread A service is a said to be a distributed service which runs in multiple servers by n number of clients across the globe. In order to develop we must require architecture called trusted network architecture. To develop these applications we require a technology called J2EE. Distributed applications are preferr Page 6 multiple flow of controls i.e., threads. if and only of there exists n number of sub- flow of control. All such is known as threads. Such single threaded modeling languages d modeling languages multiple flows of controls. two threads. They are programs. In a JAVA foreground threads. foreground thread. In each foreground thread will be created.","title":"Distributed"},{"location":"java/UnitI/#networked","text":"In real world we have two types of networks. They are untrusted and trsuted networks. Un-trusted networks : A network is said to be untrusted network in which there exist n number of inter connected non-autonomous architecture. Untrusted network is also know as LAN. Using this network architecture , we develop centralized applications. A Centralized application is one which runs on single server and runs on single server and it can be access in limited graces. In order to develop centralized application we may use a technology called J2Se and these kinds of applications are preferred by small scale organization. 2. Trusted network: A network is said to be trusted network in which there exist n number of interconnected autonomous architecture. Trusted network is also know as a WAN. Using this network, we can develop distributed applications. and it can be access in unlimited graces. In order to develop distributed applications we may use a technology called J2EE and these kinds of applications are preferred by large scale organization.","title":"Networked"},{"location":"java/UnitI/#dynamic","text":"Java is considered to be more dynamic than C or C++ since it is designed to adapt to an evolving environment. Java programs can carry extensive amount of run-time information that can be used to verify and resolve accesses to objects on run-time.","title":"Dynamic"},{"location":"java/UnitI/#portable_1","text":"Being architectural-neutral and having no implementation dependent aspects of the specification makes Java portable. Compiler in Java is written in ANSI C with a clean portability boundary which is a POSIX subset.","title":"Portable"},{"location":"java/UnitI/#high-performance","text":"With the use of Just-In-Time compilers, Java enables high performance.","title":"High Performance"},{"location":"java/UnitI/#interpreted","text":"Java byte code is translated on the fly to native machine instructions and is not stored anywhere. The development process is more rapid and analytical since the linking is an incremental and lightweight process.","title":"Interpreted"},{"location":"java/UnitI/#secure","text":"With Java's secure feature, it enables to develop virus-free, tamper-free systems. Authentication techniques are based on public-key encryption.","title":"Secure"},{"location":"java/UnitI/#object-oriented","text":"In Java, everything is an Object. Java can be easily extended since it is based on the Object model.","title":"Object Oriented"},{"location":"java/UnitI/#robust","text":"Java makes an effort to eliminate error prone situations by emphasizing mainly on compile time error checking and runtime checking. Java makes an effort to eliminate error prone codes by emphasizing mainly on compile time error checking and runtime checking. But the main areas which Java improved were Memory Management and mishandled Exceptions by introducing automatic Garbage Collector and Exception Handling.","title":"Robust"},{"location":"java/UnitI/#difference-in-c-and-java","text":"**J**ava is look like C but majordifference is object oriented concept and mechanism of define classes andobjects C Properties Java C is procedural Programming JAVA is Object-Oriented Sizeof, typedef, struct, union Keywords Don\u2019t have Auto, extern, register, signed, unsigned Type modifiers No C requires explicit handling of pointers Pointer Not support explicit pointers #define, #include Pre-processor directive No pre-processor C is a compiled language. Type of language Java is an Interpreted language C is a low-level language Levels JAVA is a high-level language C uses the top-down {sharp & smooth} approach Approach JAVA uses the bottom-up {on the rocks} approach User-Based Memory Management in C. Memory Management Memory Management with JAVA C does not support overloading Overloading Method Overloading errors & crashes in C Error Handling Exception Handling in JAVA Allowed Variable length arguments No variable-length argument lists C requires local variable declarations to be made at the beginning of a method or block Variable declaration Java allows them anywhere in a method or block","title":"Difference in C and Java"},{"location":"java/UnitI/#difference-in-java-and-c","text":"Properties C++ Java platform independent C++ is depends upon operating system machine**** Support Compiler and interpreter Compiler Both multiple Inheritance Support Not Support Operator Overloading Support Not Support template class Support Not Support Global Variables Support Not Support Preprocessor Directive Support Not Support Global Variables Support Not Support Pointers Support Not Support, Java support restricted pointers Thread Not Support Support Internet Not Support Support Function Destructor function finalized function Function Parameter Call by Value and Address Call By Value Only","title":"Difference in Java and C++"},{"location":"java/UnitI/#c-c-and-java","text":"Aspects C C++ Java Developed Year 1972 1979 1991 Developed By Dennis Ritchie Bjarne Stroustrup James Gosling Successor of BCPL C C(Syntax) & C++ (Structure) Paradigms Procedural Object Oriented Object Oriented Platform Dependency Dependent Dependent Independent Keywords 32 63 50 defined (goto, const unusable) Datatypes : union, structure Supported Supported Not Supported Pre-processor directives Supported (#include, #define) Supported (#include, #define) Not Supported Header files Supported Supported Use Packages (import) Inheritance No Inheritance Supported Multiple Inheritance not Supported Overloading No Overloading Supported Operator Overloading not Supported Pointers Supported Supported No Pointers Code Translation Compiled Compiled Interpreted Storage Allocation Uses malloc, calloc Uses new , delete uses garbage collector Multi-threading and Interfaces Not Supported Not Supported Supported Exception Handling No Exception handling Supported Supported Templates Not Supported Supported Not Supported Storage class: auto, extern Supported Supported Not Supported Destructors No Constructor or Destructor Supported Not Supported Database Connectivity Not Supported Not Supported Supported","title":"C, C++ and Java"},{"location":"java/UnitI/#application-of-java","text":"Java is widely used in every corner of world and of human life. Java is not only used in software\u2019s but is also widely used in designing hardware controlling software components. There are more than 930 million JRE downloads each year and 3 billion mobile phones run java. Following are some other usage of Java : Developing Desktop Application Web Applications like LinkedIn Mobile OS like Android Embedded System Robotics and games etc. How to create JAVA program For creating java program you install jdk toolbox and configure properly according to system then use any ASCII text Editor and following steps. Create a MyFirstJavaProgram.java Open notepad and add the code as above. Save thefile as: MyFirstJavaProgram.java. Open acommand prompt window and go o the directory where you saved the class. Assumeit's C:. Type 'javac MyFirstJavaProgram.java ' and press enter to compile your code. If thereare no errors in your code, the command prompt will take you to the nextline(Assumption : The path variable is set). Now, type' java MyFirstJavaProgram ' to run your program. You willbe able to see ' Hello World ' printed on the window. public class MyFirstJavaProgram { /* This is my first java program. \\* This will print 'Hello World' as the output */ public static void main ( String [] args ) { System . out . println ( \"HelloWorld\" ); // prints Hello World } } //For Output C: > javac MyFirstJavaProgram . java C: > java MyFirstJavaProgram HelloWorld Difference between class and object Properties Class Object A class is a way of binding the data and associated methods in a single unit Class variable is knows as an object Whenever we start executing a JAVA program, the class will be loaded into main memory with the help of class loader subsystem(a part of JVM) only once After loading the class into main memory, objects can be created in n number. When the class id defined there is no memory space for data members of a class When an object is created we get the memory space for data members of the class","title":"Application of Java"},{"location":"java/UnitI/#operators","text":"Java has well-defined rules for specifying the order in which the operators in an expression are evaluated when the expression has several operators. For example, multiplication and division have a higher precedence than addition and subtraction. Precedence rules can be overridden by explicit parentheses. Precedence order When two operators share an operand the operator with the higher precedence goes first. For example, 1 + 2 * 3 is treated as 1 + (2 * 3), whereas 1 * 2 + 3 is treated as (1 * 2) + 3 since multiplication has a higher precedence than addition. Associativity When an expression has two operators with the same precedence, the expression is evaluated according to its associativity. For example x = y = z = 17 is treated as x = (y = (z = 17)), leaving all three variables with the value 17, since the = operator has right-to-left associativity (and an assignment statement evaluates to the value on the right hand side). On the other hand, 72 / 2 / 3 is treated as (72 / 2) / 3 since the / operator has left-to-right associativity. Precedence and associativity of Java operators The table below shows all Java operators from highest to lowest precedence, along with their associativity. Most programmers do not memorize them all, and even those that do still use parentheses for clarity. Order of evaluation of subexpressions Associativity and precedence determine in which order Java applies operators to subexpressions but they do not determine in which order the subexpressions are evaluated. In Java, subexpressions are evaluated from left to right (when there is a choice). So, for example in the expression A() + B() * C(D(), E()), the subexpressions are evaluated in the order A(), B(), D(), E(), and C(). Although, C() appears to the left of both D() and E(), we need the results of both D() and E() to evaluate C(). It is considered poor style to write code that relies upon this behavior (and different programming languages may use different rules). Short circuiting When using the conditional and and or operators (&& and ||), Java does not evaluate the second operand unless it is necessary to resolve the result. This allows statements like if (s != null && s.length() < 10) to work reliably. Programmers rarely use the non short-circuiting versions (& and |) with boolean expressions. Precedence order gone awry Sometimes the precedence order defined in a language do not conform with mathematical norms. For example, in Microsoft Excel, -a^b is interpreted as (-a)^b instead of -(a^b). So -1^2 is equal to 1 instead of -1, which is the values most mathematicians would expect. Microsoft acknowledges this quirk as a \"design choice\". One wonders whether the programmer was relying on the C precedence order in which unary operators have higher precedence than binary operators. This rule agrees with mathematical conventions for all C operators, but fails with the addition of the exponentiation operator. Once the order was established in Microsoft Excel 2.0, it could not easily be changed without breaking backward compatibility. Operator Description Level Associativity [] . () ++ -- access array element access object member invoke a method post-increment post-decrement 1 left to right ++ -- + - ! ~ pre-increment pre-decrement unary plus unary minus logical NOT bitwise NOT 2 right to left () new cast object creation 3 right to left * / % multiplicative 4 left to right + - + additive string concatenation 5 left to right << >> >>> shift 6 left to right < <= > >= instance of relational type comparison 7 left to right == != equality 8 left to right & bitwise AND 9 left to right ^ bitwise XOR 10 left to right | bitwise OR 11 left to right && conditional AND 12 left to right || conditional OR 13 left to right ?: conditional 14 right to left = += -= *= /= %= &= ^= |= <<= >>= >>>= assignment 15","title":"Operators"},{"location":"java/UnitI/#cast-conversiontype-castingboxing-unboxing-autoboxing","text":"Java language specification (SE7-JLS-5.0) uses the word \u2018conversion\u2019 as a superset for anything and everything related to transforming objects. The word \u2018cast\u2019 is used at places where the developer needs to explicitly tell the compiler that the instance value needs to be converted. Attaching the cast-operator (a type between parentheses), before an object is referred as cast.","title":"Cast Conversion/Type casting/boxing-unboxing-autoboxing"},{"location":"java/UnitI/#type-safety-in-java","text":"Type-safety is the mechanism provided in a programming language to ensure that there are no issues because of type mismatch between a variable and value attempted to store in it. In Java to ensure type-safety, during compile time the compiler will check for type information between variables using the static type information available. Then during runtime the values are checked for compatibility before storing in a variable. As per Java language specification (SE7-JLS-5.0) conversions are broadly categorized as, Identity conversions Widening primitive conversions Narrowing primitive conversions Widening reference conversions Narrowing reference conversions Boxing conversions Unboxing conversions Unchecked conversions Capture conversions String conversions Value set conversions","title":"type-safety in Java"},{"location":"java/UnitI/#identity-conversion","text":"This is given for theoretical completeness. Assigning two instance of same type is identity conversion. Integer i1 ; Integer i2 = new Integer ( 2 ); i1 = i2 ; //identity conversion // cast not required, but done compiler will not complain i1 = ( Integer ) i2 ;","title":"Identity Conversion"},{"location":"java/UnitI/#primitive-conversions-and-type-cast-in-java","text":"Assigning a value of one type to a variable of another type is known as Type Casting. When the data is converted from one data type to another data type, then it is called type casting. Type casting is nothing but changing the type of the data. Using type casting, only type of the data can be changed but not the data itself. Example : int x = 10 ; byte y = ( byte ) x ; In Java, type casting is classified into two types, Widening Casting(Implicit) Narrowing Casting(Explicitly done)","title":"Primitive Conversions and Type Cast in Java"},{"location":"java/UnitI/#widening-primitive-conversion-or-automatic-type-conversion","text":"Automatic Type casting take place when, the two types are compatible the target type is larger than the source type. \u201cA widening primitive conversion does not lose information about the overall magnitude of a numeric value.\u201d There is no cast required and will never result in a runtime exception. Following are the possible widening conversions, byte to short, int, long, float, or double short to int, long, float, or double char to int, long, float, or double int to long, float, or double long to float or double float to double Example: public class Test { public static void main ( String [] args ) { int i = 100 ; long l = i ; //no explicit type casting required float f = l ; //no explicit type casting required System . out . println ( \"Int value \" + i ); System . out . println ( \"Long value \" + l ); System . out . println ( \"Float value \" + f ); } } Output : Int value 100 Long value 100 Float value 100.0 /*------------------------------*/ class WideningConversion { public static void main ( String [] args ) { int i = 123456789 ; float f = i ; } }","title":"Widening Primitive Conversion or Automatic type conversion"},{"location":"java/UnitI/#narrowing-or-explicit-type-conversion","text":"When you are assigning a larger type value to a variable of smaller type, then you need to perform explicit type casting. \u201cA narrowing primitive conversion may lose information about the overall magnitude of a numeric value and may also lose precision and range.\u201d Cast required between types. Overflow and underflow may happen but a runtime exception will never happen. Following are the possible narrowing conversions, short to byte or char char to byte or short int to byte, short, or char long to byte, short, char, or int float to byte, short, char, int, or long double to byte, short, char, int, long, or float Example : public class Test { public static void main ( String [] args ) { double d = 100.04 ; long l = ( long ) d ; //explicit type casting required int i = ( int ) l ; //explicit type casting required System . out . println ( \"Double value \" + d ); System . out . println ( \"Long value \" + l ); System . out . println ( \"Int value \" + i ); } } Output : Double value 100.04 Long value 100 Int value 100 /*------------------------------------------------*/ public class NarrowingPrimitiveConversion { public static void main ( String [] args ) { float f = Float . POSITIVE_INFINITY ; long l = ( long ) f ; int i = ( int ) f ; System . out . println ( \"long: \" + l + \" int: \" + i ); int j = 255 ; byte b = ( byte ) j ; // size is too large and resulted in negative System . out . println ( b ); } }","title":"Narrowing or Explicit type conversion"},{"location":"java/UnitI/#reference-conversions-and-cast-in-java","text":"In this section let us see about categories, widening reference conversion and narrowing reference conversion. With respect to classes and objects, there are four categories to understand for casting. Assigning a Float object to Integer directly has got nothing to do with casting and it will throw a compile error as incompatible type. Casting a Float into Integer is not proper and will get compile error as inconvertible types. Casting in Java is done within same hierarchy of types, that is between inherited types. upcast \u2013 Casting a subtype object into a supertype and this is called upcast. In Java, we need not add an explicit cast and you can assign the object directly. Compiler will understand and cast the value to supertype. By doing this, we are lifting an object to a generic level. If we prefer, we can add an explicit cast and no issues. downcast \u2013 Casting a supertype to a subtype is called downcast. This is the mostly done cast. By doing this we are telling the compiler that the value stored in the base object is of a super type. Then we are asking the runtime to assign the value. Because of downcast we get access to methods of the subtype on that object. ClassCastExcpetion \u2013 We get ClassCastException in a downcast. In principle, we guarantee the compiler that the instance value of is subtype and ask it to cast. But during runtime, because of unforeseen circumstances, the value is not of expected subtype. In such cases, we get ClassCastException.","title":"Reference Conversions and Cast in Java"},{"location":"java/UnitI/#autoboxing-and-unboxing-in-java","text":"Converting from a primitive type to its corresponding reference type is boxing conversion and vice versa is Unboxing conversion. Examples are, From primitive boolean to type Boolean From primitive int to type Integer int i = 10 ; Integer iObj = new Integer ( 100 ); iObj = i ; //boxing conversion i = iObj ; //unboxing conversion **Autoboxing: **Converting a primitive value into an object of the corresponding wrapper class is called autoboxing. For example, converting int to Integer class. The Java compiler applies autoboxing when a primitive value is: Passed as a parameter to a method that expects an object of the corresponding wrapper class. Assigned to a variable of the corresponding wrapper class . Unboxing: Converting an object of a wrapper type to its corresponding primitive value is called unboxing. For example conversion of Integer to int. The Java compiler applies unboxing when an object of a wrapper class is: Passed as a parameter to a method that expects a value of the corresponding primitive type. Assigned to a variable of the corresponding primitive type . The following table lists the primitive types and their corresponding wrapper classes, which are used by the Java compiler for autoboxing and unboxing: // Java program to illustrate the concept // of Autoboxing and Unboxing` import java.io.* ; class GFG { public static void ` ` main ( String [] args ) ` ` `` { ` ` `` // creating an Integer Object` ` `` // with value 10.` ` `` Integer i = `` new ` ` Integer ( `` 10 `` ); ` ` `` // unboxing the Object` ` `` int ` ` i1 = i ; ` ` `` System . out . println ( `` \"Value of i: \" ` ` + i ); ` ` `` System . out . println ( `` \"Value of i1: \" ` ` + i1 ); ` ` `` //Autoboxing of char` ` `` Character gfg = `` 'a' `` ; ` ` `` // Auto-unboxing of Character` ` `` char ` ` ch = gfg ; ` ` `` System . out . println ( `` \"Value of ch: \" ` ` + ch ); ` ` `` System . out . println ( `` \"Value of gfg: \" ` ` + gfg ); ` ` `` } ` ` } ` Value of i: 10 Value of i1: 10 Value of ch: a Value of gfg: a //Another example to understand how compiler did autoboxing and unboxing in the example of Collections in java using generics. /* Java program to illustrate autoboxing */ import java.io.* ; import java.util.* ; class GFG { public static void main ( String [] args ) { /* Here we are creating a listof elements of Integer type. adding the int primitives type values */ List < Integer > list = new ArrayList < Integer >(); for ( int i = 0 ; i < 10 ; i ++) list . add ( i ); } } In above example we have created a list of elements of Integer type. We are adding int primitive type values instead of Integer Object and the code successfully compiled. It does not generate a compile time error as java compiler create Integer wrapper Object from primitive int i and adds it to the list. See the following example for, How it converts\u2026 /* Java program to illustrate autoboxing */ `` import ` ` java . io .*; `` import ` ` java . util .*; ` ` class ` ` GFG `` { `` `` public ` ` static ` ` void ` ` main ( String [] args ) `` `` { `` `` /* Here we are creating a list of elements`` ``of Integer type. Adding the int primitives`` ``type values by converting them into Integer`` ``wrapper Object*/ `` `` List < Integer > list = `` new ` ` ArrayList < Integer >(); `` `` for ` ` ( `` int ` ` i = `` 0 `` ; i < `` 10 `` ; i ++) `` `` list . add ( Integer . valueOf ( i )); ` ` `` } `` } ` Another example of auto and unboxing is to find sum of odd numbers in a list. Important point in the program is that the operators remainder (%) and unary plus (+=) operators do not apply to Integer objects. But still code compiles successfully because the unboxing of Integer Object to primitive int value is taking place by invoking intValue() method at runtime. //Java program to illustrate find sum of odd numbers using autobxing and unboxing import java.io.* ; import java.util.* ; class GFG { public static int sumOfOddNumber ( List < Integer > list ) { int sum = 0 ; for ( Integer i : list ) { // unboxing of i automatically if ( i % 2 != 0 ) sum += i ; /* unboxing of i is done automatically using intvalue implicitly */ if ( i . intValue () % 2 != 0 ) sum += i . intValue (); } return sum ; } public static void main ( String [] args ) { /* Here we are creating a list of elements of Integer type and adding the int primitives type values to the list*/ List < Integer > list = new ArrayList < Integer >(); for ( int i = 0 ; i < 10 ; i ++) list . add ( i ); // getting sum of all odd no. in the list. int sumOdd = sumOfOddNumber ( list ); System . out . println ( \"Sum of odd numbers = \" + sumOdd ); } } Output: Sum of odd numbers = 25 Advantages of Autoboxing / Unboxing: Autoboxing and Unboxing lets developers write cleaner code, making it easier to read. The technique let us use primitive types and Wrapper class objects interchangeably and we do not need to perform any typecasting explicitly.","title":"Autoboxing and Unboxing in Java"},{"location":"java/UnitI/#string-conversion","text":"String conversion applies only to the \u2018+\u2019 operator, when one operand is a String and another is a primitive type. In such a case, primitive type is converted to its corresponding reference type and then it is converted using the toString() method. No cast is required. int i = 10 ; String str1 = \"\" ; String str2 = str1 + i ; //string conversion Unchecked and Capture Conversion will be discussed in the next tutorial as part of the generics series.","title":"String Conversion"},{"location":"java/UnitI/#questions","text":"Difference between casting and autoboxing What are the types of casting. There are two types of casting. Primitive Casting : When the data is casted from one primitive type ( like int, float, double etc\u2026 ) to another primitive type, then it is called Primitive Casting. Derived Casting : When the data is casted from one derived type to another derived type, then it is called derived casting. What is auto widening and explicit narrowing.? The data is implicitly casted from small sized primitive type to big sized primitive type. This is called auto-widening. i.e The data is automatically casted from byte to short, short to int, int to long, long to float and float to double. You have to explicitly cast the data from big sized primitive type to small sized primitive type. i.e you have to explicitly convert the data from double to float, float to long, long to int, int to short and short to byte This is called explicit narrowing. What is auto-up casting and explicit down casting.? An object of sub class type can be automatically casted to super class type. This is called auto-up casting. An object of super class type should be explicitly casted to sub class type, It is called explicit down casting. Can an int primitive type of data implicitly casted to Double derived type.? Yes, first int is auto-widened to double and then double is auto-boxed to Double. What is ClassCastException.? ClassCastException is an exception which occurs at run time when an object of one type can not be casted to another type. How do you avoid ClassCastException in your code.? By using generics, you can avoid ClassCastException. (Click here to see how you can avoid ClassCastException Using generics.) What is boxing and unboxing.? Wrapping of primitive content into corresponding wrapper class object is called boxing. Unwrapping the wrapper class object into corresponding primitive content is called un boxing. What is the difference between auto-widening, auto-upcasting and auto-boxing.?** Auto-widening occurs when small sized primitive type is casted to big sized primitive type. Auto-up casting occurs when sub class type is casted to super class type. Auto-boxing occurs when primitive type is casted to corresponding wrapper class. What are the priorities of auto-widening, auto-upcasting and auto-boxing.?","title":"Questions"},{"location":"java/UnitI/#java-environment","text":"Tools JDK","title":"Java Environment"},{"location":"java/UnitI/#tools-you-will-need","text":"For performing the java program, you will need a hardware and Software Hardware Processor : Pentium200-MHz computer Memory : minimumof 64 MB of RAM (128 MB of RAM recommended). Software You also will need the following software\u2019s: Operating System Linux or Windows 95/98/2000/XP operating system. Java JDK Microsoft Notepad or any other ASCII text editor","title":"Tools you will need"},{"location":"java/UnitI/#download-jdk","text":"For running Java programs in your system, you will have to download and install JDK kit from here ( http://www.oracle.com/technetwork/java/javase/downloads/index.html ) (current version is jdk 1.7).","title":"Download JDK"},{"location":"java/UnitI/#setting-class-path","text":"Java is freely available on Oracle's Website. Download the latest version of JDK () (Java Development Kit) on your operating system. Install JDK on your machine. Once you have installed Java on your machine you would need to set environment variable to point to correct installation directory. Setting up path for windows ( 2000/XP/vista/Window 7,8 ) Assuming that you have installed Java in C: Program files/ Java / JDK directory Step 1: Right click on my computer and select properties. Step 2: Go to the Advance System Settings tab. Step 3: Click on Environment Variables button. Step 4: Now alter the path variable so that it also contains the path to JDK installed directory. For e.g:- Change C:\\windows/ system 32. to C:\\windows/system 32; C:\\program files / Java/ JDK. Setting up path for Linux , Unix , Solaris, free BSD Assuming that you have installed Java in /home/java/JDK directory, do the following: Step 1: Environment variable path should be set to point where java binaries have been installed. Refer to your shell if you have trouble doing this. For Example: If you use bash as your shell, then you would add following line to the end bash mc: export PATH=/ Path/to/java","title":"Setting Class path"},{"location":"java/UnitI/#popular-java-editors","text":"To write your Java programs, you will need a text editor. There are even more sophisticated IDEsavailable in the market. But for now,you can consider one of the following: Notepad: On Windows machine, you can use any simple text editor like Notepad (Recommended for this tutorial), TextPad. Netbeans : Isa Java IDE that is open-source and free which can be downloaded from http://www.netbeans.org/index.html . Eclipse:Is also a Java IDE developed by the eclipse open-source community and can be downloaded from http://www.eclipse.org/ .","title":"Popular Java Editors"},{"location":"java/UnitI/#java-development-kitjdk","text":"Java is a recently developed, concurrent, class-based, object-oriented programming and runtime environment, consisting of: A programming language An API specification A virtual machine specification The JDK has as its primary components a collection of programming tools,including: appletviewer\u2013 this tool can be used to run and debug Java applets without a web browser apt \u2013 theannotation-processing tool extcheck\u2013 a utility that detects JAR file conflicts idlj \u2013the IDL-to-Java compiler. This utility generates Java bindings from a givenJava IDL file. jabswitch\u2013 the Java Access Bridge. Exposes assistive technologies on Microsoft Windows systems. java \u2013the loader for Java applications. This tool is an interpreter and can interpretthe class files generated by the javaccompiler. Now a single launcher is used for both development and deployment.The old deployment launcher, jre, no longer comes with Sun JDK, and instead ithas been replaced by this new java loader. javac \u2013the Java compiler, which converts source code into Java bytecode javadoc \u2013the documentation generator, which automatically generates documentation fromsource code comments jar \u2013 thearchiver, which packages related class libraries into a single JAR file. Thistool also helps manage JAR files. javafxpackager\u2013 tool to package and sign JavaFX applications jarsigner\u2013 the jar signing and verification tool javah \u2013the C header and stub generator, used to write native methods javap \u2013the class file disassembler javaws \u2013the Java Web Start launcher for JNLP applications JConsole\u2013 Java Monitoring and Management Console jdb \u2013 thedebugger jhat\u2013Java Heap Analysis Tool (experimental) jinfo \u2013This utility gets configuration information from a running Java process orcrash dump. (experimental) jmap \u2013This utility outputs the memory map for Java and can print shared object memorymaps or heap memory details of a given process or core dump. (experimental) jmc \u2013Java Mission Control jps \u2013Java Virtual Machine Process Status Tool lists the instrumented HotSpot JavaVirtual Machines (JVMs) on the target system. (experimental) jrunscript\u2013 Java command-line script shell. jstack \u2013utility that prints Java stack traces of Java threads (experimental) jstat \u2013Java Virtual Machine statistics monitoring tool (experimental) jstatd \u2013 jstatdaemon (experimental) keytool \u2013tool for manipulating the keystore pack200 \u2013JAR compression tool policytool\u2013 the policy creation and management tool, which can determine policy for a Java runtime, specifying which permissions are available for code from various sources VisualVM\u2013 visual tool integrating several command-line JDK tools and light weight[clarification needed] performance and memory profiling capabilities wsimport\u2013 generates portable JAX-WS artifacts for invoking a web service. xjc \u2013 Partof the Java API for XML Binding (JAXB) API. It accepts an XML schema andgenerates Java classes. The JDK also called Java Development Kit is a super set of the JRE, and contains everything that is in the JRE, plus tools such as the compilers and debuggers necessary for developing applets and applications.","title":"Java Development Kit(JDK)"},{"location":"java/UnitI/#java-runtime-environment-jre","text":"The JRE is the software environment in which programs compiled for a typical JVM implementation can run. The runtime system includes: Code necessary to run Java programs, dynamically link native methods, manage memory, and handle exceptions Implementation of the JVM The following figure shows the JRE and its components, including a typical JVM implementation's various modules and its functional position with respect to the JRE and class libraries. The Java Runtime Environment (JRE) provides the libraries, the Java Virtual Machine, and other components to run applets and applications written in the Java programming language. JRE does not contain tools and utilities such as compilers or debuggers for developing applets and applications.","title":"Java Runtime Environment JRE"},{"location":"java/UnitI/#java-virtual-machine-jvm","text":"Java virtual Machine(JVM) is a virtual Machine that provides runtime environment to execute java byte code. The JVM doesn't understand Java typo, that's why you compile your *.java files to obtain *.class files that contain the bytecodes understandable by the JVM. JVM control execution of every Java program. It enables features such as automated exception handling, Garbage-collected heap. The JVM is an abstract computing machine, having an instruction set that uses memory. Virtual machines are often used to implement a programming language. The JVM is the cornerstone of the Java programming language. It is responsible for Java's cross-platform portability and the small size of its compiled code. The Solaris JVM is used to execute Java applications. The Java compiler, javac, outputs bytecodes and puts them into a .class file. The JVM then interprets these bytecodes, which can then be executed by any JVM implementation, thus providing Java's cross-platform portability. The next two figures illustrate the traditional compile-time environment and the new portable Java compile-time environment.","title":"Java Virtual Machine (JVM)"},{"location":"java/UnitI/#sun-just-in-time-jit-compiler","text":"The Sun Java JIT compiler, an integral part of the Solaris JVM, can accelerate execution performance many times over previous levels. Long-running, compute-intensive programs show the best performance improvement.","title":"Sun Just-In-Time (JIT) Compiler"},{"location":"java/UnitI/#jit-compile-process","text":"When the JIT compiler environment variable is on (the default), the JVM reads the .class file for interpretation and passes it to the JIT compiler. The JIT compiler then compiles the bytecodes into native code for the platform on which it is running. The next figure illustrates the JIT compile process.","title":"JIT Compile Process"},{"location":"java/UnitI/#object-oriented-concepts","text":"","title":"Object Oriented Concepts"},{"location":"java/UnitII/","text":"Unit II Link Classes & Objects: Class fundamentals, declaring object reference variable, Introducing methods, constructors, the key word, garbage collection, Overloading methods. Inheritance and polymorphism: super class and subclass, protected members, Relationship between super and sub class. Inheritance hierarchy, abstract classes and methods, final methods and classes, nested classes, Type wrappers. Constructors Link The general rule is that when a subclass is created Java will call the superclass constructor first and then call the subclass constructors in the order determined by the inheritance hierarchy If a superclass does not have a default constructor with no arguments, the subclass must explicitly call the superclass constructor with the appropriate arguments Inheritance Link Introduction Link Inheritance can be defined as the process where one class acquires the properties methods and fields of another. With the use of inheritance, the information is made manageable in a hierarchical order. Inheritance is the process of taking the features(data members + methods) from one class to another class. The class which giving the features is known asbase/parent class/super class. The class which is taking the features is known as derived/child/sub class. Instance is known as sub classing or derivation or extend-able classes or re usability. Advantages of Inheritance Link Application development time is very less. Re usability: Redundancy (repetition) of the code is reducing. Hence we can get less memory cost and consistent results. Instrument cost towards the project is reduced. We can achieve the slogan write one\u2019s reuse/run any where (WORA) of JAVA. Achieve oops inheritance concepts. inheritance is transitive. In Java, all methods except of constructors override the methods of their ancestor class by replacement. If a method is declared with the final modifier, it cannot be overridden. Types of Inheritance Link Reusable techniques Based on taking the features from base class to the derived class, in JAVA we have five types of inheritances. They are as follows: Single Inheritance Multilevel Inheritance Hierarchical Inheritance Multiple Inheritance Hybrid Inheritance Single Inheritance Link Single Inheritance is one in which there exists single base class and single derived class. Multi-level inheritance Link Multi-level inheritance is one which there exist single base class, single derived class and n number of intermediate base classes. An intermediate base class is one, in one context it acts as bass class and in another context it acts as derived class. Why multiple inheritance is not supported in Java. Link To remove ambiguity. To provide more maintainable and clear design. Extends Keyword Link Extends is the keyword used to inherit the properties of a class. Below given is the syntax of extends keyword. class Super { Statements ; } class Sub extends Super { Statements ; } e . g . class Calculation { int z ; public void addition ( int x , int y ) { z = x + y ; System . out . println ( \"The sum of the given numbers:\" + z ); } public void Substraction ( int x , int y ) { z = x - y ; System . out . println ( \"The difference between the given numbers:\" + z ); } } public class My_Calculation extends Calculation { public void multiplication ( int x , int y ) { z = x * y ; System . out . println ( \"The product of the given numbers:\" + z ); } public static void main ( String args []) { int a = 20 , b = 10 ; My_Calculation demo = new My_Calculation (); demo . addition ( a , b ); demo . Substraction ( a , b ); demo . multiplication ( a , b ); } } The Superclass reference variable can hold the subclass object, but using that variable you can access only the members of the superclass, so to access the members of both classes it is recommended to always create reference variable to the subclass. If you consider the above program you can instantiate the class as given below as well. But using the superclass reference variable ( cal in this case ) you cannot call the method multiplication, which belongs to the subclass My_Calculation. Note: A subclass inherits all the members fields, methods, and nested classes from its superclass. Constructors are not members, so they are not inherited by subclasses, but the constructor of the superclass can be invoked from the subclass. The Superclass reference variable can hold the subclass object, but using that variable you can access only the members of the superclass, so to access the members of both classes it is recommended to always create reference variable to the subclass. If you consider the above program you can instantiate the class as given below as well. But using the superclass reference variable ( cal in this case ) you cannot call the method multiplication, which belongs to the subclass My_Calculation. Note : A subclass inherits all the members fields, methods, and nested classes from its superclass. Constructors are not members, so they are not inherited by subclasses, but the constructor of the superclass can be invoked from the subclass. Super keyword Link In Java, super keyword is used to refer to immediate parent class of a class. In other words super keyword is used by a subclass whenever it need to refer to its immediate super class. The super keyword is similar to this keyword following are the scenarios where the super keyword is used. It is used to differentiate the members of superclass from the members of subclass, if they have same names. It is used to invoke the superclass constructor from subclass. Differentiating the members Link If a class is inheriting the properties of another class. And if the members of the superclass have the names same as the sub class, to differentiate these variables we use super keyword as shown below. super . variable super . method (); e . g . class Super_class { int num = 20 ; //display method of superclass public void display () { System . out . println ( \"This is the display method of superclass\" ); } } public class Sub_class extends Super_class { int num = 10 ; //display method of sub class public void display () { System . out . println ( \"This is the display method of subclass\" ); } public void my_method () { //Instantiating subclass Sub_class sub = new Sub_class (); //Invoking the display() method of sub class sub . display (); //Invoking the display() method of superclass super . display (); //printing the value of variable num of subclass System . out . println ( \"value of the variable named num in sub class:\" + sub . num ); //printing the value of variable num of superclass System . out . println ( \"value of the variable named num in super class:\" + super . num ); } public static void main ( String args []) { Sub_class obj = new Sub_class (); obj . my_method (); } } ``` Invoking Superclass constructor Link If a class is inheriting the properties of another class, the subclass automatically acquires the default constructor of the super class. But if you want to call a parametrized constructor of the super class, you need to use the super keyword as shown below. super ( values ); e . g . class Superclass { int age ; Superclass ( int age ) { this . age = age ; } public void getAge () { System . out . println ( \"The value of the variable named age in super class is: \" + age ); } } public class Subclass extends Superclass { Subclass ( int age ) { super ( age ); } public static void main ( String argd []) { Subclass s = new Subclass ( 24 ); s . getAge (); } } IS-A Relationship Link IS-A is a way of saying : This object is a type of that object. Let us see how the extends keyword is used to achieve inheritance. public class Animal {} public class Mammal extends Animal {} public class Reptile extends Animal {} public class Dog extends Mammal {} With use of the extends keyword the subclasses will be able to inherit all the properties of the superclass except for the private properties of the superclass. Instanceof Keyword Link Let us use the instanceof operator to check determine whether Mammal is actually an Animal, and dog is actually an Animal Can you use both this() and super() in a Constructor? Link NO, because both super() and this() must be first statement inside a constructor. Hence we cannot use them together. Difference between Overloading and Overriding Link Properties Overloading Overriding Overloading deals with multiple methods in the same class with the same name but different signatures Overriding deals with two methods, one in a parent class and one in a child class, that have the same signature Overloading lets you define a similar operation in different ways for different data Overriding lets you define a similar operation in different ways for different object types Controlling inheritance Link Visibility modifiers determine which class members are accessible and which do not Members (variables and methods) declared with publicvisibility are accessible, and those with private visibility are not Problem: How to make class/instance variables visible only to its subclasses? Solution: Java provides a third visibility modifier that helps in inheritance situations: protected Polymorphism Link Polymorphism is the ability of an object to take on many forms. The most common use of polymorphism in OOP occurs when a parent class reference is used to refer to a child class object. Any Java object that can pass more than one IS-A test is considered to be polymorphic. In Java, all Java objects are polymorphic since any object will pass the IS-A test for their own type and for the class Object. It is important to know that the only possible way to access an object is through a reference variable. A reference variable can be of only one type. Once declared, the type of a reference variable cannot be changed. The reference variable can be reassigned to other objects provided that it is not declared final. The type of the reference variable would determine the methods that it can invoke on the object. A reference variable can refer to any object of its declared type or any subtype of its declared type. A reference variable can be declared as a class or interface type. Polymorphism means one name, manyforms. There are 3 distinct forms of Java Polymorphism; Method overloading (Compile time polymorphism) Method overriding through inheritance (Run time polymorphism) Method overriding through the Java interface (Run time polymorphism) Polymorphism allows a referenceto denote objects of different types at different times during execution. Asuper type reference exhibits polymorphic behavior, since it can denote objectsof its subtypes. interface Shape { public double area (); public double volume (); } class Cube implements Shape { int x = 10 ; public double area ( ) { return ( 6 * x * x ); } public double volume () { return ( x * x * x ); } } class Circle implements Shape { int radius = 10 ; public double area () { return ( Math . PI * radius * radius ); } public double volume () { return 0 ; } } public class PolymorphismTest { public static void main ( String args []) { Shape [] s = { new Cube (), new Circle () }; for ( int i = 0 ; i < s . length ; i ++) { System . out . println ( \"The area and volume of \" + s [ i ]. getClass () + \" is \" + s [ i ]. area () + \" , \" + s [ i ]. volume ()); } } } //Output The area and volume of class Cube is 600.0 , 1000.0 The area and volume of class Circle is 314.1592653589793 , 0.0 The methods area() and volume() are overridden in the implementingclasses. The invocation of the both methods area and volume is determined basedon run time polymorphism of the current object as shown in the output. Wrapper Classes Link Vectors cannot handle primitive datatypes like int, float,long, char, and double. Primitive data types may be converted into object typesusing the wrapper classes contained in the java.lang.package. The following table gives the details about those classes andmethods used for converting storing data to fundamental data: DATA TYPES WRAPPER CLASS CONVERTION METHOD FROM STRING DATA TO FUNDAMENTAL DATA TYPE Converting Object Numbers to Primitive Number Using typeValue() method byte Byte public static byte parseByte (string) short Short public static short parseShort (string) int Integer public static int parseInt (string) int i = IntVal.intValue(); long Long public static long parseLong (string) Long i = LongVal.longValue(); float Float public static float parseFloat (string) float i = FloatVal.floatValue(); double Double public static double parseDouble (string) double i = DoubleVal.doubletValue(); char Char public static char parseChar (string) boolean Boolean public static boolean parseBoolean(string) Wrapper classes are basically used for converting the string data into fundamental data type. Each and every wrapper class contains the following generalized parse methods. public static Xxx parseXxx (String); here, Xxx represents fundamental data type. The wrapper classes have a number of unique methods for handling primitive data types and objects Whenever we develop a JAVA program it is recommended to write \u2018n\u2019 number of business logic classes and single execution logic class. A business logic class is one which contains \u2018n\u2019 number of user defined methods in which we write business logic. Business logic is one which is provided by JAVA programmer according business rules (requirements) started by customer. Whatever data we represent in JAVA runtime environment it is by default treated as objects of string data. As a programmer when we start any JAVA program an object of string class is created depends on number of values we pass.","title":"Unit II"},{"location":"java/UnitII/#unit-ii","text":"Classes & Objects: Class fundamentals, declaring object reference variable, Introducing methods, constructors, the key word, garbage collection, Overloading methods. Inheritance and polymorphism: super class and subclass, protected members, Relationship between super and sub class. Inheritance hierarchy, abstract classes and methods, final methods and classes, nested classes, Type wrappers.","title":"Unit II"},{"location":"java/UnitII/#constructors","text":"The general rule is that when a subclass is created Java will call the superclass constructor first and then call the subclass constructors in the order determined by the inheritance hierarchy If a superclass does not have a default constructor with no arguments, the subclass must explicitly call the superclass constructor with the appropriate arguments","title":"Constructors"},{"location":"java/UnitII/#inheritance","text":"","title":"Inheritance"},{"location":"java/UnitII/#introduction","text":"Inheritance can be defined as the process where one class acquires the properties methods and fields of another. With the use of inheritance, the information is made manageable in a hierarchical order. Inheritance is the process of taking the features(data members + methods) from one class to another class. The class which giving the features is known asbase/parent class/super class. The class which is taking the features is known as derived/child/sub class. Instance is known as sub classing or derivation or extend-able classes or re usability.","title":"Introduction"},{"location":"java/UnitII/#advantages-of-inheritance","text":"Application development time is very less. Re usability: Redundancy (repetition) of the code is reducing. Hence we can get less memory cost and consistent results. Instrument cost towards the project is reduced. We can achieve the slogan write one\u2019s reuse/run any where (WORA) of JAVA. Achieve oops inheritance concepts. inheritance is transitive. In Java, all methods except of constructors override the methods of their ancestor class by replacement. If a method is declared with the final modifier, it cannot be overridden.","title":"Advantages of Inheritance"},{"location":"java/UnitII/#types-of-inheritance","text":"Reusable techniques Based on taking the features from base class to the derived class, in JAVA we have five types of inheritances. They are as follows: Single Inheritance Multilevel Inheritance Hierarchical Inheritance Multiple Inheritance Hybrid Inheritance","title":"Types of Inheritance"},{"location":"java/UnitII/#single-inheritance","text":"Single Inheritance is one in which there exists single base class and single derived class.","title":"Single Inheritance"},{"location":"java/UnitII/#multi-level-inheritance","text":"Multi-level inheritance is one which there exist single base class, single derived class and n number of intermediate base classes. An intermediate base class is one, in one context it acts as bass class and in another context it acts as derived class.","title":"Multi-level inheritance"},{"location":"java/UnitII/#why-multiple-inheritance-is-not-supported-in-java","text":"To remove ambiguity. To provide more maintainable and clear design.","title":"Why multiple inheritance is not supported in Java."},{"location":"java/UnitII/#extends-keyword","text":"Extends is the keyword used to inherit the properties of a class. Below given is the syntax of extends keyword. class Super { Statements ; } class Sub extends Super { Statements ; } e . g . class Calculation { int z ; public void addition ( int x , int y ) { z = x + y ; System . out . println ( \"The sum of the given numbers:\" + z ); } public void Substraction ( int x , int y ) { z = x - y ; System . out . println ( \"The difference between the given numbers:\" + z ); } } public class My_Calculation extends Calculation { public void multiplication ( int x , int y ) { z = x * y ; System . out . println ( \"The product of the given numbers:\" + z ); } public static void main ( String args []) { int a = 20 , b = 10 ; My_Calculation demo = new My_Calculation (); demo . addition ( a , b ); demo . Substraction ( a , b ); demo . multiplication ( a , b ); } } The Superclass reference variable can hold the subclass object, but using that variable you can access only the members of the superclass, so to access the members of both classes it is recommended to always create reference variable to the subclass. If you consider the above program you can instantiate the class as given below as well. But using the superclass reference variable ( cal in this case ) you cannot call the method multiplication, which belongs to the subclass My_Calculation. Note: A subclass inherits all the members fields, methods, and nested classes from its superclass. Constructors are not members, so they are not inherited by subclasses, but the constructor of the superclass can be invoked from the subclass. The Superclass reference variable can hold the subclass object, but using that variable you can access only the members of the superclass, so to access the members of both classes it is recommended to always create reference variable to the subclass. If you consider the above program you can instantiate the class as given below as well. But using the superclass reference variable ( cal in this case ) you cannot call the method multiplication, which belongs to the subclass My_Calculation. Note : A subclass inherits all the members fields, methods, and nested classes from its superclass. Constructors are not members, so they are not inherited by subclasses, but the constructor of the superclass can be invoked from the subclass.","title":"Extends Keyword"},{"location":"java/UnitII/#super-keyword","text":"In Java, super keyword is used to refer to immediate parent class of a class. In other words super keyword is used by a subclass whenever it need to refer to its immediate super class. The super keyword is similar to this keyword following are the scenarios where the super keyword is used. It is used to differentiate the members of superclass from the members of subclass, if they have same names. It is used to invoke the superclass constructor from subclass.","title":"Super keyword"},{"location":"java/UnitII/#differentiating-the-members","text":"If a class is inheriting the properties of another class. And if the members of the superclass have the names same as the sub class, to differentiate these variables we use super keyword as shown below. super . variable super . method (); e . g . class Super_class { int num = 20 ; //display method of superclass public void display () { System . out . println ( \"This is the display method of superclass\" ); } } public class Sub_class extends Super_class { int num = 10 ; //display method of sub class public void display () { System . out . println ( \"This is the display method of subclass\" ); } public void my_method () { //Instantiating subclass Sub_class sub = new Sub_class (); //Invoking the display() method of sub class sub . display (); //Invoking the display() method of superclass super . display (); //printing the value of variable num of subclass System . out . println ( \"value of the variable named num in sub class:\" + sub . num ); //printing the value of variable num of superclass System . out . println ( \"value of the variable named num in super class:\" + super . num ); } public static void main ( String args []) { Sub_class obj = new Sub_class (); obj . my_method (); } } ```","title":"Differentiating the members"},{"location":"java/UnitII/#invoking-superclass-constructor","text":"If a class is inheriting the properties of another class, the subclass automatically acquires the default constructor of the super class. But if you want to call a parametrized constructor of the super class, you need to use the super keyword as shown below. super ( values ); e . g . class Superclass { int age ; Superclass ( int age ) { this . age = age ; } public void getAge () { System . out . println ( \"The value of the variable named age in super class is: \" + age ); } } public class Subclass extends Superclass { Subclass ( int age ) { super ( age ); } public static void main ( String argd []) { Subclass s = new Subclass ( 24 ); s . getAge (); } }","title":"Invoking Superclass constructor"},{"location":"java/UnitII/#is-a-relationship","text":"IS-A is a way of saying : This object is a type of that object. Let us see how the extends keyword is used to achieve inheritance. public class Animal {} public class Mammal extends Animal {} public class Reptile extends Animal {} public class Dog extends Mammal {} With use of the extends keyword the subclasses will be able to inherit all the properties of the superclass except for the private properties of the superclass.","title":"IS-A Relationship"},{"location":"java/UnitII/#instanceof-keyword","text":"Let us use the instanceof operator to check determine whether Mammal is actually an Animal, and dog is actually an Animal","title":"Instanceof Keyword"},{"location":"java/UnitII/#can-you-use-both-this-and-super-in-a-constructor","text":"NO, because both super() and this() must be first statement inside a constructor. Hence we cannot use them together.","title":"Can you use both this() and super() in a Constructor?"},{"location":"java/UnitII/#difference-between-overloading-and-overriding","text":"Properties Overloading Overriding Overloading deals with multiple methods in the same class with the same name but different signatures Overriding deals with two methods, one in a parent class and one in a child class, that have the same signature Overloading lets you define a similar operation in different ways for different data Overriding lets you define a similar operation in different ways for different object types","title":"Difference between Overloading and Overriding"},{"location":"java/UnitII/#controlling-inheritance","text":"Visibility modifiers determine which class members are accessible and which do not Members (variables and methods) declared with publicvisibility are accessible, and those with private visibility are not Problem: How to make class/instance variables visible only to its subclasses? Solution: Java provides a third visibility modifier that helps in inheritance situations: protected","title":"Controlling inheritance"},{"location":"java/UnitII/#polymorphism","text":"Polymorphism is the ability of an object to take on many forms. The most common use of polymorphism in OOP occurs when a parent class reference is used to refer to a child class object. Any Java object that can pass more than one IS-A test is considered to be polymorphic. In Java, all Java objects are polymorphic since any object will pass the IS-A test for their own type and for the class Object. It is important to know that the only possible way to access an object is through a reference variable. A reference variable can be of only one type. Once declared, the type of a reference variable cannot be changed. The reference variable can be reassigned to other objects provided that it is not declared final. The type of the reference variable would determine the methods that it can invoke on the object. A reference variable can refer to any object of its declared type or any subtype of its declared type. A reference variable can be declared as a class or interface type. Polymorphism means one name, manyforms. There are 3 distinct forms of Java Polymorphism; Method overloading (Compile time polymorphism) Method overriding through inheritance (Run time polymorphism) Method overriding through the Java interface (Run time polymorphism) Polymorphism allows a referenceto denote objects of different types at different times during execution. Asuper type reference exhibits polymorphic behavior, since it can denote objectsof its subtypes. interface Shape { public double area (); public double volume (); } class Cube implements Shape { int x = 10 ; public double area ( ) { return ( 6 * x * x ); } public double volume () { return ( x * x * x ); } } class Circle implements Shape { int radius = 10 ; public double area () { return ( Math . PI * radius * radius ); } public double volume () { return 0 ; } } public class PolymorphismTest { public static void main ( String args []) { Shape [] s = { new Cube (), new Circle () }; for ( int i = 0 ; i < s . length ; i ++) { System . out . println ( \"The area and volume of \" + s [ i ]. getClass () + \" is \" + s [ i ]. area () + \" , \" + s [ i ]. volume ()); } } } //Output The area and volume of class Cube is 600.0 , 1000.0 The area and volume of class Circle is 314.1592653589793 , 0.0 The methods area() and volume() are overridden in the implementingclasses. The invocation of the both methods area and volume is determined basedon run time polymorphism of the current object as shown in the output.","title":"Polymorphism"},{"location":"java/UnitII/#wrapper-classes","text":"Vectors cannot handle primitive datatypes like int, float,long, char, and double. Primitive data types may be converted into object typesusing the wrapper classes contained in the java.lang.package. The following table gives the details about those classes andmethods used for converting storing data to fundamental data: DATA TYPES WRAPPER CLASS CONVERTION METHOD FROM STRING DATA TO FUNDAMENTAL DATA TYPE Converting Object Numbers to Primitive Number Using typeValue() method byte Byte public static byte parseByte (string) short Short public static short parseShort (string) int Integer public static int parseInt (string) int i = IntVal.intValue(); long Long public static long parseLong (string) Long i = LongVal.longValue(); float Float public static float parseFloat (string) float i = FloatVal.floatValue(); double Double public static double parseDouble (string) double i = DoubleVal.doubletValue(); char Char public static char parseChar (string) boolean Boolean public static boolean parseBoolean(string) Wrapper classes are basically used for converting the string data into fundamental data type. Each and every wrapper class contains the following generalized parse methods. public static Xxx parseXxx (String); here, Xxx represents fundamental data type. The wrapper classes have a number of unique methods for handling primitive data types and objects Whenever we develop a JAVA program it is recommended to write \u2018n\u2019 number of business logic classes and single execution logic class. A business logic class is one which contains \u2018n\u2019 number of user defined methods in which we write business logic. Business logic is one which is provided by JAVA programmer according business rules (requirements) started by customer. Whatever data we represent in JAVA runtime environment it is by default treated as objects of string data. As a programmer when we start any JAVA program an object of string class is created depends on number of values we pass.","title":"Wrapper Classes"},{"location":"java/UnitIII/","text":"Unit III String Link String handling: The string constructor, string length, special string operator character extraction, string comparison, searching string, modifying string, data conversion, changing the case of characters, string buffer. Introduction to String Handling String is probably the most commonly used class in java library. String class is encapsulated under java.lang package. In java, every string that you create is an object of type String. One important thing to notice about string object is that string objects are immutable that means once a string object is created it cannot be altered. An object of the String class represents a string of characters. Literal Strings : Literal strings are anonymous constant objects of the String class that are defined as text in double quotes. Literal strings don\u2019t have to be constructed: they are \u201cjustthere.\u201d Strings1 = \"Biology\u201d; Strings2 = \" C : \\\\ jdk1 .4 \\\\ docs \" ; Strings3 = \" Hello \\ n \" ; Empty Strings An emptystring has no characters; its length is 0. Not to be confused with anuninitialized string: Strings1 = \"\" ; Strings2 = new String (); private String errorMsg ; errorMsg is null What is an Immutableobject? Anobject whose state cannot changed afterit is created is known as an Immutable object. String, Integer, Byte, Short,Float, Double and all other wrapper class's objects are immutable. Immutableobjects are convenient because several references can point to the same objectsafely: there is no danger of changing an object through one reference withoutthe others being aware of the change. Creating an Immutableclass publicfinal class MyString { final String str ; MyString ( String s ) { this . str = s ; } public String get () { return str ;* } } Inthis example MyString is an immutable class. MyString's state cannot be changedonce it is created. Creating a String object Stringcan be created in number of ways, here are a few ways of creating stringobject. Using a Stringliteral: String literal is a simple string enclosed in double quotes \"\" . A string literal is treated as a Sting object. String str1 = \"Hello\" ; Using anotherString object: String str2 = new String ( str1 ); 3. *Using new Keyword:* String str3 = new String ( \"Java\" ); Using +operator (Concatenation) String str4 = str1 + str2 ; * or , * String str5 = \"hello\" + \"Java\" ; Eachtime you create a String literal, the JVM checks the string pool first. If thestring literal already exists in the pool, a reference to the pool instance is returned.If string does not exist in the pool, a new string object is created,and is placed in the pool. String objects are stored in a special memory areaknown as string constant pool inside the heap memory. String object and How theyare stored Whenwe create a new string object using string literal, that string literal isadded to the string pool, if it is not presentthere already. Stringstr = \"Hello\" ; And,when we create another object with same string, then a reference of the stringliteral already present in stringpool is returned. Stringstr2 = str ;* Butif we change the new string, its reference gets modified. str2 = str2 . concat ( \"world\" ); Concatenating String Thereare 2 methods to concatenate two or more string. Using concat()method Using + operator **1. ****Using concat()method: ** string s = \"Hello\" ; string str = \"Java\" ; string str2 = s . concat ( str ); String str1 = \"Hello\" . concat ( \"Java\" ); //works with string literals too 2. ****Using +operator * string str = \"Rahul\" ;* * string str1 = \"Dravid\" ;* * string str2 = str + str1 ;* * string st = \"Rahul\" + \"Dravid\" ;* String Comparison Stringcomparison can be done in 3 ways. Using equals()method Using ==operator By CompareTo()method **Using equals() method: **equals() methodcompares two strings for equality. Its general syntax is, boolean equals(Object str). It compares the content of the strings. It will return true ifstring matches, else returns false. String s = \"Hell\" ; String s1 = \"Hello\" ; String s2 = \"Hello\" ; s1 . equals ( s2 ); //true s . equals ( s1 ) ; //false 2. Using == operator == operator compares two object references tocheck whether they refer to same instance. This also, will return true onsuccessful match. String s1 = \"Java\" ; String s2 = \"Java\" ; String s3 = new string ( \"Java\" ); test ( Sl == s2 ) //true test ( s1 == s3 ) //false 3. ****By compareTo()method: **compareTo()method compares values and returns an int which tells if the string compared isless than, equal to or greater than th other string. Its general syntax is,** int compareTo ( String str ) To use this function youmust implement the Comparable Interface. compareTo() is the only function in* Comparable Interface.* String s1 = \"Abhi\" ; String s2 = \"Viraaj\" ; * String s3 = \"Abhi\" ; * s1 . compareTo ( S2 ); //return -1 because s1 < s2 * s1 . compareTo ( S3 ); //return 0 because s1 == s3 * s2 . compareTo ( s1 ); //return 1 because s2 > s1 charAt(): **charAt()function returns the character located at the specified index.** String str = \"studytonight\" ; System . out . println ( str . charAt ( 2 )); //Output : u equalsIgnoreCase(): **equalsIgnoreCase()determines the equality of two Strings, ignoring thier case (upper or lowercase doesn't matters with this fuction ).** String str = \"java\" ; System . out . println ( str . equalsIgnoreCase ( \"JAVA\" )); //Output: true **length() : **length()function returns the number of characters in a String. String str = \"Count me\"; System.out.println(str.length()); * public class StringDemo{ public static void main(String args[]){ String palindrome =\"Dot saw I was Tod\"; int len = palindrome.length(); System.out.println(\"String Length is :\"+ len ); } } Output: 8 **replace(): **replace()method replaces occurances of character with a specified new character. String str = \"Change me\"; System.out.println(str.replace('m','M')); Output: Change Me **substring(): **substring()method returns a part of the string. substring() method has two forms, publicString substring(int begin); publicString substring(int begin, int end); Thefirst argument represents the starting point of the subtring. If thesubstring() method is called with only one argument, the subtring returned,will contain characters from specified starting point to the end of original string.But, if the call to substring() method has two arguments, the second argumentspecify the end point of substring. Stringstr = \"0123456789\"; System.out.println(str.substring(4)); Output: 456789 System.out.println(str.substring(4,7)); Output: 456 toLowerCase(): **toLowerCase()method returns string with all uppercase characters converted to lowercase.** String str = \"ABCDEF\"; System.out.println(str.toLowerCase()); Output: abcdef **valueOf(): **Overloadedversion of valueOf() method is present in String class for all primitive datatypes and for type Object. NOTE: valueOf() function is used to convert primitive data types into Strings. Butfor objects, valueOf() method calls toString() function. **toString(): **toString()method returns the string representation of the object used to invoke thismethod. toString() is used to represent any Java Object into a meaningfulstring representation. It is declared in the Object class, hence can beoverrided by any java class. (Object class is super class of all java classes.) public class Car { public static void main(String args[]) { Car c=new Car(); System.out.println\u00a9; } public String toString() { return \"This is my car object\"; } } Output: This is my car object Wheneverwe will try to print any object of class Car, its toString() function will becalled. toString() can also be used with normal string objects. Stringstr = \"Hello World\"; System.out.println(str.toString()); Output: Hello World **toString() withConcatenation: **Whenever we concatenate any other primitive data type, orobject of other classes with a String object, toString() function or valueOf()function is called automatically to change the other object or primitive type intostring, for successful concatenation. intage = 10; Stringstr = \"He is\" + age + \"years old.\"; Inabove case 10 will be automatically converted into string for concatenationusing valueOf() function. **toUpperCase(): **This methodreturns string with all lowercase character changed to uppercase. Stringstr = \"abcdef\"; System.out.println(str.toLowerCase()); Output: ABCDEF **trim(): **This methodreturns a string from which any leading and trailing whitespaces has beenremoved. Stringstr = \" hello \"; System.out.println(str.trim()); Output: hello **Creating Format Strings: **You have printf() and format() methods to printoutput with formatted numbers. The String class has an equivalent class method,format(), that returns a String object rather than a PrintStream object. UsingString's static format() method allows you to create a formatted string thatyou can reuse, as opposed to a one-time print statement. For example, insteadof: System.out.printf(\"Thevalue of the float variable is \"+ \"%f, while the value of the integer\"+ \"variable is %d, and the string \"+ \"is %s\", floatVar,intVar, stringVar); youcan write: Stringfs; fs =String.format(\"Thevalue of the float variable is \"+\"%f, while the value of the integer\"+\"variable is %d, and the string \"+\"is %s\", floatVar,intVar, stringVar); System.out.println(fs)** StringBuffer class Link StringBufferclass is used to create a mutable string object. It represents growable andwritable character sequence.As we know that String objects are immutable, so if we do a lot of changes withString objects, we willend up with a lot of memory leak. So StringBuffer class is used when we have tomake lot of modifications to our string. It is also thread safe i.e multiplethreads cannot access it simultaneously. StringBuffer defines 4 constructors.They are, StringBuffer () StringBuffer (int size ) StringBuffer (String str ) StringBuffer (charSequence [ ]ch ) StringBuffer()creates an empty string buffer and reserves room for 16 characters. stringBuffer(intsize) creates an empty string and takes an integer argument to set capacity ofthe buffer. Example showing differencebetween String and StringBuffer class Test { public static void main(String args[]) { String str = \"study\"; str.concat(\"tonight\"); System.out.println(str); // Output: study StringBuffer strB = newStringBuffer(\"study\"); strB.append(\"tonight\"); System.out.println(strB); // Output: studytonight } } Important methods ofStringBuffer class Thefollowing methods are some most commonly used methods of StringBuffer class. append() . This method will concatenatethe string representation of any type of data to the end of the invoking StringBufferobject. append() method has several overloaded forms. StringBufferappend(String str) StringBufferappend(int n) StringBufferappend(Object obj) Thestring representation of each parameter is appended to StringBuffer object. StringBufferstr = new StringBuffer(\"test\"); str.append(123); System.out.println(str); Output: test123 insert(): **This methodinserts one string into another. Here are few forms of insert() method.** StringBufferinsert(int index, String str) StringBufferinsert(int index, int num) StringBufferinsert(int index, Object obj) Herethe first parameter gives the index at which position the string will beinserted and string representation of second parameter is inserted intoStringBuffer object. StringBufferstr = new StringBuffer(\"test\"); str.insert(4,123); System.out.println(str); Output: test123 reverse(): **This methodreverses the characters within a StringBuffer object.** StringBufferstr = new StringBuffer(\"Hello\"); str.reverse(); System.out.println(str); Output: olleH replace(): **This methodreplaces the string from specified start index to the end index.** StringBufferstr = new StringBuffer(\"Hello World\"); str.replace(6, 11, \"java\"); System.out.println(str); Output: Hello java **capacity(): **This methodreturns the current capacity of StringBuffer object. StringBufferstr = new StringBuffer(); System.out.println(str.capacity() ); Output: 16 ensureCapacity(): **This method isused to ensure minimum capacity of StringBuffer object. StringBuffer str = new StringBuffer(\"hello\");** str.ensureCapacity(10); String Builder Link StringBuilderis identical to StringBuffer except for one important difference it is notsynchronized, which means it is not thread safe. Its because StringBuildermethods are not synchronised. StringBuilder Constructors StringBuilder (), creates an empty StringBuilder and reserves room for 16 characters. StringBuilder (int size ), create an empty string and takes an integer argument to setcapacity of the buffer. StringBuilder (String str ), create a StringBuilder object and initialize it with string str. Difference betweenStringBuffer and StringBuilder class StringBuffer class StringBuilder class StringBuffer is synchronized. StringBuilder is not synchronized. Because of synchronisation, StringBuffer operation is slower than StringBuilder. StringBuilder operates faster. Example of StringBuilder classTest { publicstatic void main(String args[]) { StringBuilderstr = new StringBuilder(\"study\"); str.append(\"tonight\" ); System.out.println(str); str.replace(6, 13, \"today\"); System.out.println(str); str.reverse(); System.out.println(str); str.replace(6, 13, \"today\"); } } Output:studytonight studyttoday yadottyduts","title":"Unit III String"},{"location":"java/UnitIII/#unit-iii-string","text":"String handling: The string constructor, string length, special string operator character extraction, string comparison, searching string, modifying string, data conversion, changing the case of characters, string buffer. Introduction to String Handling String is probably the most commonly used class in java library. String class is encapsulated under java.lang package. In java, every string that you create is an object of type String. One important thing to notice about string object is that string objects are immutable that means once a string object is created it cannot be altered. An object of the String class represents a string of characters. Literal Strings : Literal strings are anonymous constant objects of the String class that are defined as text in double quotes. Literal strings don\u2019t have to be constructed: they are \u201cjustthere.\u201d Strings1 = \"Biology\u201d; Strings2 = \" C : \\\\ jdk1 .4 \\\\ docs \" ; Strings3 = \" Hello \\ n \" ; Empty Strings An emptystring has no characters; its length is 0. Not to be confused with anuninitialized string: Strings1 = \"\" ; Strings2 = new String (); private String errorMsg ; errorMsg is null What is an Immutableobject? Anobject whose state cannot changed afterit is created is known as an Immutable object. String, Integer, Byte, Short,Float, Double and all other wrapper class's objects are immutable. Immutableobjects are convenient because several references can point to the same objectsafely: there is no danger of changing an object through one reference withoutthe others being aware of the change. Creating an Immutableclass publicfinal class MyString { final String str ; MyString ( String s ) { this . str = s ; } public String get () { return str ;* } } Inthis example MyString is an immutable class. MyString's state cannot be changedonce it is created. Creating a String object Stringcan be created in number of ways, here are a few ways of creating stringobject. Using a Stringliteral: String literal is a simple string enclosed in double quotes \"\" . A string literal is treated as a Sting object. String str1 = \"Hello\" ; Using anotherString object: String str2 = new String ( str1 ); 3. *Using new Keyword:* String str3 = new String ( \"Java\" ); Using +operator (Concatenation) String str4 = str1 + str2 ; * or , * String str5 = \"hello\" + \"Java\" ; Eachtime you create a String literal, the JVM checks the string pool first. If thestring literal already exists in the pool, a reference to the pool instance is returned.If string does not exist in the pool, a new string object is created,and is placed in the pool. String objects are stored in a special memory areaknown as string constant pool inside the heap memory. String object and How theyare stored Whenwe create a new string object using string literal, that string literal isadded to the string pool, if it is not presentthere already. Stringstr = \"Hello\" ; And,when we create another object with same string, then a reference of the stringliteral already present in stringpool is returned. Stringstr2 = str ;* Butif we change the new string, its reference gets modified. str2 = str2 . concat ( \"world\" ); Concatenating String Thereare 2 methods to concatenate two or more string. Using concat()method Using + operator **1. ****Using concat()method: ** string s = \"Hello\" ; string str = \"Java\" ; string str2 = s . concat ( str ); String str1 = \"Hello\" . concat ( \"Java\" ); //works with string literals too 2. ****Using +operator * string str = \"Rahul\" ;* * string str1 = \"Dravid\" ;* * string str2 = str + str1 ;* * string st = \"Rahul\" + \"Dravid\" ;* String Comparison Stringcomparison can be done in 3 ways. Using equals()method Using ==operator By CompareTo()method **Using equals() method: **equals() methodcompares two strings for equality. Its general syntax is, boolean equals(Object str). It compares the content of the strings. It will return true ifstring matches, else returns false. String s = \"Hell\" ; String s1 = \"Hello\" ; String s2 = \"Hello\" ; s1 . equals ( s2 ); //true s . equals ( s1 ) ; //false 2. Using == operator == operator compares two object references tocheck whether they refer to same instance. This also, will return true onsuccessful match. String s1 = \"Java\" ; String s2 = \"Java\" ; String s3 = new string ( \"Java\" ); test ( Sl == s2 ) //true test ( s1 == s3 ) //false 3. ****By compareTo()method: **compareTo()method compares values and returns an int which tells if the string compared isless than, equal to or greater than th other string. Its general syntax is,** int compareTo ( String str ) To use this function youmust implement the Comparable Interface. compareTo() is the only function in* Comparable Interface.* String s1 = \"Abhi\" ; String s2 = \"Viraaj\" ; * String s3 = \"Abhi\" ; * s1 . compareTo ( S2 ); //return -1 because s1 < s2 * s1 . compareTo ( S3 ); //return 0 because s1 == s3 * s2 . compareTo ( s1 ); //return 1 because s2 > s1 charAt(): **charAt()function returns the character located at the specified index.** String str = \"studytonight\" ; System . out . println ( str . charAt ( 2 )); //Output : u equalsIgnoreCase(): **equalsIgnoreCase()determines the equality of two Strings, ignoring thier case (upper or lowercase doesn't matters with this fuction ).** String str = \"java\" ; System . out . println ( str . equalsIgnoreCase ( \"JAVA\" )); //Output: true **length() : **length()function returns the number of characters in a String. String str = \"Count me\"; System.out.println(str.length()); * public class StringDemo{ public static void main(String args[]){ String palindrome =\"Dot saw I was Tod\"; int len = palindrome.length(); System.out.println(\"String Length is :\"+ len ); } } Output: 8 **replace(): **replace()method replaces occurances of character with a specified new character. String str = \"Change me\"; System.out.println(str.replace('m','M')); Output: Change Me **substring(): **substring()method returns a part of the string. substring() method has two forms, publicString substring(int begin); publicString substring(int begin, int end); Thefirst argument represents the starting point of the subtring. If thesubstring() method is called with only one argument, the subtring returned,will contain characters from specified starting point to the end of original string.But, if the call to substring() method has two arguments, the second argumentspecify the end point of substring. Stringstr = \"0123456789\"; System.out.println(str.substring(4)); Output: 456789 System.out.println(str.substring(4,7)); Output: 456 toLowerCase(): **toLowerCase()method returns string with all uppercase characters converted to lowercase.** String str = \"ABCDEF\"; System.out.println(str.toLowerCase()); Output: abcdef **valueOf(): **Overloadedversion of valueOf() method is present in String class for all primitive datatypes and for type Object. NOTE: valueOf() function is used to convert primitive data types into Strings. Butfor objects, valueOf() method calls toString() function. **toString(): **toString()method returns the string representation of the object used to invoke thismethod. toString() is used to represent any Java Object into a meaningfulstring representation. It is declared in the Object class, hence can beoverrided by any java class. (Object class is super class of all java classes.) public class Car { public static void main(String args[]) { Car c=new Car(); System.out.println\u00a9; } public String toString() { return \"This is my car object\"; } } Output: This is my car object Wheneverwe will try to print any object of class Car, its toString() function will becalled. toString() can also be used with normal string objects. Stringstr = \"Hello World\"; System.out.println(str.toString()); Output: Hello World **toString() withConcatenation: **Whenever we concatenate any other primitive data type, orobject of other classes with a String object, toString() function or valueOf()function is called automatically to change the other object or primitive type intostring, for successful concatenation. intage = 10; Stringstr = \"He is\" + age + \"years old.\"; Inabove case 10 will be automatically converted into string for concatenationusing valueOf() function. **toUpperCase(): **This methodreturns string with all lowercase character changed to uppercase. Stringstr = \"abcdef\"; System.out.println(str.toLowerCase()); Output: ABCDEF **trim(): **This methodreturns a string from which any leading and trailing whitespaces has beenremoved. Stringstr = \" hello \"; System.out.println(str.trim()); Output: hello **Creating Format Strings: **You have printf() and format() methods to printoutput with formatted numbers. The String class has an equivalent class method,format(), that returns a String object rather than a PrintStream object. UsingString's static format() method allows you to create a formatted string thatyou can reuse, as opposed to a one-time print statement. For example, insteadof: System.out.printf(\"Thevalue of the float variable is \"+ \"%f, while the value of the integer\"+ \"variable is %d, and the string \"+ \"is %s\", floatVar,intVar, stringVar); youcan write: Stringfs; fs =String.format(\"Thevalue of the float variable is \"+\"%f, while the value of the integer\"+\"variable is %d, and the string \"+\"is %s\", floatVar,intVar, stringVar); System.out.println(fs)**","title":"Unit III String"},{"location":"java/UnitIII/#stringbuffer-class","text":"StringBufferclass is used to create a mutable string object. It represents growable andwritable character sequence.As we know that String objects are immutable, so if we do a lot of changes withString objects, we willend up with a lot of memory leak. So StringBuffer class is used when we have tomake lot of modifications to our string. It is also thread safe i.e multiplethreads cannot access it simultaneously. StringBuffer defines 4 constructors.They are, StringBuffer () StringBuffer (int size ) StringBuffer (String str ) StringBuffer (charSequence [ ]ch ) StringBuffer()creates an empty string buffer and reserves room for 16 characters. stringBuffer(intsize) creates an empty string and takes an integer argument to set capacity ofthe buffer. Example showing differencebetween String and StringBuffer class Test { public static void main(String args[]) { String str = \"study\"; str.concat(\"tonight\"); System.out.println(str); // Output: study StringBuffer strB = newStringBuffer(\"study\"); strB.append(\"tonight\"); System.out.println(strB); // Output: studytonight } } Important methods ofStringBuffer class Thefollowing methods are some most commonly used methods of StringBuffer class. append() . This method will concatenatethe string representation of any type of data to the end of the invoking StringBufferobject. append() method has several overloaded forms. StringBufferappend(String str) StringBufferappend(int n) StringBufferappend(Object obj) Thestring representation of each parameter is appended to StringBuffer object. StringBufferstr = new StringBuffer(\"test\"); str.append(123); System.out.println(str); Output: test123 insert(): **This methodinserts one string into another. Here are few forms of insert() method.** StringBufferinsert(int index, String str) StringBufferinsert(int index, int num) StringBufferinsert(int index, Object obj) Herethe first parameter gives the index at which position the string will beinserted and string representation of second parameter is inserted intoStringBuffer object. StringBufferstr = new StringBuffer(\"test\"); str.insert(4,123); System.out.println(str); Output: test123 reverse(): **This methodreverses the characters within a StringBuffer object.** StringBufferstr = new StringBuffer(\"Hello\"); str.reverse(); System.out.println(str); Output: olleH replace(): **This methodreplaces the string from specified start index to the end index.** StringBufferstr = new StringBuffer(\"Hello World\"); str.replace(6, 11, \"java\"); System.out.println(str); Output: Hello java **capacity(): **This methodreturns the current capacity of StringBuffer object. StringBufferstr = new StringBuffer(); System.out.println(str.capacity() ); Output: 16 ensureCapacity(): **This method isused to ensure minimum capacity of StringBuffer object. StringBuffer str = new StringBuffer(\"hello\");** str.ensureCapacity(10);","title":"StringBuffer class"},{"location":"java/UnitIII/#string-builder","text":"StringBuilderis identical to StringBuffer except for one important difference it is notsynchronized, which means it is not thread safe. Its because StringBuildermethods are not synchronised. StringBuilder Constructors StringBuilder (), creates an empty StringBuilder and reserves room for 16 characters. StringBuilder (int size ), create an empty string and takes an integer argument to setcapacity of the buffer. StringBuilder (String str ), create a StringBuilder object and initialize it with string str. Difference betweenStringBuffer and StringBuilder class StringBuffer class StringBuilder class StringBuffer is synchronized. StringBuilder is not synchronized. Because of synchronisation, StringBuffer operation is slower than StringBuilder. StringBuilder operates faster. Example of StringBuilder classTest { publicstatic void main(String args[]) { StringBuilderstr = new StringBuilder(\"study\"); str.append(\"tonight\" ); System.out.println(str); str.replace(6, 13, \"today\"); System.out.println(str); str.reverse(); System.out.println(str); str.replace(6, 13, \"today\"); } } Output:studytonight studyttoday yadottyduts","title":"String Builder"},{"location":"java/UnitIV/","text":"Unit IV Link Multi threaded Programming: The Java thread model, the main thread, creating thread, creating multiple thread, using is alive () and join (). Thread priorities, synchronization, Inter thread communications, suspending resuming and stopping thread using multi threading. Exception handling: Exception handling fundamentals Introduction Link Thread Link A program can be divided into a number of smallprocesses. Each small process can be addressed as a single thread (alightweight process). Multithreaded programs contain two or more threads thatcan run concurrently.A flow of control is known as thread. If a program contains multiple flow of controlsfor achieving concurrent execution, then that program is known asmulti-threaded program. A program is said to be a multithreaded programif and only if in which there exist n number of subprograms there exist aseparate flow of control. All such flow of control executing concurrently suchflow of controls are known as threads and such type of applications or programis called multi-threaded programs. The language like C, C++ comes under singlethreaded modelling languages, since there exists single flow of controlswhereas the language like java are treated as multi-threaded modellinglanguages, since there is a possibility of creating multiple flow of control In java program, there exist two threads theyare foreground and background thread. Foreground threads are those which are executinguser defined sub programs where as background threads are those which aremonitoring the status of foreground threads. There is possibility of creating n-number of foregroundthreads and always there exist single background thread. Multithreading is the specialized form ofmultitasking of operating system. In information technology, we can develop two types of applications. They are process based applications and thread based applications. S.No. Process Based Applications Thread Based Applications 1 It is the one in which there exist single flow of control. It is the one in which there exist multiple flow of controls. 2 All C, C++ applications comes under it. All JAVA, DOT NET applications comes under it. 3 Context switch is more (context switch is the concept of operating system and it says switching the control from one address page to another address page). Context switch is very less. 4 For each and every sub-program there exist separate address pages. Irrespective of \u2018n\u2019 number of subprograms there exist single address page. 5 These are treated as heavy weight components. These are treated as light weight components. 6 In this we can achieve only sequential execution and they are not recommending for developing internet applications. In thread based applications we can achieve both sequential and concurrent execution and they are always recommended for developing interact applications. How Thread executes internally A program can perform two or more tasks simultaneously. For example, one thread is writing content on a file at the same time another thread is performing spelling check.**** In Java, the word thread means two different things.**** 1. **An instance of Thread class. or,** 2. **A thread of execution.** An instance of Thread class is just an object, like anyother object in java. But a thread of execution means an**** individual \"lightweight\" process that has its owncall stack. In java, each thread has its own call stack.**** A program can be divided into a number of small processes. Each small process can be addressed as a single thread (a lightweight process). Multi-threaded programs contain two or more threads that can run concurrently. This means that a single program can perform two or more tasks simultaneously. For example, one thread is writing content on a file at the same time another thread is performing spelling check.Java is a multi threaded programming language which means we can develop multi threaded program using Java. A multi threaded program contains two or more parts that can run concurrently and each part can handle different task at the same time making optimal use of the available resources specially when your computer has multiple CPUs. By definition multitasking is when multiple processes share common processing resources such as a CPU. Multi threading extends the idea of multitasking into applications where you can subdivide specific operations within a single application into individual threads. Each of the threads can run in parallel. The OS divides processing time not only among different applications, but also among each thread within an application. Multi threading enables you to write in a way where multiple activities can proceed concurrently in the same program. Life Cycle of a Thread(State of Thread) Link When we write any multi-threading applications, there exist \u2018n\u2019 numbers of threads. All the threads will undergo different types of states. A thread goes through various stages in its life cycle. For example, a thread is born, started, runs, and then dies. Following diagram shows complete life cycle of a thread. A thread goes through various stages in its life cycle. For example, a thread is born, started, runs, and then dies. Following diagram shows complete life cycle of a thread. Above-mentioned stages are explained here: New State : A new thread begins its life cycle in the new state. It remains in this state until the program starts the thread. It is also referred to as a born thread. **Ready State : **It is one in which the thread is entered into memory space allocated and it is waiting for CPU for executing. Runnable : After a newly born thread is started, the thread becomes runnable. A thread in this state is considered to be executing its task. Running state : A state is said to be a running state if and only if the thread is under the control of CPU. Waiting State: Sometimes, a thread transitions to the waiting state while the thread waits for another thread to perform a task.A thread transitions back to the runnable state only when another thread signals the waiting thread to continue executing.It is one in which the thread is waiting becauseof the following factors: For the repeating CPU, burst time of the thread(CPU burst time is an amount of the required by the thread by the CPU). Make the thread to sleep for sleep for some specified amount of time. Make the thread to suspend. Make the thread to wait for a period of time. Make the thread to wait without specifying waiting time Timed waiting: A runnable thread can enter the timed waiting state for a specified interval of time. A thread in this state transitions back to the runnable state when that time interval expires or when the event it is waiting for occurs. Halted State or Terminated Dead: A runnable thread enters the terminated state when it completes its task or otherwise terminates.It is one in which the thread has completed its total execution. As long as the thread is in new and halted states whose execution status is false whereas when the thread is in ready, running and waiting states that execution states is true. Thread Priorities Link Every Java thread has a priority that helps the operating system determine the order in which threads are scheduled. Java thread priorities are in the range between MIN_PRIORITY aconstantof1 and MAX_PRIORITY aconstantof10. By default, every thread is given priority NORM_PRIORITY aconstantof5. Threads with higher priority are more important to a program and should be allocated processor time before lower-priority threads. However, thread priorities cannot guarantee the order in which threads execute and very much platform dependent. public static final int MAX_PRIORITY (10); public static final int MIN_PRIORITY (1); public static final int NORM_PRIORITY (5); The above data members are used for setting the priority to threads are created. By default, whenever a thread is created whose default priority NORM_PRIORITY. Creating Thread Link Java defines two ways by which a thread can be created. By extending the Thread class( java.lang.Thread ). By implementing the Runnable interface(**java.lang.Runnable **). \u200b Create Thread by Implementing Runnable Interface Link If your class is intended to be executed as a thread then you can achieve this by implementing Runnable interface. You will need to follow three basic steps: Step 1: As a first step you need to implement a run method provided by Runnable interface. This method provides entry point for the thread and you will put you complete business logic inside this method. Following is simple syntax of run method: public void run( ) Step 2: At second step you will instantiate a Thread object using the following constructor: Thread(Runnable threadObj, String threadName); Where, threadObj is an instance of a class that implements the Runnable interface and threadName is the name given to the new thread. Step 3 Once Thread object is created, you can start it by calling start method, which executes a call to run method. Following is simple syntax of start method: void start( ); Example: Here is an example that creates a new thread and starts it running : class RunnableDemo implements Runnable { private Thread t ; private String threadName ; RunnableDemo ( String name ){ threadName = name ; System . out . println ( \"Creating \" + threadName ); } public void run () { System . out . println ( \"Running \" + threadName ); try { for ( int i = 4 ; i > 0 ; i --) { System . out . println ( \"Thread: \" + threadName + \", \" + i ); // Let the thread sleep for a while. Thread . sleep ( 50 ); } } catch ( InterruptedException e ) { System . out . println ( \"Thread \" + threadName + \" interrupted.\" ); } System . out . println ( \"Thread \" + threadName + \" exiting.\" ); } public void start () { System . out . println ( \"Starting \" + threadName ); if ( t == null ) { t = new Thread ( this , threadName ); t . start (); } } } public class TestThread { public static void main ( String args []) { RunnableDemo R1 = new RunnableDemo ( \"Thread-1\" ); R1 . start (); RunnableDemo R2 = new RunnableDemo ( \"Thread-2\" ); R2 . start (); } } This would produce the following result : Creating Thread - 1 Starting Thread - 1 Creating Thread - 2 Starting Thread - 2 Running Thread - 1 Thread: Thread - 1 , 4 Running Thread - 2 Thread: Thread - 2 , 4 Thread: Thread - 1 , 3 Thread: Thread - 2 , 3 Thread: Thread - 1 , 2 Thread: Thread - 2 , 2 Thread: Thread - 1 , 1 Thread: Thread - 2 , 1 Thread Thread - 1 exiting . Thread Thread - 2 exiting . Create Thread by Extending Thread Class: Link Thread class is the main class on which Java's Multithreading system is based. Thread class, along with its companion interface Runnable will be used to create and run threads for utilizing Multithreading feature of Java. Thread class is the main class on which Java's Multithreading system is based. Creating a flow of control in JAVA is nothing but creating an object of java.lang.Thread class. An object of Thread class can be created in three ways. They are: Directly Thread t=new Thread (); Using factory method Thread t1=Thread.currentThread (); Using sub-class of Thread class class C1 extends Thread { \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026 ; \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026 ; }; C1 o1 = new C1 (); Threadt1 = new C1 (); Here, C1 is the sub-class ofThread class. Thread API: Constructors of Thread class Thread ( ) Thread ( String str ) Thread ( Runnable r ) Thread ( Runnable r, String str) Thread () : With this Constructor, we can create an object of the Thread class whose default thread name is Thread-0. For example: Thread t=new Thread (); System.out.println (t.getName ());// Thread-0 Thread (String str) : This Constructor is used for creating a thread and we can give the user specified thread name. For example: Thread t=new Thread (\u201cJAVA\u201d); t.setName (\u201cJAVA\u201d); t.setPriority (Thread.MAX_PRIORITY); Thread (Runnable r): This Constructor is used for converting Runnable object into Thread object for entering into run method of Runnable interface by making use of start method of Thread class without giving thread name. Thread (Runnable r, String str): This Constructor is similar to above Constructor but we give thread name through this Constructor. The second way to create a thread is to create a new class that extends Thread class using the following two simple steps. This approach provides more flexibility in handling multiple threads created using available methods in Thread class. Step 1 You will need to override run method available in Thread class. This method provides entry point for the thread and you will put you complete business logic inside this method. Following is simple syntax of run method: public void run ( ) Step 2 Once Thread object is created, you can start it by calling start method, which executes a call to run method. Following is simple syntax of start method: void start ( ); Example: Here is the preceding program rewritten to extend Thread : class ThreadDemo extends Thread { private Thread t ; private String threadName ; ThreadDemo ( String name ){ threadName = name ; System . out . println ( \"Creating \" + threadName ); } public void run () { System . out . println ( \"Running \" + threadName ); try { for ( int i = 4 ; i > 0 ; i --) { System . out . println ( \"Thread: \" + threadName + \", \" + i ); // Let the thread sleep for a while. Thread . sleep ( 50 ); } } catch ( InterruptedException e ) { System . out . println ( \"Thread \" + threadName + \" interrupted.\" ); } System . out . println ( \"Thread \" + threadName + \" exiting.\" ); } public void start () { System . out . println ( \"Starting \" + threadName ); if ( t == null ) { t = new Thread ( this , threadName ); t . start (); } } } public class TestThread { public static void main ( String args []) { ThreadDemo T1 = new ThreadDemo ( \"Thread-1\" ); T1 . start (); ThreadDemo T2 = new ThreadDemo ( \"Thread-2\" ); T2 . start (); } } This would produce the following result : Creating Thread - 1 Starting Thread - 1 Creating Thread - 2 Starting Thread - 2 Running Thread - 1 Thread: Thread - 1 , 4 Running Thread - 2 Thread: Thread - 2 , 4 Thread: Thread - 1 , 3 Thread: Thread - 2 , 3 Thread: Thread - 1 , 2 Thread: Thread - 2 , 2 Thread: Thread - 1 , 1 Thread: Thread - 2 , 1 Thread Thread - 1 exiting . Thread Thread - 2 exiting . Thread Methods: Link Following is the list of important methods available in the Thread class. Instance Method Link public void start() : Starts the thread in a separate path of execution, then invokes the run method on this Thread object. This is the method which is used for making the Thread to start to execute the thread logic. The method start is internally calling the method run (). For example: Thread t1=new Thread (); t1.start (); Thread t2=Thread.currentThread (); t2.start (); public final void suspend (): This method is used for suspending the thread from current execution of thread. When the thread is suspended, it sends to waiting state by keeping the temporary results in process control block (PCB) or job control block (JCB). public void run() : If this Thread object was instantiated using a separate Runnable target, the run method is invoked on that Runnable object. Any JAVA programmer want to define a logic for the thread that logic must be defined only run () method. When the thread is started, the JVM looks for the appropriate run () method for executing the logic of the thread. Thread class is a concrete class and it contains all defined methods and all these methods are being to final except run () method. run () method is by default contains a definition with null body. Since we are providing the logic for the thread in run () method. Hence it must be overridden by extending Thread class into our own class. For example: class C1 extends Thread { public void run () { \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026; \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026; } }; public final void setName(String name) : Changes the name of the Thread object. There is also a getName method for retrieving the name. public final void setPriority(int priority): Sets the priority of this Thread object. The possible values are between 1 and 10. public final int getPriority (); The above two methods are used for setting the priority to the thread and getting the priority of the thread respectively. For example: Thread t1=new Thread (); Int pri=t1.getPriority (); System.out.println (pri);// 5 by default t1.setPriority (Thread.MAX_PRIORITY); pri=t1.getPriority (); System.out.println (pri); // 10 public final void setDaemon(booleanon) : A parameter of true denotes this Thread as a daemon thread. public final void join(long millisec) : The current thread invokes this method on a second thread, causing the current thread to block until the second thread terminates or the specified number of milliseconds passes. public void interrupt() : Interrupts this thread, causing it to continue execution if it was blocked for any reason. public final boolean isAlive(): Returns true if the thread is alive, which is any time after the thread has been started but before it runs to completion. public final void resume (): This method is used for bringing the suspended thread from waiting state to ready state. When the thread is resumed to start executing from where it left out previously by retrieving the previous result from PCB. public final void stop (): This method is used to stop the execution of the current thread and the thread goesto halted state from running state. When the thread is restarted, it starts executing from the beginning only. public final void wait (long msec): This method is used for making the currently executing thread into waiting state for a period of time. Once this period of time is over, automatically the waiting thread will enter into ready state from waiting state. Static Methods Link The previous methods are invoked on a particular Thread object. The following methods in the Thread class are static. Invoking one of the static methods performs the operation on the currently running thread. public static void yield() : Causes the currently running thread to yield to any other threads of the same priority that are waiting to be scheduled. public static void sleep(long millisec) : Causes the currently running thread to block for at least the specified number of milliseconds. This method throws InterruptedException method is used (waiting state). If the sleep time is over automatically thread will come from waiting state to ready state. For example: Thread.sleep (1000); public static boolean holds(LockObject x) : Returns true if the current thread holds the lock on the given Object. public static Thread(currentThread): Returns a reference to the currently running thread, which is the thread that invokes this method. This method is used for obtaining the threads which are running in the main memory of the computer. For example: Thread t=Thread.currentThread (); System.out.println (t);// Thread [main (fat), 5, main (bat)] public static void dump(Stack) : Prints the stack trace for the currently running thread, which is useful when debugging a multithreaded application. Some Important points to Remember When we extend Thread class, we cannot override setName() and getName() functions, because they are declared final in Thread class. While using sleep(), always handle the exception it throws. static void sleep(long milliseconds) throws InterruptedException Example: Write a JAVA program to findthe threads which are running internally and print priority values . Answer: class ThDemo { publicstatic void main ( String [] args ) { Threadt = Thread . currentThread (); System . out . println ( t ); t . setName ( \"ABC\" ); System . out . println ( t ); System . out . println ( \"IS IT ALIVE..?\" + t . isAlive ()); // true Threadt1 = new Thread (); // new state System . out . println ( \"IS IT ALIVE..?\" + t . isAlive ()); // false System . out . println ( \"DEFAULT NAME OF THREAD = \" + t1 . getName ()); // Thread-0 System . out . println ( \"MAXIMUM PRIORITY VALUE = \" + Thread . MAX_PRIORITY ); // 10 System . out . println ( \"MINIMUM PRIORITY VALUE = \" + Thread . MIN_PRIORITY ); // 1 System . out . println ( \"NORMAL PRIORITY VALUE = \" + Thread . NORM_PRIORITY ); // 5 } }; The following ThreadClassDemo program demonstrates some of these methods of the Thread class . Consider a class DisplayMessage which implements Runnable : // File Name : DisplayMessage.java // Create a thread to implement Runnable public class DisplayMessage implements Runnable { private String message ; public DisplayMessage ( String message ) { this . message = message ; } public void run () { while ( true ) { System . out . println ( message ); } } } Following is another class which extends Thread class: // File Name : GuessANumber.java // Create a thread to extentd Thread public class GuessANumber extends Thread { private int number ; public GuessANumber ( int number ) { this . number = number ; } public void run () { int counter = 0 ; int guess = 0 ; do { guess = ( int ) ( Math . random () * 100 + 1 ); System . out . println ( this . getName () - \" guesses \" + guess ); counter ++; } while ( guess != number ); - System . out . println ( \"** Correct! \" + this . getName () - \" in \" + counter + \" guesses.**\" ); } } Following is the main program which makes use of above defined classes: // File Name : ThreadClassDemo.java public class ThreadClassDemo { public static void main ( String [] args ) { Runnable hello = new DisplayMessage ( \"Hello\" ); Thread thread1 = new Thread ( hello ); thread1 . setDaemon ( true ); thread1 . setName ( \"hello\" ); System . out . println ( \"Starting hello thread...\" ); thread1 . start (); Runnable bye = new DisplayMessage ( \"Goodbye\" ); Thread thread2 = new Thread ( bye ); thread2 . setPriority ( Thread . MIN_PRIORITY ); thread2 . setDaemon ( true ); System . out . println ( \"Starting goodbye thread...\" ); thread2 . start (); System . out . println ( \"Starting thread3...\" ); Thread thread3 = new GuessANumber ( 27 ); thread3 . start (); try { thread3 . join (); } catch ( InterruptedException e ) { System . out . println ( \"Thread interrupted.\" ); } System . out . println ( \"Starting thread4...\" ); Thread thread4 = new GuessANumber ( 75 ); thread4 . start (); System . out . println ( \"main() is ending...\" ); } } This would produce the following result . You can try this example again and again and you would get different result every time . Starting hello thread ... Starting goodbye thread ... Hello Hello Hello Hello Hello Hello Goodbye Goodbye Goodbye Goodbye Goodbye ....... Major Java Multithreading Concepts: While doing Multithreading programming in Java, you would need to have the following concepts very handy: What is thread synchronization? Handling threads inter communication Handling thread deadlock Major thread operations Loading [MathJax]/jax/output/HTML-CSS/ja Joining Thread Link Sometimes one thread needs to know when another thread is ending. In java, isAlive() and join() are two different methods to check whether a thread has finished its execution. The isAlive() methods return true if the thread upon which it is called is still running otherwise it return false. final boolean isAlive() But, join() method is used more commonly than isAlive(). This method waits until the thread on which it is called terminates. final void join() throws InterruptedException Using join() method, we tell our thread to wait until the specifid thread completes its execution. There are overloaded versions of join() method, which allows us to specify time for which you want to wait for the specified thread to terminate. final void join(long milliseconds) throws InterruptedException Example of isAlive method public class MyThread extends Thread { public void run () { System . out . println ( \"r1 \" ); try { Thread . sleep ( 500 ); } catch ( InterruptedException ie ){} System . out . println ( \"r2 \" ); } public static void main ( String [] args ) { MyThread t1 = new MyThread (); MyThread t2 = new MyThread (); t1 . start (); t2 . start (); System . out . println ( t1 . isAlive ()); System . out . println ( t2 . isAlive ()); } } Output r1 true true r1 r2 r2 Example of thread without join () method public class MyThread extends Thread { public void run () { System . out . println ( \"r1 \" ); try { Thread . sleep ( 500 ); } catch ( InterruptedException ie ){} System . out . println ( \"r2 \" ); } public static void main ( String [] args ) { MyThread t1 = new MyThread (); MyThread t2 = new MyThread (); t1 . start (); t2 . start (); } } Output r1 r1 r2 r2 In this above program two thread t1 and t2 are created. t1 starts first and after printing \"r1\" on console thread t1 goes to sleep for 500 mls.At the same time Thread t2 will start its process and print \"r1\" on console and then goes into sleep for 500 mls. Thread t1 will wake up from sleep and print \"r2\" on console similarly thread t2 will wake up from sleep and print \"r2\" on console. So you will get output like r1 r1 r2 r2 Example of thread with join () method public class MyThread extends Thread { public void run () { System . out . println ( \"r1 \" ); try { Thread . sleep ( 500 ); } catch ( InterruptedException ie ){} System . out . println ( \"r2 \" ); } public static void main ( String [] args ) { MyThread t1 = new MyThread (); MyThread t2 = new MyThread (); t1 . start (); try { t1 . join (); //Waiting for t1 to finish } catch ( InterruptedException ie ){} t2 . start (); } } Output r1 r2 r1 r2 In this above program join() method on thread t1 ensure that t1 finishes it process before thread t2 starts. Specifying time with join() If in the above program, we specify time while using join() with m1, then m1 will execute for that time, and then m2 and m3 will join it. m1.join(1500); Doing so, initially m1 will execute for 1.5 seconds, after which m2 and m3 will join it. Synchronization Link At times when more than one thread try to access a shared resource, we need to ensure that resource will be used by only one thread at a time. The process by which this is achieved is called synchronization. The synchronization keyword in java creates a block of code referred to as critical section. Every Java object with a critical section of code gets a lock associated with the object. To enter critical section a thread need to obtain the corresponding object's lock. General Syntax : synchronized (object) { //statement to be synchronized } Why we use Syncronization ? If we do not use syncronization, and let two or more threads access a shared resource at the same time, it will lead to distorted results. Consider an example, Suppose we have two different threads T1 and T2, T1 starts execution and save certain values in a file temporary.txt which will be used to calculate some result when T1 returns. Meanwhile, T2 starts and before T1 returns, T2 change the values saved by T1 in the file temporary.txt (temporary.txt is the shared resource). Now obviously T1 will return wrong result. To prevent such problems, synchronization was introduced. With synchronization in above case, once T1 starts using temporary.txt file, this file will be locked(LOCK mode), and no other thread will be able to access or modify it until T1 returns. Using Synchronized Methods Using Synchronized methods is a way to accomplish synchronization. But lets first see what happens when we do not use synchronization in our program. Example with no Synchronization class First { public void display ( String msg ) { System . out . print ( \"[\" + msg ); try { Thread . sleep ( 1000 ); } catch ( InterruptedException e ) { e . printStackTrace (); } System . out . println ( \"]\" ); } } class Second extends Thread { String msg ; First fobj ; Second ( First fp , String str ) { fobj = fp ; msg = str ; start (); } public void run () { fobj . display ( msg ); } } public class Syncro { public static void main ( String [] args ) { First fnew = new First (); Second ss = new second ( fnew , \"welcome\" ); Second ss1 = new second ( fnew , \"new\" ); Second ss2 = new second ( fnew , \"programmer\" ); } } Output : [ welcome [ new [ programmer ] ] ] In the above program, object fnew of class First is shared by all the three running threads(ss, ss1 and ss2) to call the shared method(void display). Hence the result is unsynchronized and such situation is called Race condition. Synchronized Keyword Link To synchronize above program, we must serialize access to the shared display() method, making it available to only one thread at a time. This is done by using keyword synchronized with display() method. synchronized void display (String msg) Using Synchronised block Link If you have to synchronize access to object of a class that has no synchronized methods, and you cannot modify the code. You can use synchronized block to use it. class First { public void display ( String msg ) { System . out . print ( \"[\" + msg ); try { Thread . sleep ( 1000 ); } catch ( InterruptedException e ) { e . printStackTrace (); } System . out . println ( \"]\" ); } } class Second extends Thread { String msg ; First fobj ; Second ( First fp , String str ) { fobj = fp ; msg = str ; start (); } public void run () { synchronized ( fobj ) //Synchronized block { fobj . display ( msg ); } } } public class Syncro { public static void main ( String [] args ) { First fnew = new First (); Second ss = new second ( fnew , \"welcome\" ); Second ss1 = new second ( fnew , \"new\" ); Second ss2 = new second ( fnew , \"programmer\" ); } } Output : [ welcome ] [ new ] [ programmer ] Because of synchronized block this program gives the expected output. Inter Thread Communication Link If two or more threads are exchanging the data then that communication is known as inter thread communication. In inter thread communication; an output of one thread is given as an input to another thread. In order to develop inter thread communication applications we must make use of a class called java.lang.Object. Java provide benefit of avoiding thread pooling using inter thread communication. Methods in java.lang.Object: public void wait (long msec) public void wait (long msec, int nanosec) public void wait () public void notify () public void notifyAll () These methods are implemented as final in Object. All methods can be called only from within a synchronized context. wait() tells calling thread to give up monitor and go to sleep until some other thread enters the same monitor and call notify. notify() wakes up a thread that called wait() on same object. notifyAll() wakes up all the thread that called wait() on same object Difference between wait() and sleep() wait() sleep() called from synchronised block **** no such requirement**** monitor is released **** monitor is not released**** awake when notify() or notifyAll() method is called.**** not awake when notify() or notifyAll() method is called**** not a static method **** static method**** wait() is generally used on condition **** sleep() method is simply used to put your thread on sleep.**** Thread Pooling Link Pooling is usually implemented by loop i.e to check somecondition repeatedly. Once condition is true appropriate action is taken. This waste CPU time. Deadlock Link Deadlock is a situation of complete Lock, when no thread cancomplete its execution because lack of resources. In the above picture, Thread1 is holding a resource R1, and need another resource R2 to finish execution,but R2 is locked by Thread 2, which needs R3, which in turn is locked by Thread3. Hence none of them can finish and are stuck in a deadlock. //Example of deadlock class Pen {} class Paper {} public class Write { public static void main ( String [] args ) { final Pen pn = new Pen (); final Paper pr = new Paper (); Thread t1 = new Thread () { public void run () { synchronized ( pn ) { System . out . println ( \"Thread1is holding Pen\" ); try { Thread . sleep ( 1000 ); } catch ( InterruptedExceptione ){} synchronized ( pr ) { System . out . println ( \"Requesting for Paper\" ); } } } }; Thread t2 = new Thread () { public void run () { synchronized ( pr ) { System . out . println ( \"Thread2is holding Paper\" ); try { Thread . sleep ( 1000 ); } catch ( InterruptedExceptione ){} synchronized ( pn ) { System . out . println ( \"requesting for Pen\" ); } } } }; t1 . start (); t2 . start (); } } Output Thread1 is holding Pen Thread2 is holding Paper //Write a JAVA program whichproduces 1 to 10 numbers in which even numbers are produced by one thread andodd numbers are produced by another thread. //Answer: class Th1 extends Thread { public void run () { try { for ( int i = 1 ; i <= 10 ; i += 2 ) { System . out . println ( \"VALUE OF ODD : \" + i ); Thread . sleep ( 1000 ); } } catch ( InterruptedException ie ) { System . out . println ( ie ); } } }; class Th2 implements Runnable { public void run () { try { for ( int j = 2 ; j <= 10 ; j += 2 ) { System . out . println ( \"VALUE OF EVEN : \" + j ); Thread . sleep ( 1000 ); } } catch ( InterruptedException ie ) { System . out . println ( ie ); } } } class ThDemo6 { public static void main ( String [] args ) { Th1 t1 = new Th1 (); // object of Thread class Th2 t2 = new Th2 (); // object of Runnable class Thread t = new Thread ( t2 ); // Runnable isconverted into Thread object System . out . println ( \"BEFORE START T1 IS: \" + t1 . isAlive ()); System . out . println ( \"BEFORE START T2 IS: \" + t . isAlive ()); t1 . start (); t . start (); System . out . println ( \"AFTER START T1 IS :\" + t1 . isAlive ()); System . out . println ( \"AFTER START T2 IS :\" + t . isAlive ()); try { t1 . join (); // to make thread tojoin together for getting performance t . join (); } catch ( InterruptedException ie ) { System . out . println ( ie ); } System . out . println ( \"AFTER JOINING T1 IS: \" + t1 . isAlive ()); System . out . println ( \"AFTER JOINING T2 IS: \" + t . isAlive ()); } } Can we Start a thread twice ? Link No, a thread cannot be started twice. If you try to do so, IllegalThreadStateException will be thrown. public static void main( String args[] ) { MyThread mt = new MyThread(); mt.start(); mt.start(); //Exception thrown } When a thread is in running state, and you try to start it again, or any method try to invoke that thread again using start () method, exception is thrown. Exception Handling Link Java provides a neater, more structured alternative method for dealing with possible errors that can occur while a program is running. Exceptions are things that are not supposed to occur The word \u201cexception\u201d is meant to be more general than \u201cerror\u201d. Some exceptions (like division by zero) are avoidable through careful programming Some exceptions (like losing a network connection) are not avoidable or predictable Java allows programmers to define their own means of handling exceptions when they occur Exception Handling is the mechanism to handle runtime malfunctions. We need to handle such exceptions to prevent abrupt termination of program. The term exception means exceptional condition, it is a problem that may arise during the execution of program. A bunch of things can lead to exceptions, including programmer error, hardware failures, files that need to be opened cannot be found, resource exhaustion etc. Exception Link A Java Exception is an object that describes the exception that occurs in a program. When an exceptional events occurs in java, an exception is said to be thrown. The code that's responsible for doing something about the exception is called an exception handler. Exception class Hierarchy Link All exception types are subclasses of class Throwable, which is at the top of exception class hierarchy. Exception class is for exceptional conditions that program should catch. This class is extended to create user specific exception classes. RuntimeException is a subclass of Exception. Exceptions under this class are automatically defined for programs. Exception are categorized into 3 category. Link Checked Exception: The exception that can be predicted by the programmer.Example : File that need to be opened is not found. These type of exceptions must be checked at compile time. Unchecked Exception: Unchecked exceptions are the class that extends RuntimeException. Unchecked exception are ignored at compile time. Example : ArithmeticException, NullPointerException, Array Index out of Bound exception. Unchecked exceptions are checked at runtime. Error: Errors are typically ignored in code because you can rarely do anything about an error. Example : if stack overflow occurs, an error will arise. This type of error is not possible handle in code. Uncaught Exceptions Link When we don't handle the Exceptions, they lead to unexpected program termination. Lets take an example for better understanding. class UncaughtException { public static void main ( String args []) { int a = 0 ; int b = 7 / a ; // Divide by zero, will lead to exception } } This will lead to an exception at runtime, hence the Java run-time system will construct an exception and then throw it. As we don't have any mechanism for handling exception in the above program, hence the default handler will handle the exception and will print the details of the exception on the terminal. Finally Clause Link When exception is thrown control is transferred to method containing the catch block to handle the exception Control does not return to procedure in which the exception was thrown unless it contains a finally clause The finally clause can be used to clean up the programming environment after the exceptions has been handled Finally clause Example void n () { \u2026 try { \u2026 open window \u2026 p () \u2026 } catch ( SomeException se ) { \u2026 } finally { \u2026 close window \u2026 } \u2026 } void p () { \u2026 throw se \u2026 } Introduction An exception or exceptional event is a problem that arises during the execution of a program. When an Exception occurs the normal flow of the program is disrupted and the program/Application terminates abnormally, which is not recommended, therefore these exceptions are to be handled. An exception can occur for many different reasons, below given are some scenarios where exception occurs. A user has entered invalid data. A file that needs to be opened cannot be found. A network connection has been lost in the middle of communications or the JVM has run out of memory. Some of these exceptions are caused by user error, others by programmer error, and others by physical resources that have failed in some manner. Based on these we have three categories of Exceptions you need to understand them to know how exception handling works in Java, Checked exceptions: A checked exception is an exception that occurs at the compile time, these are also called as compile time exceptions. These exceptions cannot simply be ignored at the time of compilation, the Programmer should take care of handle these exceptions. For example, if you use FileReader class in your program to read data from a file, if the file specified in its constructor doesn't exist, then an FileNotFoundException occurs, and compiler prompts the programmer to handle the exception. import java.io.File ; import java.io.FileReader ; public class FilenotFound_Demo { public static void main ( String args []) { File file = new File ( \"E://file.txt\" ); FileReader fr = new FileReader ( file ); } } If you try to compile the above program you will get exceptions as shown below. FilenotFound_Demo.java:8: error: unreported exception FileNotFoundException; must be caught or declared to be thrown FileReader fr = new FileReader(file); ^ 1 error Note: Since the methods read and close of FileReader class throws IOException, you can observe that compiler notifies to handle IOException, along with FileNotFoundException. Unchecked exceptions: An Unchecked exception is an exception that occurs at the time of execution, these are also called as Runtime Exceptions, these include programming bugs, such as logic errors or improper use of an API. runtime exceptions are ignored at the time of compilation. For example, if you have declared an array of size 5 in your program, and trying to call the 6 th element of the array then an ArrayIndexOutOfBoundsExceptionexception occurs. Questions Link How to use handle the exception hierarchies? How to use handle the exception methods? How to use handle the runtime exceptions? How to use handle the empty stack exception ? How to use catch to handle the exception? How to use catch to handle chained exception? How to use handle the exception with overloaded methods ? How to handle the checked exceptions? How to pass arguments while throwing checked exception? How to handle multiple exceptions divide by zero? How to handle multiple exceptions Array out of bound? How to print stack of the Exception? How to use exceptions with thread? How to create user defined Exception","title":"Unit IV"},{"location":"java/UnitIV/#unit-iv","text":"Multi threaded Programming: The Java thread model, the main thread, creating thread, creating multiple thread, using is alive () and join (). Thread priorities, synchronization, Inter thread communications, suspending resuming and stopping thread using multi threading. Exception handling: Exception handling fundamentals","title":"Unit IV"},{"location":"java/UnitIV/#introduction","text":"","title":"Introduction"},{"location":"java/UnitIV/#thread","text":"A program can be divided into a number of smallprocesses. Each small process can be addressed as a single thread (alightweight process). Multithreaded programs contain two or more threads thatcan run concurrently.A flow of control is known as thread. If a program contains multiple flow of controlsfor achieving concurrent execution, then that program is known asmulti-threaded program. A program is said to be a multithreaded programif and only if in which there exist n number of subprograms there exist aseparate flow of control. All such flow of control executing concurrently suchflow of controls are known as threads and such type of applications or programis called multi-threaded programs. The language like C, C++ comes under singlethreaded modelling languages, since there exists single flow of controlswhereas the language like java are treated as multi-threaded modellinglanguages, since there is a possibility of creating multiple flow of control In java program, there exist two threads theyare foreground and background thread. Foreground threads are those which are executinguser defined sub programs where as background threads are those which aremonitoring the status of foreground threads. There is possibility of creating n-number of foregroundthreads and always there exist single background thread. Multithreading is the specialized form ofmultitasking of operating system. In information technology, we can develop two types of applications. They are process based applications and thread based applications. S.No. Process Based Applications Thread Based Applications 1 It is the one in which there exist single flow of control. It is the one in which there exist multiple flow of controls. 2 All C, C++ applications comes under it. All JAVA, DOT NET applications comes under it. 3 Context switch is more (context switch is the concept of operating system and it says switching the control from one address page to another address page). Context switch is very less. 4 For each and every sub-program there exist separate address pages. Irrespective of \u2018n\u2019 number of subprograms there exist single address page. 5 These are treated as heavy weight components. These are treated as light weight components. 6 In this we can achieve only sequential execution and they are not recommending for developing internet applications. In thread based applications we can achieve both sequential and concurrent execution and they are always recommended for developing interact applications. How Thread executes internally A program can perform two or more tasks simultaneously. For example, one thread is writing content on a file at the same time another thread is performing spelling check.**** In Java, the word thread means two different things.**** 1. **An instance of Thread class. or,** 2. **A thread of execution.** An instance of Thread class is just an object, like anyother object in java. But a thread of execution means an**** individual \"lightweight\" process that has its owncall stack. In java, each thread has its own call stack.**** A program can be divided into a number of small processes. Each small process can be addressed as a single thread (a lightweight process). Multi-threaded programs contain two or more threads that can run concurrently. This means that a single program can perform two or more tasks simultaneously. For example, one thread is writing content on a file at the same time another thread is performing spelling check.Java is a multi threaded programming language which means we can develop multi threaded program using Java. A multi threaded program contains two or more parts that can run concurrently and each part can handle different task at the same time making optimal use of the available resources specially when your computer has multiple CPUs. By definition multitasking is when multiple processes share common processing resources such as a CPU. Multi threading extends the idea of multitasking into applications where you can subdivide specific operations within a single application into individual threads. Each of the threads can run in parallel. The OS divides processing time not only among different applications, but also among each thread within an application. Multi threading enables you to write in a way where multiple activities can proceed concurrently in the same program.","title":"Thread"},{"location":"java/UnitIV/#life-cycle-of-a-threadstate-of-thread","text":"When we write any multi-threading applications, there exist \u2018n\u2019 numbers of threads. All the threads will undergo different types of states. A thread goes through various stages in its life cycle. For example, a thread is born, started, runs, and then dies. Following diagram shows complete life cycle of a thread. A thread goes through various stages in its life cycle. For example, a thread is born, started, runs, and then dies. Following diagram shows complete life cycle of a thread. Above-mentioned stages are explained here: New State : A new thread begins its life cycle in the new state. It remains in this state until the program starts the thread. It is also referred to as a born thread. **Ready State : **It is one in which the thread is entered into memory space allocated and it is waiting for CPU for executing. Runnable : After a newly born thread is started, the thread becomes runnable. A thread in this state is considered to be executing its task. Running state : A state is said to be a running state if and only if the thread is under the control of CPU. Waiting State: Sometimes, a thread transitions to the waiting state while the thread waits for another thread to perform a task.A thread transitions back to the runnable state only when another thread signals the waiting thread to continue executing.It is one in which the thread is waiting becauseof the following factors: For the repeating CPU, burst time of the thread(CPU burst time is an amount of the required by the thread by the CPU). Make the thread to sleep for sleep for some specified amount of time. Make the thread to suspend. Make the thread to wait for a period of time. Make the thread to wait without specifying waiting time Timed waiting: A runnable thread can enter the timed waiting state for a specified interval of time. A thread in this state transitions back to the runnable state when that time interval expires or when the event it is waiting for occurs. Halted State or Terminated Dead: A runnable thread enters the terminated state when it completes its task or otherwise terminates.It is one in which the thread has completed its total execution. As long as the thread is in new and halted states whose execution status is false whereas when the thread is in ready, running and waiting states that execution states is true.","title":"Life Cycle of a Thread(State of Thread)"},{"location":"java/UnitIV/#thread-priorities","text":"Every Java thread has a priority that helps the operating system determine the order in which threads are scheduled. Java thread priorities are in the range between MIN_PRIORITY aconstantof1 and MAX_PRIORITY aconstantof10. By default, every thread is given priority NORM_PRIORITY aconstantof5. Threads with higher priority are more important to a program and should be allocated processor time before lower-priority threads. However, thread priorities cannot guarantee the order in which threads execute and very much platform dependent. public static final int MAX_PRIORITY (10); public static final int MIN_PRIORITY (1); public static final int NORM_PRIORITY (5); The above data members are used for setting the priority to threads are created. By default, whenever a thread is created whose default priority NORM_PRIORITY.","title":"Thread Priorities"},{"location":"java/UnitIV/#creating-thread","text":"Java defines two ways by which a thread can be created. By extending the Thread class( java.lang.Thread ). By implementing the Runnable interface(**java.lang.Runnable **). \u200b","title":"Creating Thread"},{"location":"java/UnitIV/#create-thread-by-implementing-runnable-interface","text":"If your class is intended to be executed as a thread then you can achieve this by implementing Runnable interface. You will need to follow three basic steps: Step 1: As a first step you need to implement a run method provided by Runnable interface. This method provides entry point for the thread and you will put you complete business logic inside this method. Following is simple syntax of run method: public void run( ) Step 2: At second step you will instantiate a Thread object using the following constructor: Thread(Runnable threadObj, String threadName); Where, threadObj is an instance of a class that implements the Runnable interface and threadName is the name given to the new thread. Step 3 Once Thread object is created, you can start it by calling start method, which executes a call to run method. Following is simple syntax of start method: void start( ); Example: Here is an example that creates a new thread and starts it running : class RunnableDemo implements Runnable { private Thread t ; private String threadName ; RunnableDemo ( String name ){ threadName = name ; System . out . println ( \"Creating \" + threadName ); } public void run () { System . out . println ( \"Running \" + threadName ); try { for ( int i = 4 ; i > 0 ; i --) { System . out . println ( \"Thread: \" + threadName + \", \" + i ); // Let the thread sleep for a while. Thread . sleep ( 50 ); } } catch ( InterruptedException e ) { System . out . println ( \"Thread \" + threadName + \" interrupted.\" ); } System . out . println ( \"Thread \" + threadName + \" exiting.\" ); } public void start () { System . out . println ( \"Starting \" + threadName ); if ( t == null ) { t = new Thread ( this , threadName ); t . start (); } } } public class TestThread { public static void main ( String args []) { RunnableDemo R1 = new RunnableDemo ( \"Thread-1\" ); R1 . start (); RunnableDemo R2 = new RunnableDemo ( \"Thread-2\" ); R2 . start (); } } This would produce the following result : Creating Thread - 1 Starting Thread - 1 Creating Thread - 2 Starting Thread - 2 Running Thread - 1 Thread: Thread - 1 , 4 Running Thread - 2 Thread: Thread - 2 , 4 Thread: Thread - 1 , 3 Thread: Thread - 2 , 3 Thread: Thread - 1 , 2 Thread: Thread - 2 , 2 Thread: Thread - 1 , 1 Thread: Thread - 2 , 1 Thread Thread - 1 exiting . Thread Thread - 2 exiting .","title":"Create Thread by Implementing Runnable Interface"},{"location":"java/UnitIV/#create-thread-by-extending-thread-class","text":"Thread class is the main class on which Java's Multithreading system is based. Thread class, along with its companion interface Runnable will be used to create and run threads for utilizing Multithreading feature of Java. Thread class is the main class on which Java's Multithreading system is based. Creating a flow of control in JAVA is nothing but creating an object of java.lang.Thread class. An object of Thread class can be created in three ways. They are: Directly Thread t=new Thread (); Using factory method Thread t1=Thread.currentThread (); Using sub-class of Thread class class C1 extends Thread { \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026 ; \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026 ; }; C1 o1 = new C1 (); Threadt1 = new C1 (); Here, C1 is the sub-class ofThread class. Thread API: Constructors of Thread class Thread ( ) Thread ( String str ) Thread ( Runnable r ) Thread ( Runnable r, String str) Thread () : With this Constructor, we can create an object of the Thread class whose default thread name is Thread-0. For example: Thread t=new Thread (); System.out.println (t.getName ());// Thread-0 Thread (String str) : This Constructor is used for creating a thread and we can give the user specified thread name. For example: Thread t=new Thread (\u201cJAVA\u201d); t.setName (\u201cJAVA\u201d); t.setPriority (Thread.MAX_PRIORITY); Thread (Runnable r): This Constructor is used for converting Runnable object into Thread object for entering into run method of Runnable interface by making use of start method of Thread class without giving thread name. Thread (Runnable r, String str): This Constructor is similar to above Constructor but we give thread name through this Constructor. The second way to create a thread is to create a new class that extends Thread class using the following two simple steps. This approach provides more flexibility in handling multiple threads created using available methods in Thread class. Step 1 You will need to override run method available in Thread class. This method provides entry point for the thread and you will put you complete business logic inside this method. Following is simple syntax of run method: public void run ( ) Step 2 Once Thread object is created, you can start it by calling start method, which executes a call to run method. Following is simple syntax of start method: void start ( ); Example: Here is the preceding program rewritten to extend Thread : class ThreadDemo extends Thread { private Thread t ; private String threadName ; ThreadDemo ( String name ){ threadName = name ; System . out . println ( \"Creating \" + threadName ); } public void run () { System . out . println ( \"Running \" + threadName ); try { for ( int i = 4 ; i > 0 ; i --) { System . out . println ( \"Thread: \" + threadName + \", \" + i ); // Let the thread sleep for a while. Thread . sleep ( 50 ); } } catch ( InterruptedException e ) { System . out . println ( \"Thread \" + threadName + \" interrupted.\" ); } System . out . println ( \"Thread \" + threadName + \" exiting.\" ); } public void start () { System . out . println ( \"Starting \" + threadName ); if ( t == null ) { t = new Thread ( this , threadName ); t . start (); } } } public class TestThread { public static void main ( String args []) { ThreadDemo T1 = new ThreadDemo ( \"Thread-1\" ); T1 . start (); ThreadDemo T2 = new ThreadDemo ( \"Thread-2\" ); T2 . start (); } } This would produce the following result : Creating Thread - 1 Starting Thread - 1 Creating Thread - 2 Starting Thread - 2 Running Thread - 1 Thread: Thread - 1 , 4 Running Thread - 2 Thread: Thread - 2 , 4 Thread: Thread - 1 , 3 Thread: Thread - 2 , 3 Thread: Thread - 1 , 2 Thread: Thread - 2 , 2 Thread: Thread - 1 , 1 Thread: Thread - 2 , 1 Thread Thread - 1 exiting . Thread Thread - 2 exiting .","title":"Create Thread by Extending Thread Class:"},{"location":"java/UnitIV/#thread-methods","text":"Following is the list of important methods available in the Thread class.","title":"Thread Methods:"},{"location":"java/UnitIV/#instance-method","text":"public void start() : Starts the thread in a separate path of execution, then invokes the run method on this Thread object. This is the method which is used for making the Thread to start to execute the thread logic. The method start is internally calling the method run (). For example: Thread t1=new Thread (); t1.start (); Thread t2=Thread.currentThread (); t2.start (); public final void suspend (): This method is used for suspending the thread from current execution of thread. When the thread is suspended, it sends to waiting state by keeping the temporary results in process control block (PCB) or job control block (JCB). public void run() : If this Thread object was instantiated using a separate Runnable target, the run method is invoked on that Runnable object. Any JAVA programmer want to define a logic for the thread that logic must be defined only run () method. When the thread is started, the JVM looks for the appropriate run () method for executing the logic of the thread. Thread class is a concrete class and it contains all defined methods and all these methods are being to final except run () method. run () method is by default contains a definition with null body. Since we are providing the logic for the thread in run () method. Hence it must be overridden by extending Thread class into our own class. For example: class C1 extends Thread { public void run () { \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026; \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026; } }; public final void setName(String name) : Changes the name of the Thread object. There is also a getName method for retrieving the name. public final void setPriority(int priority): Sets the priority of this Thread object. The possible values are between 1 and 10. public final int getPriority (); The above two methods are used for setting the priority to the thread and getting the priority of the thread respectively. For example: Thread t1=new Thread (); Int pri=t1.getPriority (); System.out.println (pri);// 5 by default t1.setPriority (Thread.MAX_PRIORITY); pri=t1.getPriority (); System.out.println (pri); // 10 public final void setDaemon(booleanon) : A parameter of true denotes this Thread as a daemon thread. public final void join(long millisec) : The current thread invokes this method on a second thread, causing the current thread to block until the second thread terminates or the specified number of milliseconds passes. public void interrupt() : Interrupts this thread, causing it to continue execution if it was blocked for any reason. public final boolean isAlive(): Returns true if the thread is alive, which is any time after the thread has been started but before it runs to completion. public final void resume (): This method is used for bringing the suspended thread from waiting state to ready state. When the thread is resumed to start executing from where it left out previously by retrieving the previous result from PCB. public final void stop (): This method is used to stop the execution of the current thread and the thread goesto halted state from running state. When the thread is restarted, it starts executing from the beginning only. public final void wait (long msec): This method is used for making the currently executing thread into waiting state for a period of time. Once this period of time is over, automatically the waiting thread will enter into ready state from waiting state.","title":"Instance Method"},{"location":"java/UnitIV/#static-methods","text":"The previous methods are invoked on a particular Thread object. The following methods in the Thread class are static. Invoking one of the static methods performs the operation on the currently running thread. public static void yield() : Causes the currently running thread to yield to any other threads of the same priority that are waiting to be scheduled. public static void sleep(long millisec) : Causes the currently running thread to block for at least the specified number of milliseconds. This method throws InterruptedException method is used (waiting state). If the sleep time is over automatically thread will come from waiting state to ready state. For example: Thread.sleep (1000); public static boolean holds(LockObject x) : Returns true if the current thread holds the lock on the given Object. public static Thread(currentThread): Returns a reference to the currently running thread, which is the thread that invokes this method. This method is used for obtaining the threads which are running in the main memory of the computer. For example: Thread t=Thread.currentThread (); System.out.println (t);// Thread [main (fat), 5, main (bat)] public static void dump(Stack) : Prints the stack trace for the currently running thread, which is useful when debugging a multithreaded application. Some Important points to Remember When we extend Thread class, we cannot override setName() and getName() functions, because they are declared final in Thread class. While using sleep(), always handle the exception it throws. static void sleep(long milliseconds) throws InterruptedException Example: Write a JAVA program to findthe threads which are running internally and print priority values . Answer: class ThDemo { publicstatic void main ( String [] args ) { Threadt = Thread . currentThread (); System . out . println ( t ); t . setName ( \"ABC\" ); System . out . println ( t ); System . out . println ( \"IS IT ALIVE..?\" + t . isAlive ()); // true Threadt1 = new Thread (); // new state System . out . println ( \"IS IT ALIVE..?\" + t . isAlive ()); // false System . out . println ( \"DEFAULT NAME OF THREAD = \" + t1 . getName ()); // Thread-0 System . out . println ( \"MAXIMUM PRIORITY VALUE = \" + Thread . MAX_PRIORITY ); // 10 System . out . println ( \"MINIMUM PRIORITY VALUE = \" + Thread . MIN_PRIORITY ); // 1 System . out . println ( \"NORMAL PRIORITY VALUE = \" + Thread . NORM_PRIORITY ); // 5 } }; The following ThreadClassDemo program demonstrates some of these methods of the Thread class . Consider a class DisplayMessage which implements Runnable : // File Name : DisplayMessage.java // Create a thread to implement Runnable public class DisplayMessage implements Runnable { private String message ; public DisplayMessage ( String message ) { this . message = message ; } public void run () { while ( true ) { System . out . println ( message ); } } } Following is another class which extends Thread class: // File Name : GuessANumber.java // Create a thread to extentd Thread public class GuessANumber extends Thread { private int number ; public GuessANumber ( int number ) { this . number = number ; } public void run () { int counter = 0 ; int guess = 0 ; do { guess = ( int ) ( Math . random () * 100 + 1 ); System . out . println ( this . getName () - \" guesses \" + guess ); counter ++; } while ( guess != number ); - System . out . println ( \"** Correct! \" + this . getName () - \" in \" + counter + \" guesses.**\" ); } } Following is the main program which makes use of above defined classes: // File Name : ThreadClassDemo.java public class ThreadClassDemo { public static void main ( String [] args ) { Runnable hello = new DisplayMessage ( \"Hello\" ); Thread thread1 = new Thread ( hello ); thread1 . setDaemon ( true ); thread1 . setName ( \"hello\" ); System . out . println ( \"Starting hello thread...\" ); thread1 . start (); Runnable bye = new DisplayMessage ( \"Goodbye\" ); Thread thread2 = new Thread ( bye ); thread2 . setPriority ( Thread . MIN_PRIORITY ); thread2 . setDaemon ( true ); System . out . println ( \"Starting goodbye thread...\" ); thread2 . start (); System . out . println ( \"Starting thread3...\" ); Thread thread3 = new GuessANumber ( 27 ); thread3 . start (); try { thread3 . join (); } catch ( InterruptedException e ) { System . out . println ( \"Thread interrupted.\" ); } System . out . println ( \"Starting thread4...\" ); Thread thread4 = new GuessANumber ( 75 ); thread4 . start (); System . out . println ( \"main() is ending...\" ); } } This would produce the following result . You can try this example again and again and you would get different result every time . Starting hello thread ... Starting goodbye thread ... Hello Hello Hello Hello Hello Hello Goodbye Goodbye Goodbye Goodbye Goodbye ....... Major Java Multithreading Concepts: While doing Multithreading programming in Java, you would need to have the following concepts very handy: What is thread synchronization? Handling threads inter communication Handling thread deadlock Major thread operations Loading [MathJax]/jax/output/HTML-CSS/ja","title":"Static Methods"},{"location":"java/UnitIV/#joining-thread","text":"Sometimes one thread needs to know when another thread is ending. In java, isAlive() and join() are two different methods to check whether a thread has finished its execution. The isAlive() methods return true if the thread upon which it is called is still running otherwise it return false. final boolean isAlive() But, join() method is used more commonly than isAlive(). This method waits until the thread on which it is called terminates. final void join() throws InterruptedException Using join() method, we tell our thread to wait until the specifid thread completes its execution. There are overloaded versions of join() method, which allows us to specify time for which you want to wait for the specified thread to terminate. final void join(long milliseconds) throws InterruptedException Example of isAlive method public class MyThread extends Thread { public void run () { System . out . println ( \"r1 \" ); try { Thread . sleep ( 500 ); } catch ( InterruptedException ie ){} System . out . println ( \"r2 \" ); } public static void main ( String [] args ) { MyThread t1 = new MyThread (); MyThread t2 = new MyThread (); t1 . start (); t2 . start (); System . out . println ( t1 . isAlive ()); System . out . println ( t2 . isAlive ()); } } Output r1 true true r1 r2 r2 Example of thread without join () method public class MyThread extends Thread { public void run () { System . out . println ( \"r1 \" ); try { Thread . sleep ( 500 ); } catch ( InterruptedException ie ){} System . out . println ( \"r2 \" ); } public static void main ( String [] args ) { MyThread t1 = new MyThread (); MyThread t2 = new MyThread (); t1 . start (); t2 . start (); } } Output r1 r1 r2 r2 In this above program two thread t1 and t2 are created. t1 starts first and after printing \"r1\" on console thread t1 goes to sleep for 500 mls.At the same time Thread t2 will start its process and print \"r1\" on console and then goes into sleep for 500 mls. Thread t1 will wake up from sleep and print \"r2\" on console similarly thread t2 will wake up from sleep and print \"r2\" on console. So you will get output like r1 r1 r2 r2 Example of thread with join () method public class MyThread extends Thread { public void run () { System . out . println ( \"r1 \" ); try { Thread . sleep ( 500 ); } catch ( InterruptedException ie ){} System . out . println ( \"r2 \" ); } public static void main ( String [] args ) { MyThread t1 = new MyThread (); MyThread t2 = new MyThread (); t1 . start (); try { t1 . join (); //Waiting for t1 to finish } catch ( InterruptedException ie ){} t2 . start (); } } Output r1 r2 r1 r2 In this above program join() method on thread t1 ensure that t1 finishes it process before thread t2 starts. Specifying time with join() If in the above program, we specify time while using join() with m1, then m1 will execute for that time, and then m2 and m3 will join it. m1.join(1500); Doing so, initially m1 will execute for 1.5 seconds, after which m2 and m3 will join it.","title":"Joining Thread"},{"location":"java/UnitIV/#synchronization","text":"At times when more than one thread try to access a shared resource, we need to ensure that resource will be used by only one thread at a time. The process by which this is achieved is called synchronization. The synchronization keyword in java creates a block of code referred to as critical section. Every Java object with a critical section of code gets a lock associated with the object. To enter critical section a thread need to obtain the corresponding object's lock. General Syntax : synchronized (object) { //statement to be synchronized } Why we use Syncronization ? If we do not use syncronization, and let two or more threads access a shared resource at the same time, it will lead to distorted results. Consider an example, Suppose we have two different threads T1 and T2, T1 starts execution and save certain values in a file temporary.txt which will be used to calculate some result when T1 returns. Meanwhile, T2 starts and before T1 returns, T2 change the values saved by T1 in the file temporary.txt (temporary.txt is the shared resource). Now obviously T1 will return wrong result. To prevent such problems, synchronization was introduced. With synchronization in above case, once T1 starts using temporary.txt file, this file will be locked(LOCK mode), and no other thread will be able to access or modify it until T1 returns. Using Synchronized Methods Using Synchronized methods is a way to accomplish synchronization. But lets first see what happens when we do not use synchronization in our program. Example with no Synchronization class First { public void display ( String msg ) { System . out . print ( \"[\" + msg ); try { Thread . sleep ( 1000 ); } catch ( InterruptedException e ) { e . printStackTrace (); } System . out . println ( \"]\" ); } } class Second extends Thread { String msg ; First fobj ; Second ( First fp , String str ) { fobj = fp ; msg = str ; start (); } public void run () { fobj . display ( msg ); } } public class Syncro { public static void main ( String [] args ) { First fnew = new First (); Second ss = new second ( fnew , \"welcome\" ); Second ss1 = new second ( fnew , \"new\" ); Second ss2 = new second ( fnew , \"programmer\" ); } } Output : [ welcome [ new [ programmer ] ] ] In the above program, object fnew of class First is shared by all the three running threads(ss, ss1 and ss2) to call the shared method(void display). Hence the result is unsynchronized and such situation is called Race condition.","title":"Synchronization"},{"location":"java/UnitIV/#synchronized-keyword","text":"To synchronize above program, we must serialize access to the shared display() method, making it available to only one thread at a time. This is done by using keyword synchronized with display() method. synchronized void display (String msg)","title":"Synchronized Keyword"},{"location":"java/UnitIV/#using-synchronised-block","text":"If you have to synchronize access to object of a class that has no synchronized methods, and you cannot modify the code. You can use synchronized block to use it. class First { public void display ( String msg ) { System . out . print ( \"[\" + msg ); try { Thread . sleep ( 1000 ); } catch ( InterruptedException e ) { e . printStackTrace (); } System . out . println ( \"]\" ); } } class Second extends Thread { String msg ; First fobj ; Second ( First fp , String str ) { fobj = fp ; msg = str ; start (); } public void run () { synchronized ( fobj ) //Synchronized block { fobj . display ( msg ); } } } public class Syncro { public static void main ( String [] args ) { First fnew = new First (); Second ss = new second ( fnew , \"welcome\" ); Second ss1 = new second ( fnew , \"new\" ); Second ss2 = new second ( fnew , \"programmer\" ); } } Output : [ welcome ] [ new ] [ programmer ] Because of synchronized block this program gives the expected output.","title":"Using Synchronised block"},{"location":"java/UnitIV/#inter-thread-communication","text":"If two or more threads are exchanging the data then that communication is known as inter thread communication. In inter thread communication; an output of one thread is given as an input to another thread. In order to develop inter thread communication applications we must make use of a class called java.lang.Object. Java provide benefit of avoiding thread pooling using inter thread communication. Methods in java.lang.Object: public void wait (long msec) public void wait (long msec, int nanosec) public void wait () public void notify () public void notifyAll () These methods are implemented as final in Object. All methods can be called only from within a synchronized context. wait() tells calling thread to give up monitor and go to sleep until some other thread enters the same monitor and call notify. notify() wakes up a thread that called wait() on same object. notifyAll() wakes up all the thread that called wait() on same object Difference between wait() and sleep() wait() sleep() called from synchronised block **** no such requirement**** monitor is released **** monitor is not released**** awake when notify() or notifyAll() method is called.**** not awake when notify() or notifyAll() method is called**** not a static method **** static method**** wait() is generally used on condition **** sleep() method is simply used to put your thread on sleep.****","title":"Inter Thread Communication"},{"location":"java/UnitIV/#thread-pooling","text":"Pooling is usually implemented by loop i.e to check somecondition repeatedly. Once condition is true appropriate action is taken. This waste CPU time.","title":"Thread Pooling"},{"location":"java/UnitIV/#deadlock","text":"Deadlock is a situation of complete Lock, when no thread cancomplete its execution because lack of resources. In the above picture, Thread1 is holding a resource R1, and need another resource R2 to finish execution,but R2 is locked by Thread 2, which needs R3, which in turn is locked by Thread3. Hence none of them can finish and are stuck in a deadlock. //Example of deadlock class Pen {} class Paper {} public class Write { public static void main ( String [] args ) { final Pen pn = new Pen (); final Paper pr = new Paper (); Thread t1 = new Thread () { public void run () { synchronized ( pn ) { System . out . println ( \"Thread1is holding Pen\" ); try { Thread . sleep ( 1000 ); } catch ( InterruptedExceptione ){} synchronized ( pr ) { System . out . println ( \"Requesting for Paper\" ); } } } }; Thread t2 = new Thread () { public void run () { synchronized ( pr ) { System . out . println ( \"Thread2is holding Paper\" ); try { Thread . sleep ( 1000 ); } catch ( InterruptedExceptione ){} synchronized ( pn ) { System . out . println ( \"requesting for Pen\" ); } } } }; t1 . start (); t2 . start (); } } Output Thread1 is holding Pen Thread2 is holding Paper //Write a JAVA program whichproduces 1 to 10 numbers in which even numbers are produced by one thread andodd numbers are produced by another thread. //Answer: class Th1 extends Thread { public void run () { try { for ( int i = 1 ; i <= 10 ; i += 2 ) { System . out . println ( \"VALUE OF ODD : \" + i ); Thread . sleep ( 1000 ); } } catch ( InterruptedException ie ) { System . out . println ( ie ); } } }; class Th2 implements Runnable { public void run () { try { for ( int j = 2 ; j <= 10 ; j += 2 ) { System . out . println ( \"VALUE OF EVEN : \" + j ); Thread . sleep ( 1000 ); } } catch ( InterruptedException ie ) { System . out . println ( ie ); } } } class ThDemo6 { public static void main ( String [] args ) { Th1 t1 = new Th1 (); // object of Thread class Th2 t2 = new Th2 (); // object of Runnable class Thread t = new Thread ( t2 ); // Runnable isconverted into Thread object System . out . println ( \"BEFORE START T1 IS: \" + t1 . isAlive ()); System . out . println ( \"BEFORE START T2 IS: \" + t . isAlive ()); t1 . start (); t . start (); System . out . println ( \"AFTER START T1 IS :\" + t1 . isAlive ()); System . out . println ( \"AFTER START T2 IS :\" + t . isAlive ()); try { t1 . join (); // to make thread tojoin together for getting performance t . join (); } catch ( InterruptedException ie ) { System . out . println ( ie ); } System . out . println ( \"AFTER JOINING T1 IS: \" + t1 . isAlive ()); System . out . println ( \"AFTER JOINING T2 IS: \" + t . isAlive ()); } }","title":"Deadlock"},{"location":"java/UnitIV/#can-we-start-a-thread-twice","text":"No, a thread cannot be started twice. If you try to do so, IllegalThreadStateException will be thrown. public static void main( String args[] ) { MyThread mt = new MyThread(); mt.start(); mt.start(); //Exception thrown } When a thread is in running state, and you try to start it again, or any method try to invoke that thread again using start () method, exception is thrown.","title":"Can we Start a thread twice ?"},{"location":"java/UnitIV/#exception-handling","text":"Java provides a neater, more structured alternative method for dealing with possible errors that can occur while a program is running. Exceptions are things that are not supposed to occur The word \u201cexception\u201d is meant to be more general than \u201cerror\u201d. Some exceptions (like division by zero) are avoidable through careful programming Some exceptions (like losing a network connection) are not avoidable or predictable Java allows programmers to define their own means of handling exceptions when they occur Exception Handling is the mechanism to handle runtime malfunctions. We need to handle such exceptions to prevent abrupt termination of program. The term exception means exceptional condition, it is a problem that may arise during the execution of program. A bunch of things can lead to exceptions, including programmer error, hardware failures, files that need to be opened cannot be found, resource exhaustion etc.","title":"Exception Handling"},{"location":"java/UnitIV/#exception","text":"A Java Exception is an object that describes the exception that occurs in a program. When an exceptional events occurs in java, an exception is said to be thrown. The code that's responsible for doing something about the exception is called an exception handler.","title":"Exception"},{"location":"java/UnitIV/#exception-class-hierarchy","text":"All exception types are subclasses of class Throwable, which is at the top of exception class hierarchy. Exception class is for exceptional conditions that program should catch. This class is extended to create user specific exception classes. RuntimeException is a subclass of Exception. Exceptions under this class are automatically defined for programs.","title":"Exception class Hierarchy"},{"location":"java/UnitIV/#exception-are-categorized-into-3-category","text":"Checked Exception: The exception that can be predicted by the programmer.Example : File that need to be opened is not found. These type of exceptions must be checked at compile time. Unchecked Exception: Unchecked exceptions are the class that extends RuntimeException. Unchecked exception are ignored at compile time. Example : ArithmeticException, NullPointerException, Array Index out of Bound exception. Unchecked exceptions are checked at runtime. Error: Errors are typically ignored in code because you can rarely do anything about an error. Example : if stack overflow occurs, an error will arise. This type of error is not possible handle in code.","title":"Exception are categorized into 3 category."},{"location":"java/UnitIV/#uncaught-exceptions","text":"When we don't handle the Exceptions, they lead to unexpected program termination. Lets take an example for better understanding. class UncaughtException { public static void main ( String args []) { int a = 0 ; int b = 7 / a ; // Divide by zero, will lead to exception } } This will lead to an exception at runtime, hence the Java run-time system will construct an exception and then throw it. As we don't have any mechanism for handling exception in the above program, hence the default handler will handle the exception and will print the details of the exception on the terminal.","title":"Uncaught Exceptions"},{"location":"java/UnitIV/#finally-clause","text":"When exception is thrown control is transferred to method containing the catch block to handle the exception Control does not return to procedure in which the exception was thrown unless it contains a finally clause The finally clause can be used to clean up the programming environment after the exceptions has been handled Finally clause Example void n () { \u2026 try { \u2026 open window \u2026 p () \u2026 } catch ( SomeException se ) { \u2026 } finally { \u2026 close window \u2026 } \u2026 } void p () { \u2026 throw se \u2026 } Introduction An exception or exceptional event is a problem that arises during the execution of a program. When an Exception occurs the normal flow of the program is disrupted and the program/Application terminates abnormally, which is not recommended, therefore these exceptions are to be handled. An exception can occur for many different reasons, below given are some scenarios where exception occurs. A user has entered invalid data. A file that needs to be opened cannot be found. A network connection has been lost in the middle of communications or the JVM has run out of memory. Some of these exceptions are caused by user error, others by programmer error, and others by physical resources that have failed in some manner. Based on these we have three categories of Exceptions you need to understand them to know how exception handling works in Java, Checked exceptions: A checked exception is an exception that occurs at the compile time, these are also called as compile time exceptions. These exceptions cannot simply be ignored at the time of compilation, the Programmer should take care of handle these exceptions. For example, if you use FileReader class in your program to read data from a file, if the file specified in its constructor doesn't exist, then an FileNotFoundException occurs, and compiler prompts the programmer to handle the exception. import java.io.File ; import java.io.FileReader ; public class FilenotFound_Demo { public static void main ( String args []) { File file = new File ( \"E://file.txt\" ); FileReader fr = new FileReader ( file ); } } If you try to compile the above program you will get exceptions as shown below. FilenotFound_Demo.java:8: error: unreported exception FileNotFoundException; must be caught or declared to be thrown FileReader fr = new FileReader(file); ^ 1 error Note: Since the methods read and close of FileReader class throws IOException, you can observe that compiler notifies to handle IOException, along with FileNotFoundException. Unchecked exceptions: An Unchecked exception is an exception that occurs at the time of execution, these are also called as Runtime Exceptions, these include programming bugs, such as logic errors or improper use of an API. runtime exceptions are ignored at the time of compilation. For example, if you have declared an array of size 5 in your program, and trying to call the 6 th element of the array then an ArrayIndexOutOfBoundsExceptionexception occurs.","title":"Finally Clause"},{"location":"java/UnitIV/#questions","text":"How to use handle the exception hierarchies? How to use handle the exception methods? How to use handle the runtime exceptions? How to use handle the empty stack exception ? How to use catch to handle the exception? How to use catch to handle chained exception? How to use handle the exception with overloaded methods ? How to handle the checked exceptions? How to pass arguments while throwing checked exception? How to handle multiple exceptions divide by zero? How to handle multiple exceptions Array out of bound? How to print stack of the Exception? How to use exceptions with thread? How to create user defined Exception","title":"Questions"},{"location":"java/UnitV%20-%20Copy/","text":"Using appletviewer: Appletviewer is a tool supplied by SUN micro system to run the applet programs from the command prompt (in the case of browser is not supporting). Syntax: appletviewer filename.java For example: appletviewer MyApp.java E.g. A \"Hello, World\" Applet: The following is a simple applet named HelloWorldApplet.java: import java.applet.* ; import java.awt.* ; public class HelloWorldApplet extends Applet { public void paint ( Graphics g ) { g . drawString ( \"Hello World\" , 25 , 50 ); } } These import statements bring the classes into the scope of our applet class: java.applet.Applet. java.awt.Graphics. Without those import statements, the Java compiler would not recognize the classes Applet and Graphics, which the applet class refers to. To set the font we must use a class called Font. Syntax: Font f = new Font ( \u201c arial \u201d , Font . BOLD , 40 ); In the Graphics class we have the following method which will set the font . java . awt . Graphics public void setFont ( Font fobj ) For example : g . setFont ( f ); Write a JAVA program which illustrates the life cycle methods of applet ? Answer: import java.applet.* ; import java.awt.* ; /*<applet code=\"MyApp1\" height=300 width=300> </applet>*/ public class MyApp1 extends Applet { String s = \" \" ; public void init () { setBackground ( Color . green ); setForeground ( Color . red ); s = s + \" INIT \" ; } public void start () { s = s + \" START \" ; } public void stop () { s = s + \" STOP \" ; } public void destroy () { s = s + \" DESTROY \" ; } public void paint ( Graphics g ) { Font f = new Font ( \"arial\" , Font . BOLD , 40 ); g . setFont ( f ); g . drawString ( s , 100 , 100 ); } }; AWT (abstract windowing toolkit) In JAVA we can develop to types of GUI (Graphic User Interface) applications. They are standalone GUI applications and distributed GUI applications. A standalone GUI application is one which runs in the context of local disk and our class must extends a predefined class called java.lang.Frame class. A distributed GUI application is one which runs in the context of browser and our class must extend java.applet.Applet class. As a part of GUI applications we use to create two types of components. They are passive components and active components. A passive component is one where there is no interaction from the user. For example label An active component is one where there is an interaction from the user. For example button, check box, scroll bar, etc. The active and passive components in JAVA are available in terms of classes. In order to with any GUI applications we must import a package called java.awt.* (contains various classes and interfaces for creating GUI components) and java.awt.event.* (contains various classes and interfaces which will provide functionality to GUI components). Whenever we develop any GUI application we must have readily available window component and window component must contain frame component. Any GUI component which we want to create gives the corresponding class and adds all those components to the object of Container class. A Container is a class whose object allows us to add \u2018n\u2019 number of similar or different GUI components to make a final application Except Object class and Applet class all the classes in the a to java.awt.* package. Write a JAVA program which creates Window and Frame ? Answer: import java.awt.* ; class myf extends Frame { Myf () { setText ( \u201c AshaKrishna \u201d ); setSize ( 100 , 100 ); setBackground ( Colo setForeground ( Color , red ); setVisible ( true ); } }; class FDemo { Public static void main ( String [] args ) { Myf mo = new myf (); } };","title":"UnitV   Copy"},{"location":"java/UnitV/","text":"Unit V Link Introduction to Applets : Applet Fundamentals, using paint method, basic of AWT Introduction Link In JAVA we write two types of programs or applications. They are standalone applications and distributed applications. A standalone application is one which runs in the context of local disk and whose result is not sharable. Every standalone application runs from command prompt and it contains main method along with System.out.println statements. A distributed application is one which runs in the context of browser or World Wide Web and it can be accessed across the globe. Any technology which runs in the browser will have \u2018n\u2019 number of life cycle methods and it does not contain main methods and System.out.println statements. In JAVA, SUN micro initially has developed a concept called applets which runs in the context of browser. An applet is a JAVA program which runs in the context of browser or World Wide Web. In order to deal with applets we must import a package called java.applet.*. This package contains only one class Applet whose fully qualified name is java.applet.Applet. Since applets are running in the browser, the class Applet contains the life cycle methods. Life cycle methods are also called as loop back methods. An applet is a Java program that runs in a Web browser. An applet can be a fully functional Java application because it has the entire Java API at its disposal. There are some important differences between an applet and a standalone Java application, including the following: An applet is a Java class that extends the java.applet.Applet class. A main() method is not invoked on an applet, and an applet class will not define main(). Applets are designed to be embedded within an HTML page. When a user views an HTML page that contains an applet, the code for the applet is downloaded to the user's machine. A JVM is required to view an applet. The JVM can be either a plug-in of the Web browser or a separate runtime environment. The JVM on the user's machine creates an instance of the applet class and invokes various methods during the applet's lifetime. Applets have strict security rules that are enforced by the Web browser. The security of an applet is often referred to as sandbox security, comparing the applet to a child playing in a sandbox with various rules that must be followed. Other classes that the applet needs can be downloaded in a single Java Archive (JAR) file. Life Cycle of an Applet: Link Five methods in the Applet class give you the framework on which you build any serious applet: Public void init () : This is the method which is called by the browser only one time after loading the applet. In this method we write some block of statements which will perform one time operations, such as, obtaining the resources like opening the files, obtaining the database connection, initializing the parameters, etc. This method is intended for whatever initialization is needed for your applet. It is called after the param tags inside the applet tag have been processed. Public void start () : After calling the init method, the next method which is from second request to sub-sequent requests the start method only will be called i.e., short method will be called each and every time. In this method we write the block of statement which provides business logic. This method is automatically called after the browser calls the init method. It is also called whenever the user returns to the page containing the applet after having gone off to other pages. Public void stop (): This id the method which is called by the browser when we minimize the window. In this method we write the block of statements which will temporarily releases the resources which are obtained in init method. This method is automatically called when the user moves off the page on which the applet sits. It can, therefore, be called repeatedly in the same applet. Public void destroy () : This is the method which will be called by the browser when we close the window button or when we terminate the applet application. In this method we write same block of statements which will releases the resources permanently which are obtained in init method.This method is only called when the browser shuts down normally. Because applets are meant to live on an HTML page, you should not normally leave resources behind after a user leaves the page that contains the applet. paint: Invoked immediately after the start() method, and also any time the applet needs to repaint itself in the browser. The paint() method is actually inherited from the java.awt. Another method which is not a life cycle method is public void paint (). This is the method which will be called by the browser after completion of start method. This method is used for displaying the data on to the browser. Paint method is internally calling the method called drawString whose prototype is given below. java.awt.Graphics (Graphics => public void drawString (String, int row position, int column position)) An object of Graphics class will be created automatically after loading the applet into the browser. STEPS for developing APPLET PROGRAM: Link Import java.applet.Applet package. Choose the user defined class that must extends java.applet.Applet class and ensure the modifier of the class must be public. Overwrite the life cycle methods of the applet if require. Save the program and compile. Run the applet: To run the applet we have two ways. They are using HTML program and using applet viewer tool. Using HTML program: In order to run the applet through HTML program we must use the following tag. Syntax: < applet code = . class file of the applet height = height value width = width value ></ applet > <!-- For example : File name : MyApp . html --> < HTML > < HEAD > < TITLE > My applet example </ TITLE > </ HEAD > < BODY > < APPLET code = \"MyApp\" height = 100 width = 150 > </ APPLET > </ BODY > </ HTML > AWT: Abstract WindowingToolkit Link In JAVA we can developto types of GUI (Graphic User Interface) applications. They are standalone **GUI applications and **distributed **GUI applications. A **standalone GUI application is one which runs in the context of local disk and our classmust extends a predefined class called java.lang.frame. A **distributed GUIapplication **is one which runs in the context of browser and our class mustextend java.applet.Applet class. As a part of GUIapplications we use to create two types of components. They are passive components **and **Active Components A **passive component **isone where there is no interaction from the user. For example label. An **active component **is one where there is an interaction from the user. For examplebutton, check box, scroll bar, etc. The **active andpassive components **in JAVA are available in terms of classes. In order todeal with any GUI applications we must import a package called java.awt. (contains various classes and interfaces for creating GUI components) andjava.awt.event. (contains various classes and interfaces which will providefunctionality to GUI components). **AWT Hierarchy Chart: **Whenever we develop anyGUI application we must have readily available window component and windowcomponent must contain frame component. Any GUI component which we want tocreate gives the corresponding class and Container class. AContainer is a class whose object allows us to add \u2018n\u2019 number of similar ordifferent GUI components to make a final application Except Object class andApplet class all the classes in the a to java.awt.* package. Label class : Label is a class whichis used for creating label as a part of windows application. The componentlabel comes under passive component. Labels always improve the functionalityand readability of active components. Creating a label is nothing but creatingan object of label components. Label class API: Data members: publicstatic final int LEFT ( 0 ) publicstatic final int CENTER ( 1 ) publicstatic final int RIGHT ( 2 ) Theabove three statements are called alignment parameters or modifiers. Constructors: Label () Label ( String ) Label ( String label name , int alignment modifier ) Instance methods: public void setText ( String ); public String getText (); public void setAlignment ( int ); public int getAlignment (); Write a JAVA programwhich creates Window and Frame? import java.awt.* ; class myf extends Frame { Myf () { setText ( \u201c AshaKrishna \u201d ); setSize ( 100 , 100 ); setBackground ( Colo setForeground ( Color , red ); setVisible ( true ); } } class FDemo { Public static void main ( String [] args ) { Myf mo = new myf (); } } Event Delegation Model Whenever we want to develop any windows applications one must deal with event delegation model.Event delegation model contains four properties. They are: In order to process any active components, we must know either name or caption or label or reference of the component (object). Whenever we interact any active component,the corresponding active component will have one predefined Event class, whoseobject will be created and that object contains two details: Name of the component. Reference of the component. The general form of every Event class is xxx event.","title":"Unit V"},{"location":"java/UnitV/#unit-v","text":"Introduction to Applets : Applet Fundamentals, using paint method, basic of AWT","title":"Unit V"},{"location":"java/UnitV/#introduction","text":"In JAVA we write two types of programs or applications. They are standalone applications and distributed applications. A standalone application is one which runs in the context of local disk and whose result is not sharable. Every standalone application runs from command prompt and it contains main method along with System.out.println statements. A distributed application is one which runs in the context of browser or World Wide Web and it can be accessed across the globe. Any technology which runs in the browser will have \u2018n\u2019 number of life cycle methods and it does not contain main methods and System.out.println statements. In JAVA, SUN micro initially has developed a concept called applets which runs in the context of browser. An applet is a JAVA program which runs in the context of browser or World Wide Web. In order to deal with applets we must import a package called java.applet.*. This package contains only one class Applet whose fully qualified name is java.applet.Applet. Since applets are running in the browser, the class Applet contains the life cycle methods. Life cycle methods are also called as loop back methods. An applet is a Java program that runs in a Web browser. An applet can be a fully functional Java application because it has the entire Java API at its disposal. There are some important differences between an applet and a standalone Java application, including the following: An applet is a Java class that extends the java.applet.Applet class. A main() method is not invoked on an applet, and an applet class will not define main(). Applets are designed to be embedded within an HTML page. When a user views an HTML page that contains an applet, the code for the applet is downloaded to the user's machine. A JVM is required to view an applet. The JVM can be either a plug-in of the Web browser or a separate runtime environment. The JVM on the user's machine creates an instance of the applet class and invokes various methods during the applet's lifetime. Applets have strict security rules that are enforced by the Web browser. The security of an applet is often referred to as sandbox security, comparing the applet to a child playing in a sandbox with various rules that must be followed. Other classes that the applet needs can be downloaded in a single Java Archive (JAR) file.","title":"Introduction"},{"location":"java/UnitV/#life-cycle-of-an-applet","text":"Five methods in the Applet class give you the framework on which you build any serious applet: Public void init () : This is the method which is called by the browser only one time after loading the applet. In this method we write some block of statements which will perform one time operations, such as, obtaining the resources like opening the files, obtaining the database connection, initializing the parameters, etc. This method is intended for whatever initialization is needed for your applet. It is called after the param tags inside the applet tag have been processed. Public void start () : After calling the init method, the next method which is from second request to sub-sequent requests the start method only will be called i.e., short method will be called each and every time. In this method we write the block of statement which provides business logic. This method is automatically called after the browser calls the init method. It is also called whenever the user returns to the page containing the applet after having gone off to other pages. Public void stop (): This id the method which is called by the browser when we minimize the window. In this method we write the block of statements which will temporarily releases the resources which are obtained in init method. This method is automatically called when the user moves off the page on which the applet sits. It can, therefore, be called repeatedly in the same applet. Public void destroy () : This is the method which will be called by the browser when we close the window button or when we terminate the applet application. In this method we write same block of statements which will releases the resources permanently which are obtained in init method.This method is only called when the browser shuts down normally. Because applets are meant to live on an HTML page, you should not normally leave resources behind after a user leaves the page that contains the applet. paint: Invoked immediately after the start() method, and also any time the applet needs to repaint itself in the browser. The paint() method is actually inherited from the java.awt. Another method which is not a life cycle method is public void paint (). This is the method which will be called by the browser after completion of start method. This method is used for displaying the data on to the browser. Paint method is internally calling the method called drawString whose prototype is given below. java.awt.Graphics (Graphics => public void drawString (String, int row position, int column position)) An object of Graphics class will be created automatically after loading the applet into the browser.","title":"Life Cycle of an Applet:"},{"location":"java/UnitV/#steps-for-developing-applet-program","text":"Import java.applet.Applet package. Choose the user defined class that must extends java.applet.Applet class and ensure the modifier of the class must be public. Overwrite the life cycle methods of the applet if require. Save the program and compile. Run the applet: To run the applet we have two ways. They are using HTML program and using applet viewer tool. Using HTML program: In order to run the applet through HTML program we must use the following tag. Syntax: < applet code = . class file of the applet height = height value width = width value ></ applet > <!-- For example : File name : MyApp . html --> < HTML > < HEAD > < TITLE > My applet example </ TITLE > </ HEAD > < BODY > < APPLET code = \"MyApp\" height = 100 width = 150 > </ APPLET > </ BODY > </ HTML >","title":"STEPS for developing APPLET PROGRAM:"},{"location":"java/UnitV/#awt-abstract-windowingtoolkit","text":"In JAVA we can developto types of GUI (Graphic User Interface) applications. They are standalone **GUI applications and **distributed **GUI applications. A **standalone GUI application is one which runs in the context of local disk and our classmust extends a predefined class called java.lang.frame. A **distributed GUIapplication **is one which runs in the context of browser and our class mustextend java.applet.Applet class. As a part of GUIapplications we use to create two types of components. They are passive components **and **Active Components A **passive component **isone where there is no interaction from the user. For example label. An **active component **is one where there is an interaction from the user. For examplebutton, check box, scroll bar, etc. The **active andpassive components **in JAVA are available in terms of classes. In order todeal with any GUI applications we must import a package called java.awt. (contains various classes and interfaces for creating GUI components) andjava.awt.event. (contains various classes and interfaces which will providefunctionality to GUI components). **AWT Hierarchy Chart: **Whenever we develop anyGUI application we must have readily available window component and windowcomponent must contain frame component. Any GUI component which we want tocreate gives the corresponding class and Container class. AContainer is a class whose object allows us to add \u2018n\u2019 number of similar ordifferent GUI components to make a final application Except Object class andApplet class all the classes in the a to java.awt.* package. Label class : Label is a class whichis used for creating label as a part of windows application. The componentlabel comes under passive component. Labels always improve the functionalityand readability of active components. Creating a label is nothing but creatingan object of label components. Label class API: Data members: publicstatic final int LEFT ( 0 ) publicstatic final int CENTER ( 1 ) publicstatic final int RIGHT ( 2 ) Theabove three statements are called alignment parameters or modifiers. Constructors: Label () Label ( String ) Label ( String label name , int alignment modifier ) Instance methods: public void setText ( String ); public String getText (); public void setAlignment ( int ); public int getAlignment (); Write a JAVA programwhich creates Window and Frame? import java.awt.* ; class myf extends Frame { Myf () { setText ( \u201c AshaKrishna \u201d ); setSize ( 100 , 100 ); setBackground ( Colo setForeground ( Color , red ); setVisible ( true ); } } class FDemo { Public static void main ( String [] args ) { Myf mo = new myf (); } } Event Delegation Model Whenever we want to develop any windows applications one must deal with event delegation model.Event delegation model contains four properties. They are: In order to process any active components, we must know either name or caption or label or reference of the component (object). Whenever we interact any active component,the corresponding active component will have one predefined Event class, whoseobject will be created and that object contains two details: Name of the component. Reference of the component. The general form of every Event class is xxx event.","title":"AWT: Abstract WindowingToolkit"},{"location":"java/Visibility%20Controls/","text":"Java provides a number of access modifiers to set access levels for classes, variables, methods, and constructors. Access Modifiers are used at 2 access levels in Java. Top-level for Classes & Interfaces Default Visible to the same package only. not accessible in other packages or sub packages do not explicitly declare Public Visible to the world Member-level for Classes & Interfaces Public Visible to the world Protected Visible to the package and all subclasses of its class in any package where this class is visible. Default Visible to the same package only. not accessible in other packages or sub packages do not explicitly declare Private Visible to the class only Non-Access Modifiers Static Members Static members are the members with Static keyword in their declarations. Class variables are called as Static variables. These members belong to the class not to the object i.e. they are not instantiated when the class instance is created. The values of these variables are not part of the object state. The static variables are initialized to their default values (if explicit initialization is not specified) at the time of class loading. The Static methods are called as class methods. A static method can directly access other static members in the class. It cannot access instance (non-static) members of the class. But it can always use a reference of the class type to access its members both static and non-static. Final Member Final variable is a constant; its value cannot be changed after its initialization. This applies to instance, static and local variables including parameters that are declared as final. A final variable of primitive data type cannot change its value once it has been initialized. A final variable of a reference type cannot change its reference value once it has been initialized, but the state of the object it denotes can still be changed. Note Variables defined in Interfaces are implicitly Final. Final variables must be initialized before it is used. Final methods in a class are complete i.e. these methods have implementations and hence cannot be overridden in the subclasses. Abstract If method has a keyword abstract in its declaration, then such method/function is called Abstract method. Abstract methods do not have an implementation i.e. method body is not defined; only method prototype is specified in the class definition. Note: Only instance methods can be declared as abstract. Since Static methods cannot be overridden declaring abstract static method would of no use. A Final method cannot be abstract and vice versa. Methods specified in an Interface are implicitly abstract. Class: Contains abstract methods. Cannot be instantiated Interface: All interfaces are implicitly abstract. The modifier is optional. Method: Method without a body. Signature is followed by a semicolon. The class must also be abstract. Synchronized Methods: Multiple threads can be executing in a program and at times they might try to execute several methods on the same object simultaneously. If there is a requirement that only one thread at a time should execute a method in the object, then such methods can be declared as Synchronized. Their execution will be mutually exclusive among all threads. At any given time, at the most one thread will be executing a Synchronized method on an object. Note Synchronized methods are also applicable to Static methods of a class. Native Methods Native Methods are also called as Foreign methods. Such methods implementation is not defined in Java but in another programming language. These methods are specified in the class as method prototypes with prefix with keyword native, no method body is defined in the Java class. Transient Fields Objects can be stored using serialization. Serialization transforms objects into an output format which is helpful for storing objects. Objects can later be retrieved in the same state as when they were serialized, meaning that fields included in the serialization will have the same values at the time of serialization. Such objects are said to be Persistent. The fields are declared with keyword Transient in their class declaration if its value should not be saved when objects of the class are written to persistent storage. Volatile Fields During execution, complied code might cache the values of fields for efficiency reasons. And as multiple threads will access the same field, caching is not allowed to cause inconsistencies when reading and writing the value in the field. The Volatile modifier can be used to inform the compiler that it should not attempt to perform optimizations on the field which could cause unpredicted results when the field is accessed by multiple threads Accessibility Modifiers for Nested Classes & Interfaces Nested Interfaces Access modifiers can be used in Nested interfaces. An interface declared within another class or interface is called a Nested interface. A top-level interface is the one which is not nested. Only one type of nested interface is available in Java based on declarative context, Static member interface. These are interfaces defined with keyword Static inside the top-level interface or class or in another Static member class or interface. It can be instantiated like a normal top-level interface or class, no enclosing instance is required for this interface instantiation. Nested Classes Access modifiers are also used in Nested classes. A class declared within another class is called a Nested class. A top-level class is the one which is not nested. They are 2 categories of Nested classes based on the declarative context. They are Static member classes Inner classes Inner classes are defined in 3 different categories. They are Non-static member classes Local classes Anonymous classes Static member classes Classes which are defined with Static modifier inside the top-level class or other Static member class are called Static member classes. It can be instantiated like a normal top-level class; no enclosing instance is required for this class instantiation. All the 4 accessibility modifiers i.e. Public, Protected, Package & Private are applicable to Static member classes\u2019 declaration. Non-Static member classes Classes which are defined without Static modifier inside another class are called non-static member classes. An instance of a non-static member class always has an enclosing instance associated with it. The accessibility modifiers i.e. Public, Protected, Package & Private,abstract, final are applicable to Non-Static member classes\u2019 declaration. Local classes These classes are defined in the context of a block as in a body of the method or normal local block, just as local variables defined in a method body or local block. An instance of a local class has an enclosing instance associated with it, if it is declared in non-static context. No accessibility modifiers are applicable for Local classes. Anonymous classes These are defined as expressions and instantiated on the fly. An instance of anonymous class has an enclosing instance associated with it, if it is declared in non-static context. No accessibility modifiers are applicable for Anonymous classes. Note A Nested Class or Interface cannot have the same name as any of the enclosing classes or interfaces.","title":"Visibility Controls"},{"location":"java/Practice/Set%2001/","text":"B.E./B.Tech. DEGREE EXAMINATION, NOVEMBER/DECEMBER 2011. Fifth Semester Information Technology IT 2301 \u2014 JAVA PROGRAMMING (Regulation 2008) Time : Three hours Maximum : 100 marks Answer ALL questions. PART A \u2014 (10 \u00d7 2 = 20 marks) 1. Define Encapsulation. 2. What is an abstract class? 3. What is the purpose of \u2018final\u2019 keyword? 4. What is polymorphism? 5. State the difference between inner class and anonymous class? 6. What is interface and mention its use. 7. Which Java.util classes and interfaces support event handling? 8. Which class is the top of the AWT event hierarchy. 9. Give the differences between process and thread. 10. What is synchronization? PART B \u2014 (5 \u00d7 16 = 80 marks) 11. (a) (i) What is inheritance? Explain with examples. (8) (ii) What are access specifiers? Discuss them in the context of Java. (8) Or (b) Write a detailed discussion on constructors. (16) 12. (a) (i) What is dynamic binding. Explain with a real time example. (8) (ii) Write a note on class hierarchy. How do you create hierarchical classes in Java? (8) Or (b) Give a brief overview on java packages. Write necessary code snippets. (16) 13. (a) (i) What is object cloning? Discuss with examples. (8) (ii) What is reflection? Explain. (8) Or (b) Write short notes on the following : (i) Graphics programming (8) (ii) Frame (8) 14. (a) (i) Give an introduction to Swings. (8) (ii) What is an adapter class? Explain its purpose and functionality.(8) Or (b) Discuss the concept of exception handling with an application of your choice. Write necessary code snippets. (16) 15. (a) (i) Where can we write Generic? Explain with a simple example. (6) (ii) What is multithreading? What are the methods available in Java for inter-thread communication? Discuss with an example.(10) Or (b) (i) Write a note on thread synchronization. (6) (ii) When you will synchronize pieces of your code? Explain with examples. (10) IT2301 JAVA PROGRAMMING ANNA UNIVERSITY QUESTION PAPER FOR CSE AND IT DEPARTMENT SUBJECT CODE : IT2301 JAVA PROGRAMMING ANNA UNIVERSITY QUESTION PAPER FOR CSE AND IT DEPARTMENT SUBJECT CODE : IT2301 B.E./B.Tech. DEGREE EXAMINATION, NOVEMBER/DECEMBER 2010 Fifth Semester Information Technology IT 2301 \u2014 JAVA PROGRAMMING (Regulation 2008) Time : Three hours Maximum : 100 Marks Answer ALL questions PART A \u2014 (10 \u00d7 2 = 20 Marks) 1. What is the difference between static and non-static variables? 2. What is the purpose of finalization? 3. What is the difference between the String and StringBuffer classes? 4. Can an abstract class be final? Why? 5. What is an anonymous inner class? 6. What is the difference between the File and Random Access File classes? 7. What are the advantages of the event-delegation model? 8. What happens if an exception is not caught? 9. What is the use of Reflection API? 10. What are three ways in which a thread can enter the waiting state? PART B \u2014 (5 \u00d7 16 = 80 Marks) 11. (a) Explain briefly the following object oriented concepts. (i) Abstraction and Encapsulation. (4) (ii) Methods and messages. (4) (iii) Inheritance. (4) (iv) Polymorphism. (4) Or (b) (i) How objects are constructed? Explain constructor overloading with an example. (10) (ii) Write short notes on access specifiers in java. (6) 12. (a) What is a Package? What are the benefits of using packages? Write down the steps in creating a package and using it in a java program with an example. (16) Or (b) What is Dynamic binding? Show with an example how dynamic binding works. (16) 13. (a) What is object cloning? Why it is needed? Explain how objects are cloned. (16) Or (b) How is a Frame created? Write a java program that creates a product enquiry form using frames. (16) 14. (a) With a neat diagram explain the Model view controller design pattern and list out the advantages and disadvantages of using it in designing an application. (16) Or (b) What is an Exception? Explain how to throw, catch and handle Exceptions. (16) 15. (a) What is Generic programming and why is it needed? List the limitations and restrictions of generic programming. (16) Or (b) Explain how to create threads. Write a java program that prints numbers from 1 to 10 line by line after every 5 seconds. (16)","title":"Set 01"},{"location":"java/Practice/Set%2002/","text":"Q1. ____________ is used to develop the Front-End of an application. a. GUI b. Database c. Table d. None of the above Q2. The ____________ method is used to move to the next row of the result set. a. next() b. findNext() c. movenext() d. forward() Q3. The ______________ method is used to retrieve data from a table. a. execute() b. queryExecute() c. query() d. executeQuery() Q4. Which of the following class libraries are required for setting up a connection with the database and to retrieve data? a. DriverManager b. Connection c. Statement d. All of the above Q5. next() method belongs to which class ? a. Connection b. Statement c. ResultSet d. None of them Q6. The _____________ is required to establish connectivity between the Java code and the MySQL database. a. JDBC API b. JDBC Driver c JDBC DriverManager d. All of the above Q7. To execute SQL statements, you need to instantiate a ____________object using the ______________ object. a. Connection , Statement b. Statement, Connection c. JDBC Driver, Statement d. JDBC DriverManager, Statement Q8. Which of the following statement is not correct? a. rs.getString(\u201cEmpCode\u201d); b. rs.getString(1); c. rs.getInteger(2); d. None of these Q9. absolute(n) function is used to a. to move the cursor at the nth row irrespective of its current position. b. to move the cursor at the nth row respective of its current position. c. None of these Q10. relative(n) function is used to a. to move the cursor at the nth row irrespective of its current position. b. to move the cursor at the nth row respective of its current position. c. None of these Q11. ODBC connectivity can be done with _______ language a. Java b. C++ c. Any d. Python Q12. By default port number of Local Host is a. 3305 b. 3306 c. 3308 d. 3380 Q13. All the classes required for connectivity are present in the Package a. util b. sql c. lang d None of these Q14. The name of JDBC driver used for Connectivity of java with MySQL is a. MySQL Connector/J b.DriverManager c. Conection d.None of these Q15. Condsider the Statement Connection conn= DriverManager.getConnection (\u201cjdbc:mysql://localhost:3306/sample\u201d,\u201dKVS\u201d,\u201dSchools\u201d); What is sample, KVS, schools in the above statement. a. username,database,password b. database,tablename1,tablename2 c. database,username,password d. None of these Q16. What is not the work of the Close() method a. it disconnect the database resources b. it reset the ResultSet c. It close the connection between front end and backend. d. It close the Statement Object. Answer Key 1. a. 2. a. 3. d 4. d 5. c 6. d 7. b 8. c 9. a 10. b 11. c 12. b 13. b 14. a 15. c b","title":"Set 02"},{"location":"java/Practice/Set%2003/","text":"GUI Dialogs and Tables Q1.Write the import statement required for using Joption pane Class a)import Javax.Swing.JOption pane b) import Javax. JOption pane c) import Swing.JOption pane d) import Java.Swing.JOption pane Q2. How would you obtain Table model of a table MYTab1 a)MYTab1.Model() b) MYTab1.getModel() c) MYTab1.getTable() d) MYTab1.getValueof Table() Q3.What is the Function of JDialog a) Provide a variety of built in dialog style b) b) General purpose dialog c) Dialog for choosing color d) Dialog for choosing file e) Q4.Suresh want to get the input through Dialog but he is confused to choose the following help him out to choose the correct option a)confirm dialog b) Input dialog c) Message Dialog d) option Dialog Q5. What is the message type property of JOption pan Dialog if input value is -1 a)JoptionPane .Error_Mesage() b) JOptionPane.Plain_Message() c)JOptionPane .Warning _Message() Q6. What is the message type property of JOption pan Dialog if input value is 0 a)JoptionPane .Error_Mesage() b) JOptionPane.Plain_Message() c)JOptionPane .Warning _Message() Q7 What is the message type property of JOption pan Dialog if input value is 2 a)JoptionPane .Error_Mesage() b) JOptionPane.Plain_Message() c)JOptionPane .Warning _Message() Q8 What is the message type property of JOption pan Dialog if input value is 1 a)JoptionPane .Error_Mesage() b) JOptionPane.Plain_Message() c)JOptionPane .Information_Message() Q9. What is the message type property of JOption pan Dialog if input value is 3 a)JoptionPane .Question_Mesage() b) JOptionPane.Plain_Message() c)JOptionPane .Warning _Message() Q10.What is the function of getColumnCount()--- a) Return the number of row in the table b) Return the cell value at row and column c) Return the number of columns in the table d) Q11 What is the function of getRowCount()---- a) Return the number of rows in the table b) Return the cell value at row and column c) Return the number of columns in the table d) Q12 Q10.What is the function of getModel()- a) Return the number of row in the table b) Return the cell value at row and column c) Return the table model that provides the data displayed by this JTable d) Q13.Which syntax is use to remove a row from table \u2013 a) .removeRow( ) b) ) .Rowsremove( ) c) ) .Rowremove( ) Q14. What is showConfirmDialog ( ) method of JOptionPane class do ? A: This method displays a dialog with several buttons and returns as int option type corresponding to the button pressed ( mostly one from Yes, No or Cancel) B: This method displays a dialog to the button pressed ( mostly all from Yes, No and Cancel) C: This method displays a dialog with several buttons and returns as Char option type corresponding to the button pressed ( mostly one from Yes, No or Cancel) Q15. What is showInputDialog ( ) method of JOptionPane class do ? A: It displays one buttons : OK and Cancel. b: It displays two buttons : OK and Cancel. c: It displays three buttons : OK ,YES and Cancel. d: none of these Q16. What is the use of a dialog created with JDialog A: The dialog created with JDialog can not be customised in any form the user wants. B: The dialog created with JDialog can be customised in any form the user wants. C: none of these Q17. What is the USE a dialog created with JOptionPane? A: JDialog, a window\u2019s default cloasing behaviour is available with minimize, maximaize buttons. B: JDialog, a window\u2019s default cloasing behaviour is available with minimize buttons. C: JDialog, a window\u2019s default cloasing behaviour is available with minimize, maximaize and close buttons. D: none of these Q18.Which syntax is use to Add a row in a table \u2013 a) .addRow( ) b) ) .Rowsadd( ) c) ) .Rowadd( ) Q19. Can you add or remove rows in a JTable object \u2013 a)Yes b)No c) None d) both a and b Q20 Can you insert /remove rows from an existing table- a)Yes b)No c) None d) both a and b ANSWER KEY 1 A 2 B 3 B 4 B 5 B 6 A 7 C 8 C 9 A 10 C 11 A 12 C 13 A 14 A 15 A 16 B 17 C 18 A 19 B 20 A","title":"Set 03"},{"location":"java/Practice/Set%2004/","text":"How many bytes does a Unicode character covers a) 2 bytes b)3 bytes c) 4 bytes d)1 bytes To refer to a particular Unicode character which escape sequence is used a)\\n b) \\u c)\\t d)\\a What is the smallest individual unit of a program a)variable b)label c) tokens d) button Which of the following are tokens a)keywords b) literals c) Punctuators d) all of above Which of the following are not tokens? a)keywords b) literals c) Punctuators d) Variables What is null character? a) Keyword b) Literals c) Null literal d) B & C Which of the following are reserved words a) True b) False c) NULL d) All of the above Is java case sensitive? a) Yes b) No c) Partially Yes d) Partially NO Which kind of token is used to create fundamental building block of the program? a) Keywords b) Identifier c) Literals d) Operators Which of the following is valid identifier? a) KV-AGRA B) 12CLASS c) break d) RollNumber Literals are referred as: a)variable b) constant c) labels d) button What are integrals literals a) Whole number with fractional parts b) Whole number without fractional part c) Whole number with irrational part d) Whole number with rational part Which of the following are integer literals a) Decimal b) Octal c) Hexadecimal d) All of the above Decimal integer literals do not begins with a) +1 b) + c) -1 d) 0 Octal integer literals start with a) 0 b) 1 c) 2 d) 3 Octal integer literals should not contain a) 9 b) 0 c) 1 d) 4 Hexadecimal integer literals are preceded by a) 0x b) 1 c) 2 d) 16 Which pair of character is only used only for hexadecimal constants. a) 0-9, A-F b) 0-9, a-g c) 0-8, a- d d) 1-8 , A-X Unlike integer literals real literals contains a) Negative Part b) Fractional part c) Irrational Part d) Complex part A character Literals must be contained in a) Single Quotation Mark (\u2018) b) Punctuation Mark (!) c) Asterisk Sign (*) d) Hash Sign (#) 21 How can we represent a non-graphic character? a) String Literals b) Escape Sequence c) By inverted comma d) By curly braces 22 String literals are surrounded by : a) Single inverted comma b) Double inverted comma c) Backslash d) Colon 23 Java provides _______________ primitive data types: a) 2 b) 3 c) 6 d) 8 24 Which of the following is not a reference data type: a) Classes b) Arrays c) Interface d) int A reference data type is used to store ________ address of an object. a) memory b) base a) none of the above b) all of the above Range of char is a) 0-36589 b) 0-36897 c) 0-65536 d) 0-65538 What is the value of a reference data element in java a) Address of a memory b) Value within memory c) A & B d) None of these A reference is called _____________. a) Enumeration b) Union c) Pointer d) None of the above A variable is a : a) Named memory location b) Pointer c) Base address d) None Which method returns the current text stored in the text based GUI Component a) Parse() method b) getText() method c) None of these d) All of these Whose value of the following can be cannot be changed during program execution. a) Variables b) Base address c) Constant d) Memory address Prefix increment and decrement operator uses - a) Use then change rule b) Both A & D c) None of these d) Change then use rule 33 Evaluate this x=++y+2y if y=8 : a) 21 b) 25 c) 27 d) 26 34 (4==4) || (5==8) Results into _________ because __________. a) True, second condition is true b) False, Second condition is false c) True, both are true d) True, first is true 35 What is the Short hand method for increasing the value of A by 10 a) A=A+10 b) A++ c) A+=10 d) All of the above 36 Why (?:) is also ternary operator a) It requires two operands b) It Requires three Operands c) It requires 4 operands d) None of all 37 Which of the following operator can be used to cast a value to the specified type: a) Dot (.) operator b) ( ) operator c) (type) d) New operator 38 How many types of expression are there: a) Three b) Four c) Six d) Eight 39 Which function returns smallest whole number greater than or equal to x a) Floor x b) rint x c) ceil (x) d) abs(x) 40 Process of converting one predefined data type into another is called a) Type casting b) Coercion c) Type conversion d) None Of These 41 A group of zero or more statement between balance braces is called a) Methods calls b) Empty statement c) Block d) Coercion 42 Which of the following is a null statement a) Int i=0; b) ; c) return x; d) void main() Which method is used to store or change text in a text based GUI Component a) Parse() method b) getText() method c) JOptionPane.showMessageDialog() d) setText() method 44 Reserved words represented by a. Identifier b. Void c. Keyword d. int","title":"Set 04"},{"location":"java/Practice/Set%2005/","text":"Which generation does Java programming language belongs: a. Ist Generation b. IInd Generation c. IIIrd Generation d. IVth Generation The original name of Java was a. Sun Java b. C# c. Oak d. JDK What is true about java: a. Platform Independent b. Programming Language c. Both Platform Independent & Programming Language d. Database Java solves the problem of platform independence by using a. Source Code b. Object Code c. Machine Code d. Byte Code The Process of converting a source code into machine code is called a. Coercion b. Compilation c. Conversion d. Execution The characteristics of Java Programming include(s): a. Platform Independence b. Object oriented Language c. WORA d. ALL Which code is not produced by Java compiler a. Byte Code b. Source Code c. Native Executable code d. None Programs written in Java are compiled by Java Byte Code, which is then interpreted by a special Java Interpreter which is known as a. Java Virtual Machine b. Java Byte Code c. Java Compiler d. Java Development Kit The ___________is a machine instruction for a Java processor chip (JVM) which is independent of the computer system it has to work upon a. Java Virtual Machine b. Java Byte Code c. Java Compiler d. Java APIs The per-programmed tools or controls used to visually design the interface of application. a. Controls b. Containers c. Rapid Application Development tool d. Java APIs WORA denotes a. Programs need to be written once, which can be run (executed) again on same platform. b. Programs need to be written once, which can be run on different platform with slight changes. c. Programs need to be written once, which can be run on different platform without any changes. d. Programs need to be written once, which can be run again on same platform without any changes. IDE stands for a. Integrated Developers Environment b. Integrated Development Environment c. Inclusive Developers Environment d. In-built Development Environment Which is not a salient features of Netbeans IDE: a. Free, Open Source b. Cross platform with JVM c. Rapid Application Development tool d. CUI builder The primary workspace within which GUI design takes place in the IDE a. GUI builder b. Palette c. Code Editor Window d. Inspector window The Components objects as Text field, labels, list boxes etc. that are drawn on frame to get data input or to display output. a. Controls b. Containers c. Palette d. Frames The window where we write Java code (i.e. statements, constants and declaration) in our application. a. GUI builder b. Properties Window c. Code Editor Window d. Inspector window Example of GUI Application is a. DOS b. Windows BIOS c. C++ d. MS Office In Event driven programming a. The program does not follow a predetermined path b. Executes different code sections depending upon which events have occurred. c. The program responds to user\u2019s events d. All of these. Events can occur through a. Messages b. User actions as mouse click, key press c. by executing program. d. Window API\u2019s The control which hold other controls within it. a. Container Controls b. JFrame c. Child Controls d. Widget (Window gadget) To design a Form which provide options i.e. to select various food items, Rahul of Class XI will selects the following controls: a. Check Box b. List Box c. Radio Button d. Text Field Though Check box & Radio Button are same in functionality, yet there is/are true as a difference between both of them :- a. Check box is used to select only one option b. When a radio button is selected, all other radio button in its group are automatically unselected. c. Radio button is used to select multiple options d. It is necessary to select at least one check box from a given choice. Hari of Class XI is confused, while designing GUI Form in order to give choice as to select stream i.e. Science, Commerce or Humanities, which control is best suitable to use: a. Check Box b. Label c. Radio Button d. Text Field The major components that add functionality to GUI are a. Event b. Event Listener c. The source of the Event d. All When user clicks on a button, the button\u2019s _________________ will execute some code in respond to user\u2019s action. a. Event b. Event Listener c. The source of the Event d. Focus The component where the event occurred, is the ______________ of the event. a. Message b. Event Listener c. The source of the Event d. Focus A component that can display multiple lies of Text. a. Check Box b. Label c. Text Area d. Text Field Label is different from Text Field as a. Label can display colored text b. Label displays uneditable text. c. Label can display multiple line d. Both controls are same. The attributes of graphical controls a. Method b. Event c. Properties d. Class A program that is oriented around a GUI responding to events from the user is called a. Event Listener b. Event driven c. Event handler d. Event source","title":"Set 05"},{"location":"java/tutorial/","text":"java_tutorial KVR Java Notes 1 Java Notes 2 Java Notes 3","title":"Home"}]}